(window.webpackJsonp=window.webpackJsonp||[]).push([[5,1],{324:function(n,e,t){"use strict";e.a={head:function(){var n="".concat("https://www.kz62.net").concat(this.$route.path);return{title:this.head.title,meta:[{hid:"description",name:"description",content:this.head.description},{hid:"og:url",property:"og:url",content:n},{hid:"og:title",property:"og:title",content:this.head.title},{hid:"og:description",property:"og:description",content:this.head.description},{hid:"og:image",property:"og:image",content:this.head.image}],link:[{rel:"canonical",href:n}]}}}},326:function(n,e,t){var content=t(340);"string"==typeof content&&(content=[[n.i,content,""]]),content.locals&&(n.exports=content.locals);(0,t(14).default)("21d7cc34",content,!0,{sourceMap:!1})},327:function(n,e,t){var content=t(342);"string"==typeof content&&(content=[[n.i,content,""]]),content.locals&&(n.exports=content.locals);(0,t(14).default)("52da258d",content,!0,{sourceMap:!1})},328:function(n,e,t){"use strict";t(60);var o={components:{PbTags:t(335).a},props:{base:{type:String,required:!0},title:{type:String,default:void 0},description:{type:String,default:void 0},image:{type:String,default:void 0},category:{type:String,default:void 0},tags:{type:Array,default:function(){return[]}},createdAt:{type:String,required:!0}},computed:{path:function(){var n=this.base.split(/_|\./);return"".concat(n[0],"/").concat(n[1])}}},r=(t(341),t(33)),l=t(52),c=t.n(l),d=t(320),m=t(325),h=t(323),v=t(313),f=t(166),k=t(119),j=t(315),component=Object(r.a)(o,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"pb-article-card"},[t("v-card",{attrs:{flat:"",hover:"",tile:""}},[t("n-link",{attrs:{to:"/articles/"+n.path+"/"}},[t("v-img",{attrs:{height:"200px",src:n.image,alt:n.title},scopedSlots:n._u([{key:"placeholder",fn:function(){return[t("v-row",{staticClass:"fill-height ma-0",attrs:{align:"center",justify:"center"}},[t("v-progress-circular",{attrs:{indeterminate:"",color:"primary"}})],1)]},proxy:!0}])},[n._v(" "),t("client-only",[t("v-row",{attrs:{"no-gutters":""}},[t("v-col",[t("v-btn",{staticClass:"white--text",attrs:{color:"black",depressed:"",small:"",tile:"",to:"/search/category/"+n.category+"/"}},[n._v("\n                "+n._s(n.category)+"\n              ")])],1),n._v(" "),t("v-col",{staticClass:"text-right"},[t("v-btn",{staticClass:"white--text",attrs:{color:"black",depressed:"",small:"",tile:""}},[n._v("\n                "+n._s(n.createdAt)+"\n              ")])],1)],1)],1)],1)],1),n._v(" "),t("v-card-title",[t("n-link",{attrs:{to:"/articles/"+n.path+"/"}},[n._v("\n        "+n._s(n.title)+"\n      ")])],1),n._v(" "),t("v-card-text",[t("pb-tags",{attrs:{items:n.tags}})],1)],1)],1)}),[],!1,null,"7e311833",null),w=component.exports;c()(component,{VBtn:d.a,VCard:m.a,VCardText:h.a,VCardTitle:h.b,VCol:v.a,VImg:f.a,VProgressCircular:k.a,VRow:j.a});var _={components:{PbArticleCard:w},props:{items:{type:Array,default:function(){return[]}},prevUrl:{type:String,default:void 0},nextUrl:{type:String,default:void 0}},data:function(){return{mdAndUp:!1}},mounted:function(){this.mdAndUp=this.$vuetify.breakpoint.mdAndUp}},x=Object(r.a)(_,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"pb-article-card-list"},[t("v-row",{attrs:{"no-gutters":""}},[n._l(n.items,(function(e,i){return t("v-col",{key:i,class:{"pb-4":!0,"pr-2":n.mdAndUp&&i%2==0,"pl-2":n.mdAndUp&&i%2==1},attrs:{cols:"12",md:"6"}},[t("pb-article-card",{attrs:{base:e.base,title:e.title,image:e.image,category:e.category,tags:e.tags,"created-at":e.created_at}})],1)})),n._v(" "),t("v-col",{attrs:{cols:"12"}},[t("v-row",{attrs:{"no-gutters":""}},[t("v-col",[n.prevUrl?t("v-btn",{attrs:{color:"primary",tile:"",to:n.prevUrl}},[n._v("\n            prev\n          ")]):n._e()],1),n._v(" "),t("v-col",{staticClass:"text-right"},[n.nextUrl?t("v-btn",{attrs:{color:"primary",tile:"",to:n.nextUrl}},[n._v("\n            next\n          ")]):n._e()],1)],1)],1)],2)],1)}),[],!1,null,null,null);e.a=x.exports;c()(x,{VBtn:d.a,VCol:v.a,VRow:j.a})},333:function(n){n.exports=JSON.parse('{"fileMap":{"src/contents/json/2018-07-22_vfor-error.json":{"title":"Vue.js の v-for でエラーが出た時の対処","description":null,"image":"/images/articles/thumbnails/vue.png","category":"プログラミング","tags":["Vue.js"],"created_at":"2018-07-22","updated_at":"2018-07-22","preview":"ループ時のキー未設定によるエラーの対処\\n\\n修正前コード\\n\\nエラー内容\\n\\nElements in iteration expect to have \'v-bind:key\' directives.\\n\\nどうやらループ時の一意になるキーを設定しなければならないようなので以下のように修正する。\\n\\n修正後コード\\n\\ndatas","dir":"src/contents/json","base":"2018-07-22_vfor-error.json","ext":".json","sourceBase":"2018-07-22_vfor-error.md","sourceExt":".md"},"src/contents/json/2018-08-27_maputils-usage.json":{"title":"MapUtils の使い方 (Apache Commons Collections)","description":null,"image":"/images/articles/thumbnails/java.png","category":"プログラミング","tags":["Java"],"created_at":"2018-08-27","updated_at":"2018-08-27","preview":"はじめに\\n\\nJava の Map 操作を Null セーフで行いたい場合、Apache Commons Collections の MapUtils を使うと良いです。\\n\\nMap インスタンス\\n\\n// 要素あり\\nMap map = new HashMap();\\nmap.put(\\"str\\",","dir":"src/contents/json","base":"2018-08-27_maputils-usage.json","ext":".json","sourceBase":"2018-08-27_maputils-usage.md","sourceExt":".md"},"src/contents/json/2018-08-09_java-split-length.json":{"title":"Java で文字列を指定の桁数で分割し配列にする方法","description":null,"image":"/images/articles/thumbnails/java.png","category":"プログラミング","tags":["Java"],"created_at":"2018-08-09","updated_at":"2018-08-09","preview":"はじめに\\n\\nJava の文字列操作と言えば Apache Commons LangのStringUtilsをよく使いますが、文字列を指定の桁数で分割するメソッドは実装されていないようなので、やり方を書いておきます。\\n\\nやりたいこと\\n\\n分割対象文字列\\n\\nあいうえおかきくけこを指定した桁数で分割する。\\n\\nここでは 3","dir":"src/contents/json","base":"2018-08-09_java-split-length.json","ext":".json","sourceBase":"2018-08-09_java-split-length.md","sourceExt":".md"},"src/contents/json/2018-08-21_json-serialize-deserialize.json":{"title":"Java で Json のシリアライズ・デシリアライズを柔軟に行う","description":null,"image":"/images/articles/thumbnails/java.png","category":"プログラミング","tags":["Java"],"created_at":"2018-08-21","updated_at":"2018-08-21","preview":"前提\\n\\nJson パーサライブラリは Jackson を使用しております。\\n\\nBean 定義\\n\\npublic class Bean {\\n\\n  private int id;\\n\\n  private String name;\\n\\n  public int getId() {\\n    return id;\\n  }","dir":"src/contents/json","base":"2018-08-21_json-serialize-deserialize.json","ext":".json","sourceBase":"2018-08-21_json-serialize-deserialize.md","sourceExt":".md"},"src/contents/json/2019-02-04_firebase-anonymous-authenticated-link.json":{"title":"Firebase の匿名アカウントを認証済みアカウントにリンクさせる","description":null,"image":"/images/articles/thumbnails/firebase.png","category":"プログラミング","tags":["Firebase","Javascript"],"created_at":"2019-02-04","updated_at":"2019-02-04","preview":"はじめに\\n\\nFirebase で匿名認証を使用すると、ユーザは何の情報も入力せずに Firebase","dir":"src/contents/json","base":"2019-02-04_firebase-anonymous-authenticated-link.json","ext":".json","sourceBase":"2019-02-04_firebase-anonymous-authenticated-link.md","sourceExt":".md"},"src/contents/json/2018-08-19_change-hatena-id.json":{"title":"はてなブログのIDを変更するためにやったことまとめ","description":null,"image":"/images/articles/thumbnails/はてなブログ.png","category":"ブログ運営","tags":["はてなブログ"],"created_at":"2018-08-19","updated_at":"2018-08-19","preview":"はじめに\\n\\nはてなIDは登録すると二度と変更ができないので、変更したい場合は現在のはてなIDを削除して再登録する必要があります。\\n\\nこの記事では、はてなIDを削除・再登録し、ブログを移行するまでの作業を記述しています。\\n\\n記事データバックアップ\\n\\n設定 ＞ 詳細設定 ＞","dir":"src/contents/json","base":"2018-08-19_change-hatena-id.json","ext":".json","sourceBase":"2018-08-19_change-hatena-id.md","sourceExt":".md"},"src/contents/json/2018-12-05_vue-firebase-warning.json":{"title":"Vue.js で Firebase を利用するときに警告が出た場合の対処法","description":null,"image":"/images/articles/thumbnails/vue.png","category":"プログラミング","tags":["Vue.js","Firebase"],"created_at":"2018-12-05","updated_at":"2018-12-05","preview":"警告が出る場合\\n\\nimport firebase from \'firebase\'\\n\\nこのようにimportすると下記のような警告が出力されます。\\n\\nIt looks like you\'re using the development build of the Firebase JS SDK.\\nWhen","dir":"src/contents/json","base":"2018-12-05_vue-firebase-warning.json","ext":".json","sourceBase":"2018-12-05_vue-firebase-warning.md","sourceExt":".md"},"src/contents/json/2018-11-03_vue-login.json":{"title":"Vue.js でログイン機能を実装する","description":null,"image":"/images/articles/thumbnails/vue.png","category":"プログラミング","tags":["Vue.js"],"created_at":"2018-11-03","updated_at":"2018-11-03","preview":"前提\\n\\nこの記事は@vue/cliを使用した内容となっております。\\n\\nバージョン\\n\\n\\"vue\\": \\"^2.5.17\\",\\n\\"vue-router\\": \\"^3.0.1\\",\\n\\"vuex\\":","dir":"src/contents/json","base":"2018-11-03_vue-login.json","ext":".json","sourceBase":"2018-11-03_vue-login.md","sourceExt":".md"},"src/contents/json/2019-05-20_nuxt-veevalidate-custom.json":{"title":"Nuxt.js × VeeValidate でカスタムルールを作成する","description":null,"image":"/images/articles/thumbnails/nuxt.png","category":"プログラミング","tags":["Nuxt.js","VeeValidate"],"created_at":"2019-05-20","updated_at":"2019-05-20","preview":"少々はまったので書いておきます。\\n\\n前提として、プラグインとして VeeValidate を読み込む場合です。\\n\\nカスタムルール作成\\n\\nplugins/vee-validate.js\\n\\n引数なしの場合\\n\\nimport Vue from \'vue\'\\nimport VeeValidate, { Validator }","dir":"src/contents/json","base":"2019-05-20_nuxt-veevalidate-custom.json","ext":".json","sourceBase":"2019-05-20_nuxt-veevalidate-custom.md","sourceExt":".md"},"src/contents/json/2019-05-30_nuxt-login.json":{"title":"Nuxt.js でログイン機能を実装する","description":null,"image":"/images/articles/thumbnails/nuxt.png","category":"プログラミング","tags":["Nuxt.js"],"created_at":"2019-05-30","updated_at":"2019-05-30","preview":"Nuxt をインストールする\\n\\nhttps://ja.nuxtjs.org/guide/installation\\n\\n$ npx","dir":"src/contents/json","base":"2019-05-30_nuxt-login.json","ext":".json","sourceBase":"2019-05-30_nuxt-login.md","sourceExt":".md"},"src/contents/json/2018-11-10_heroku-springboot-table.json":{"title":"Heroku の Spring Boot アプリでテーブル接続を行う","description":null,"image":"/images/articles/thumbnails/java.png","category":"プログラミング","tags":["Java","Heroku"],"created_at":"2018-11-10","updated_at":"2018-11-10","preview":"環境\\n\\nmacOS Mojave 10.14.1\\nEclipse (Pleiades) Oxygen.3a Release (4.7.3a)\\n\\n使用するもの\\n\\nHeroku\\nSpring Boot\\nPostgreSQL\\nGradle\\nLombok\\n\\n事前準備\\n\\nあらかじめ Java 8","dir":"src/contents/json","base":"2018-11-10_heroku-springboot-table.json","ext":".json","sourceBase":"2018-11-10_heroku-springboot-table.md","sourceExt":".md"},"src/contents/json/2019-10-31_nuxt-github-blog.json":{"title":"Nuxt.js と GitHub Pages を使った無料ブログを作った","description":"ブログって本格的に運用しようとすると結構お金かかりますよね？お金に余裕がないので自分でブログを作ってみました！その方法とは？","image":"/images/articles/thumbnails/website_blog.png","category":"ブログ運営","tags":["Nuxt.js","GitHubPages"],"created_at":"2019-10-31","updated_at":"2019-10-31","preview":"どんなものを作ったか\\n\\nこのサイトです。\\nhttps://www.kz62.net\\n\\nなぜ作ったか\\n\\n以前はてなブログ PRO","dir":"src/contents/json","base":"2019-10-31_nuxt-github-blog.json","ext":".json","sourceBase":"2019-10-31_nuxt-github-blog.md","sourceExt":".md"},"src/contents/json/2019-11-28_read-book.json":{"title":"今まで本をろくに読んでこなかった人間が本を読もうと決意した","description":"本を読むと知識だけではなく、様々な力が身に付きます。その力とは？","image":"/images/articles/thumbnails/book_hon_no_mushi_man_bug.png","category":"人生の目標","tags":["本"],"created_at":"2019-11-28","updated_at":"2019-11-28","preview":"","dir":"src/contents/json","base":"2019-11-28_read-book.json","ext":".json","sourceBase":"2019-11-28_read-book.md","sourceExt":".md"},"src/contents/json/2019-12-09_iij-object-storage-java.json":{"title":"IIJ のオブジェクトストレージに Java でアップロードする方法","description":null,"image":"/images/articles/thumbnails/job_programmer.png","category":"プログラミング","tags":["Java","IIJオブジェクトストレージ"],"created_at":"2019-12-09","updated_at":"2019-12-09","preview":"はじめに\\n\\nネットを探してもサンプルが見つからなかったので記載しておきます。\\n\\n公式の Java Doc はこちら\\n\\nGradle で依存を追加する\\n\\n変更箇所は以下２つになります。\\n\\nrepositories\\ndependencies\\n\\nrepositories {\\n  maven { url","dir":"src/contents/json","base":"2019-12-09_iij-object-storage-java.json","ext":".json","sourceBase":"2019-12-09_iij-object-storage-java.md","sourceExt":".md"},"src/contents/json/2019-11-29_seven-pockets.json":{"title":"副業を増やしてセブンポケッツを目指そう","description":null,"image":"/images/articles/thumbnails/buisnessman_money_niyakeru.png","category":"人生の目標","tags":["副業","セブンポケッツ"],"created_at":"2019-11-29","updated_at":"2020-02-02","preview":"はじめに\\n\\nみなさん、セブンポケッツという言葉を知っていますか？\\n\\n簡単に言うと 「７つの収入源を持とう」","dir":"src/contents/json","base":"2019-11-29_seven-pockets.json","ext":".json","sourceBase":"2019-11-29_seven-pockets.md","sourceExt":".md"},"src/contents/json/2019-11-14_intellij-startup-failed.json":{"title":"Windows で IntelliJ が起動しなくなったときにやったこと","description":"IntelliJ を 2019.2 にアップデートしたら起動しなくなってしまったので、やったことをまとめました。","image":"/images/articles/thumbnails/intellij.jpg","category":"プログラミング","tags":["IntelliJ"],"created_at":"2019-11-14","updated_at":"2019-11-14","preview":"起動しなくなった経緯\\n\\nもともと Windows で IntelliJ の 2018.3","dir":"src/contents/json","base":"2019-11-14_intellij-startup-failed.json","ext":".json","sourceBase":"2019-11-14_intellij-startup-failed.md","sourceExt":".md"},"src/contents/json/2021-07-10_gogojungle-auth.json":{"title":"GogoJungleで出品したインジケーターのWeb認証がうまく動かない時の対処法","description":"Authentication success と出ているのにうまく動かない時の対処法です。","image":"/images/articles/thumbnails/kabu_chart_man.png","category":"投資","tags":["FX","MQL4","インディケーター","ゴゴジャン"],"created_at":"2021-07-10","updated_at":"2021-07-10","preview":"私はゴゴジャンでインジケーターを出品しているのですが\\nある時Web認証をしているはずのインジケーターが\\n別の口座でも使用できることが判明いたしました。\\n\\nこれはまずいと思い解決策を模索したところ\\n見つかったので記載しようと思います。\\n\\n事象の確認\\n\\n誤解のないように言っておきますと\\n「Authentication","dir":"src/contents/json","base":"2021-07-10_gogojungle-auth.json","ext":".json","sourceBase":"2021-07-10_gogojungle-auth.md","sourceExt":".md"},"src/contents/json/2021-06-22_custom-indicators.json":{"title":"MT4で快適に相場分析するためにインディケーターを作った","description":"表示している全チャートでラインを同期する。上下キー押下で表示している全チャートの通貨ペアを切り替える。","image":"/images/articles/thumbnails/kabu_chart_man.png","category":"投資","tags":["FX","MQL4","インディケーター"],"created_at":"2021-06-22","updated_at":"2021-06-22","preview":"","dir":"src/contents/json","base":"2021-06-22_custom-indicators.json","ext":".json","sourceBase":"2021-06-22_custom-indicators.md","sourceExt":".md"},"src/contents/json/2020-03-08_mql4-editor-settings.json":{"title":"MQL4を開発する環境を整える(Notepad++)","description":null,"image":"/images/articles/thumbnails/job_programmer.png","category":"プログラミング","tags":["FX","MQL4"],"created_at":"2020-03-08","updated_at":"2020-03-09","preview":"はじめに\\n\\nMQL4を開発しやすい環境を整えたので、特につまずいた部分を備忘録として残しておきます。\\n\\n環境は以下の通りです。\\n\\nWintows10\\nMT4 build 1260\\nNotepad++ v7.8.5\\n\\n普段使用している VS Code や IntelliJ IDEA も試してみましたが、Notepad++","dir":"src/contents/json","base":"2020-03-08_mql4-editor-settings.json","ext":".json","sourceBase":"2020-03-08_mql4-editor-settings.md","sourceExt":".md"},"src/contents/json/2021-06-20_before-bedtime-movies.json":{"title":"寝ながら動画鑑賞をする環境を快適にする【タブレットアームスタンド】","description":"寝ながら動画鑑賞をする環境を快適にしたアイテムをご紹介します。","image":"/images/articles/thumbnails/online_school_boy.png","category":"学習","tags":["iPad","YouTube"],"created_at":"2021-06-20","updated_at":"2021-06-20","preview":"","dir":"src/contents/json","base":"2021-06-20_before-bedtime-movies.json","ext":".json","sourceBase":"2021-06-20_before-bedtime-movies.md","sourceExt":".md"},"src/contents/json/2021-06-19_what-i-did-to-be-freelance.json":{"title":"フリーランスになるためにやったこと","description":"何かと準備に大変なフリーランス。フリーランスになるために僕が実施したことをご紹介いたします。","image":"/images/articles/thumbnails/cafe_nomad_man.png","category":"フリーランス","tags":["税金"],"created_at":"2021-06-19","updated_at":"2021-06-19","preview":"","dir":"src/contents/json","base":"2021-06-19_what-i-did-to-be-freelance.json","ext":".json","sourceBase":"2021-06-19_what-i-did-to-be-freelance.md","sourceExt":".md"}},"sourceFileArray":["src/contents/markdown/2018-07-22_vfor-error.md","src/contents/markdown/2018-08-09_java-split-length.md","src/contents/markdown/2018-08-19_change-hatena-id.md","src/contents/markdown/2018-08-21_json-serialize-deserialize.md","src/contents/markdown/2018-08-27_maputils-usage.md","src/contents/markdown/2018-11-03_vue-login.md","src/contents/markdown/2018-11-10_heroku-springboot-table.md","src/contents/markdown/2018-12-05_vue-firebase-warning.md","src/contents/markdown/2019-02-04_firebase-anonymous-authenticated-link.md","src/contents/markdown/2019-05-20_nuxt-veevalidate-custom.md","src/contents/markdown/2019-05-30_nuxt-login.md","src/contents/markdown/2019-10-31_nuxt-github-blog.md","src/contents/markdown/2019-11-14_intellij-startup-failed.md","src/contents/markdown/2019-11-28_read-book.md","src/contents/markdown/2019-11-29_seven-pockets.md","src/contents/markdown/2019-12-09_iij-object-storage-java.md","src/contents/markdown/2020-03-08_mql4-editor-settings.md","src/contents/markdown/2021-06-19_what-i-did-to-be-freelance.md","src/contents/markdown/2021-06-20_before-bedtime-movies.md","src/contents/markdown/2021-06-22_custom-indicators.md","src/contents/markdown/2021-07-10_gogojungle-auth.md"]}')},335:function(n,e,t){"use strict";var o={props:{items:{type:Array,default:function(){return[]}}}},r=(t(339),t(33)),component=Object(r.a)(o,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"pb-tags"},n._l(n.items,(function(e){return t("n-link",{key:e,attrs:{to:"/search/tag/"+e+"/"}},[t("span",{staticClass:"mr-1 my-1"},[n._v("#"+n._s(e))])])})),1)}),[],!1,null,"59010c19",null);e.a=component.exports},339:function(n,e,t){"use strict";var o=t(326);t.n(o).a},340:function(n,e,t){(n.exports=t(13)(!1)).push([n.i,".pb-tags a[data-v-59010c19]{text-decoration:none}",""])},341:function(n,e,t){"use strict";var o=t(327);t.n(o).a},342:function(n,e,t){(n.exports=t(13)(!1)).push([n.i,".pb-article-card a[data-v-7e311833]{text-decoration:none}",""])},343:function(n,e,t){var content=t(365);"string"==typeof content&&(content=[[n.i,content,""]]),content.locals&&(n.exports=content.locals);(0,t(14).default)("41c54815",content,!0,{sourceMap:!1})},344:function(n,e,t){var content=t(369);"string"==typeof content&&(content=[[n.i,content,""]]),content.locals&&(n.exports=content.locals);(0,t(14).default)("02e8b8ca",content,!0,{sourceMap:!1})},345:function(n,e,t){var content=t(393);"string"==typeof content&&(content=[[n.i,content,""]]),content.locals&&(n.exports=content.locals);(0,t(14).default)("50f5049a",content,!0,{sourceMap:!1})},364:function(n,e,t){"use strict";var o=t(343);t.n(o).a},365:function(n,e,t){(n.exports=t(13)(!1)).push([n.i,'.v-application .pb-markdown-viewer{word-wrap:break-word}.v-application .pb-markdown-viewer h2{position:relative;color:#fff;padding:.1em .1em .1em 1.2em;background-color:#fb8c00;border-radius:.1em;margin:20px 0}.v-application .pb-markdown-viewer h2:after{position:absolute;top:50%;left:.4em;transform:translateY(-50%);content:"";width:5px;height:70%;background-color:#fff}.v-application .pb-markdown-viewer h3{position:relative;border-bottom:4px solid #ddd;margin:15px 0}.v-application .pb-markdown-viewer h3:after{position:absolute;content:" ";border-bottom:4px solid #fb8c00;width:20%;display:block}.v-application .pb-markdown-viewer h4{position:relative;padding-left:1em;margin:10px 0}.v-application .pb-markdown-viewer h4:after{position:absolute;top:50%;left:0;transform:translateY(-50%);content:"";width:10px;height:10px;background-color:#fb8c00}.v-application .pb-markdown-viewer pre{border-radius:0}.v-application .pb-markdown-viewer pre code:after,.v-application .pb-markdown-viewer pre code:before{content:""}.v-application .pb-markdown-viewer pre code[data-filename]{margin-top:20px}.v-application .pb-markdown-viewer pre code[data-filename]:before{content:attr(data-filename);position:absolute;top:-36px;left:-61px;padding:2px 5px;color:#f8f8f2;background-color:#878787}.v-application .pb-markdown-viewer code{font-size:85%;font-weight:300;color:#f8f8f2;background-color:#272822;box-shadow:none}.v-application .pb-markdown-viewer blockquote{position:relative;padding:10px 15px 10px 40px;box-sizing:border-box;background:#ddd;color:#555;border-left:4px solid #fb8c00}.v-application .pb-markdown-viewer blockquote:before{display:inline-block;position:absolute;top:8px;left:8px;content:"“";font-family:sans-serif;color:#fb8c00;font-size:60px;line-height:1}.v-application .pb-markdown-viewer blockquote p{padding:0;margin:7px 0;line-height:1.7}.v-application .pb-markdown-viewer blockquote cite{display:block;text-align:right;color:#777;font-size:.9em}.v-application .pb-markdown-viewer blockquote cite:before{content:"引用元: ";font-style:normal}.v-application .pb-markdown-viewer img{width:100%}.v-application .pb-markdown-viewer ul{margin-bottom:16px}.v-application .pb-markdown-viewer .kaerebalink-box{box-shadow:0 10px 25px 0 rgba(0,0,0,.1);padding:16px;margin-bottom:16px}.v-application .pb-markdown-viewer .kaerebalink-box img{width:auto}.v-application .pb-markdown-viewer .kaerebalink-box .kaerebalink-footer .shoplinkrakuten a{background-color:#bf0000}.v-application .pb-markdown-viewer .kaerebalink-box .kaerebalink-footer .shoplinkamazon a{background-color:#f90}.v-application .pb-markdown-viewer .kaerebalink-box .kaerebalink-footer a{height:36px;min-width:64px;padding:0 16px;will-change:box-shadow;font-size:.875rem;color:#fff;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);align-items:center;border-radius:4px;display:inline-flex;flex:0 0 auto;font-weight:500;letter-spacing:.0892857143em;justify-content:center;max-width:100%;outline:0;position:relative;text-decoration:none;text-indent:.0892857143em;transition-duration:.28s;transition-property:box-shadow,transform,opacity;transition-timing-function:cubic-bezier(.4,0,.2,1);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;vertical-align:middle;white-space:nowrap}',""])},368:function(n,e,t){"use strict";var o=t(344);t.n(o).a},369:function(n,e,t){(n.exports=t(13)(!1)).push([n.i,".v-application .pb-toc-creator__link{line-height:250%;color:inherit}",""])},370:function(n,e,t){var map={"./2018-07-22_vfor-error.json":371,"./2018-08-09_java-split-length.json":372,"./2018-08-19_change-hatena-id.json":373,"./2018-08-21_json-serialize-deserialize.json":374,"./2018-08-27_maputils-usage.json":375,"./2018-11-03_vue-login.json":376,"./2018-11-10_heroku-springboot-table.json":377,"./2018-12-05_vue-firebase-warning.json":378,"./2019-02-04_firebase-anonymous-authenticated-link.json":379,"./2019-05-20_nuxt-veevalidate-custom.json":380,"./2019-05-30_nuxt-login.json":381,"./2019-10-31_nuxt-github-blog.json":382,"./2019-11-14_intellij-startup-failed.json":383,"./2019-11-28_read-book.json":384,"./2019-11-29_seven-pockets.json":385,"./2019-12-09_iij-object-storage-java.json":386,"./2020-03-08_mql4-editor-settings.json":387,"./2021-06-19_what-i-did-to-be-freelance.json":388,"./2021-06-20_before-bedtime-movies.json":389,"./2021-06-22_custom-indicators.json":390,"./2021-07-10_gogojungle-auth.json":391};function o(n){var e=r(n);return t(e)}function r(n){if(!t.o(map,n)){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}return map[n]}o.keys=function(){return Object.keys(map)},o.resolve=r,n.exports=o,o.id=370},371:function(n){n.exports=JSON.parse('{"title":"Vue.js の v-for でエラーが出た時の対処","description":null,"image":"/images/articles/thumbnails/vue.png","category":"プログラミング","tags":["Vue.js"],"created_at":"2018-07-22","updated_at":"2018-07-22","bodyContent":"## ループ時のキー未設定によるエラーの対処\\n\\n### 修正前コード\\n\\n```html {data-filename=~xxx.html}\\n<div v-for=\\"data in datas\\"></div>\\n```\\n\\n### エラー内容\\n\\n```bash\\nElements in iteration expect to have \'v-bind:key\' directives.\\n```\\n\\nどうやらループ時の一意になるキーを設定しなければならないようなので以下のように修正する。\\n\\n### 修正後コード\\n\\n#### datas が配列の時\\n\\n```html {data-filename=~xxx.html}\\n<div v-for=\\"(data, index) in datas\\" :key=\\"index\\">\\n  {{ index }}: {{ data }}\\n</div>\\n```\\n\\n配列の添字を指定することで必ず一意になる。\\n\\n#### datas がオブジェクトの時\\n\\n```html {data-filename=~xxx.html}\\n<div v-for=\\"(value, key) in datas\\" :key=\\"key\\">\\n  {{ key }}: {{ value }}\\n</div>\\n```\\n\\nオブジェクトのキーを指定することで必ず一意になる。\\n\\n## ループ内のテキストフィールドがうまく動作しない時の対処\\n\\n### 問題のソースコード\\n\\n```html {data-filename=~xxx.html}\\n<span v-for=\\"object in objects\\" :key=\\"object.id\\">\\n  <input v-model=\\"object.id\\" />\\n</span>\\n```\\n\\n```js {data-filename=~xxx.js}\\nobjects: [{ id: 1 }, { id: 2 }, { id: 3 }]\\n```\\n\\n上記の状態でテキストフィールドに文字を入力すると１文字打つ毎にフォーカスが外れてしまいます。\\n\\nそこで下記のように修正したら解消しました。\\n\\n### 修正後ソースコード\\n\\n```html {data-filename=~xxx.html}\\n<span v-for=\\"(object, index) in objects\\" :key=\\"index\\">\\n  <input v-model=\\"object.id\\" />\\n</span>\\n```\\n\\n`v-for` で一意を判別する値がまずかったっぽいですね。\\n\\nまぁ、`object.id`を設定した場合、テキストフィールドにバインドしてあるので衝突が起こる可能性があるので当然と言えば当然ですね笑","bodyHtml":"<h2>ループ時のキー未設定によるエラーの対処</h2>\\n<h3>修正前コード</h3>\\n<pre><code class=\\"hljs\\">&lt;div v-for=\\"data in datas\\"&gt;&lt;/div&gt;</code></pre><h3>エラー内容</h3>\\n<pre><code class=\\"hljs\\">Elements <span class=\\"hljs-keyword\\">in</span> iteration expect to have <span class=\\"hljs-string\\">\'v-bind:key\'</span> directives.</code></pre><p>どうやらループ時の一意になるキーを設定しなければならないようなので以下のように修正する。</p>\\n<h3>修正後コード</h3>\\n<h4>datas が配列の時</h4>\\n<pre><code class=\\"hljs\\">&lt;div v-for=\\"(data, index) in datas\\" :key=\\"index\\"&gt;\\n  {{ index }}: {{ data }}\\n&lt;/div&gt;</code></pre><p>配列の添字を指定することで必ず一意になる。</p>\\n<h4>datas がオブジェクトの時</h4>\\n<pre><code class=\\"hljs\\">&lt;div v-for=\\"(value, key) in datas\\" :key=\\"key\\"&gt;\\n  {{ key }}: {{ value }}\\n&lt;/div&gt;</code></pre><p>オブジェクトのキーを指定することで必ず一意になる。</p>\\n<h2>ループ内のテキストフィールドがうまく動作しない時の対処</h2>\\n<h3>問題のソースコード</h3>\\n<pre><code class=\\"hljs\\">&lt;span v-for=\\"object in objects\\" :key=\\"object.id\\"&gt;\\n  &lt;input v-model=\\"object.id\\" /&gt;\\n&lt;/span&gt;</code></pre><pre><code class=\\"hljs\\">objects: [{ id: 1 }, { id: 2 }, { id: 3 }]</code></pre><p>上記の状態でテキストフィールドに文字を入力すると１文字打つ毎にフォーカスが外れてしまいます。</p>\\n<p>そこで下記のように修正したら解消しました。</p>\\n<h3>修正後ソースコード</h3>\\n<pre><code class=\\"hljs\\">&lt;span v-for=\\"(object, index) in objects\\" :key=\\"index\\"&gt;\\n  &lt;input v-model=\\"object.id\\" /&gt;\\n&lt;/span&gt;</code></pre><p><code>v-for</code> で一意を判別する値がまずかったっぽいですね。</p>\\n<p>まぁ、<code>object.id</code>を設定した場合、テキストフィールドにバインドしてあるので衝突が起こる可能性があるので当然と言えば当然ですね笑</p>\\n","preview":"ループ時のキー未設定によるエラーの対処\\n\\n修正前コード\\n\\nエラー内容\\n\\nElements in iteration expect to have \'v-bind:key\' directives.\\n\\nどうやらループ時の一意になるキーを設定しなければならないようなので以下のように修正する。\\n\\n修正後コード\\n\\ndatas","dir":"src/contents/json","base":"2018-07-22_vfor-error.json","ext":".json","sourceBase":"2018-07-22_vfor-error.md","sourceExt":".md"}')},372:function(n){n.exports=JSON.parse('{"title":"Java で文字列を指定の桁数で分割し配列にする方法","description":null,"image":"/images/articles/thumbnails/java.png","category":"プログラミング","tags":["Java"],"created_at":"2018-08-09","updated_at":"2018-08-09","bodyContent":"## はじめに\\n\\nJava の文字列操作と言えば `Apache Commons Lang`の`StringUtils`をよく使いますが、文字列を指定の桁数で分割するメソッドは実装されていないようなので、やり方を書いておきます。\\n\\n## やりたいこと\\n\\n### 分割対象文字列\\n\\n`あいうえおかきくけこ`を指定した桁数で分割する。\\n\\nここでは 3 桁を指定することにします。\\n\\n### 結果\\n\\n`あいう` `えおか` `きくけ` `こ`\\nと要素が 4 つの配列を返却する。\\n\\n## ソースコード\\n\\n### 分割するメソッド\\n\\n```java {data-filename=~xxx.java}\\npublic static List<String> splitByLength(String str, int length) {\\n  List<String> strs = new ArrayList<>();\\n  for (int i = 0; i < StringUtils.length(str); i += length) {\\n    strs.add(StringUtils.substring(str, i, i + length));\\n  }\\n  return strs;\\n}\\n```\\n\\n一部`Apache Commons Lang`の`StringUtils`を使用しているところに注意して下さい。\\n\\n### 呼び出し側\\n\\n```java {data-filename=~xxx.java}\\npublic static void main(String[] args) {\\n  System.out.println(splitByLength(\\"あいうえおかきくけこ\\", 3));\\n}\\n```\\n\\n### コンソール表示内容\\n\\n```bash\\n[あいう, えおか, きくけ, こ]\\n```\\n\\n## おわりに\\n\\n`Apache Commons Lang`の`StringUtils`を使用することで簡単に実装できました。Java 標準の`String#substring`でも実装できますが工夫しないと`IndexOutOfBoundsException`が出るので注意して下さい。\\n\\nまぁそもそも、文字列を指定した桁数で分割するような固定長のデータを扱うシステムは根本的に設計を見直した方がいいと思う。","bodyHtml":"<h2>はじめに</h2>\\n<p>Java の文字列操作と言えば <code>Apache Commons Lang</code>の<code>StringUtils</code>をよく使いますが、文字列を指定の桁数で分割するメソッドは実装されていないようなので、やり方を書いておきます。</p>\\n<h2>やりたいこと</h2>\\n<h3>分割対象文字列</h3>\\n<p><code>あいうえおかきくけこ</code>を指定した桁数で分割する。</p>\\n<p>ここでは 3 桁を指定することにします。</p>\\n<h3>結果</h3>\\n<p><code>あいう</code> <code>えおか</code> <code>きくけ</code> <code>こ</code>\\nと要素が 4 つの配列を返却する。</p>\\n<h2>ソースコード</h2>\\n<h3>分割するメソッド</h3>\\n<pre><code class=\\"hljs\\">public static List&lt;String&gt; splitByLength(String str, int length) {\\n  List&lt;String&gt; strs = new ArrayList&lt;&gt;();\\n  for (int i = 0; i &lt; StringUtils.length(str); i += length) {\\n    strs.add(StringUtils.substring(str, i, i + length));\\n  }\\n  return strs;\\n}</code></pre><p>一部<code>Apache Commons Lang</code>の<code>StringUtils</code>を使用しているところに注意して下さい。</p>\\n<h3>呼び出し側</h3>\\n<pre><code class=\\"hljs\\">public static void main(String[] args) {\\n  System.out.println(splitByLength(\\"あいうえおかきくけこ\\", 3));\\n}</code></pre><h3>コンソール表示内容</h3>\\n<pre><code class=\\"hljs\\">[あいう, えおか, きくけ, こ]</code></pre><h2>おわりに</h2>\\n<p><code>Apache Commons Lang</code>の<code>StringUtils</code>を使用することで簡単に実装できました。Java 標準の<code>String#substring</code>でも実装できますが工夫しないと<code>IndexOutOfBoundsException</code>が出るので注意して下さい。</p>\\n<p>まぁそもそも、文字列を指定した桁数で分割するような固定長のデータを扱うシステムは根本的に設計を見直した方がいいと思う。</p>\\n","preview":"はじめに\\n\\nJava の文字列操作と言えば Apache Commons LangのStringUtilsをよく使いますが、文字列を指定の桁数で分割するメソッドは実装されていないようなので、やり方を書いておきます。\\n\\nやりたいこと\\n\\n分割対象文字列\\n\\nあいうえおかきくけこを指定した桁数で分割する。\\n\\nここでは 3","dir":"src/contents/json","base":"2018-08-09_java-split-length.json","ext":".json","sourceBase":"2018-08-09_java-split-length.md","sourceExt":".md"}')},373:function(n){n.exports=JSON.parse('{"title":"はてなブログのIDを変更するためにやったことまとめ","description":null,"image":"/images/articles/thumbnails/はてなブログ.png","category":"ブログ運営","tags":["はてなブログ"],"created_at":"2018-08-19","updated_at":"2018-08-19","bodyContent":"## はじめに\\n\\nはてなIDは登録すると二度と変更ができないので、変更したい場合は現在のはてなIDを削除して再登録する必要があります。\\n\\nこの記事では、はてなIDを削除・再登録し、ブログを移行するまでの作業を記述しています。\\n\\n## 記事データバックアップ\\n\\n`設定 ＞ 詳細設定 ＞ エクスポート`\\n\\n万が一の時のために念のためバックアップを取っておきます。\\n\\nなお、ここで取得したデータは移行先ブログへのインポート目的ではありません\\n※理由は後述\\n\\n## メールアドレス変更\\n\\n`Myはてな ＞ プロフィール ＞ 設定`\\n\\n新しいはてなIDを登録する際、登録済みのメールアドレスは設定できないため、適当なメールアドレスに変更しておきます。\\n\\n## はてなID登録\\n\\n新しいはてなIDを登録し、ブログを開設します。\\n\\n## 各種設定をコピー\\n\\nコピーした設定項目は以下の通りです。\\n\\n### 設定\\n\\n- 基本設定\\n- 詳細設定\\n- 公開設定\\n\\n### デザイン\\n\\n- 同じデザインテーマをインストール\\n- HTML, CSS\\n- その他設定値\\n\\n### アカウント設定\\n\\n- 基本設定\\n- 外部連携\\n\\n## はてなブログ Pro にアップデート\\n\\n無料のはてなブログだとドメインは\\n\\n- ~ .hatenablog.com\\n- ~ .hateblo.com\\n\\nとかになりますが、同じドメインを設定することができないので、\\nドメインが変わるついでにはてなブログ Pro にしました。\\n\\n## 独自ドメイン取得\\n\\n独自ドメインは、[お名前.com](https://www.onamae.com/)で取りました。\\n\\n参考：https://goo.gl/q4XE2R\\n\\nしかし、すぐにムームードメインで取り直しました。\\n\\n参考：https://goo.gl/KcdoMG\\n\\n色々調べた結果、ムームドメインの方が安く済みそうでしたし、最初に取得したドメインが`.site`だったので、２年目以降の料金が高くついてしまうので変更しました。\\n\\n独自ドメインを取得する際は、初年度の料金だけではなく、次年度の料金も調べてから取得することをオススメ致します。\\n\\n## 旧ブログで使用していた画像のエクスポート\\n\\n僕はブログで使用している画像の管理をはてなフォトライフで行なっていたので、これも移行する必要がありますので、ダウンロードしておきます。\\n\\n１つ１つダウンロードしてもいいですが、量が多いと非常に面倒なのでツールを使用することにしました。\\n\\n参考：https://goo.gl/CdqLAa\\n\\n## 記事の移行\\n\\n記事を１つ１つコピペしていきます。\\n\\nなぜ先程エクスポート（バックアップ）したデータをインポートしないかと言うと、インポートすると記事が **HTML** になってしまうからです。\\n\\n僕は基本的に **Markdown** で書いているため、HTML でインポートされてしまうとリライトするときに大変な思いをします。\\n\\nまた、記事をコピペする際は、内部リンクや画像の URL の設定に注意が必要です。\\n\\n## 外部サービスの設定変更\\n\\n下記サービスの設定を変更しました\\n\\n### Amazon アソシエイト\\n\\n登録サイト URL の追加は問い合わせフォームでしかできないのでちょっと面倒です。\\n\\n参考：https://goo.gl/YaaMJc\\n\\n### 楽天アフィリエイト\\n\\n登録サイト URL を変更するだけなので楽チンです。\\n\\n### ブックマークランキング\\n\\nこちらも登録サイト URL を変更するだけですが、Ping の送信を外部サービスに設定している場合はそちらも変更も必要です。\\n\\n### Google Analytics\\n\\nプロパティを削除して登録し直す\\n\\n### Google Search Console\\n\\n同上\\n\\n### Google Adsense\\n\\nこちらは移行後に新しく登録しました。\\n\\n現在審査中です。\\n\\n## 旧ブログ、旧IDの削除\\n\\n移行漏れがないことを確認し削除します。\\n\\n## 気になった点\\n\\nはてな利用規約に以下の記載があります。\\n\\n> ユーザー名を共有する行為、当社の許諾無く 1 人でメインアカウントを複数保有する行為、当社が許諾する数を超えるサブアカウントを保有する行為\\n> <cite>http://www.hatena.ne.jp/rule/rule</cite>\\n\\n今回はてなIDを変更するにあたって以下の手順を実行しました。\\n\\n`新ID登録　＞　旧ID削除`\\n\\nそうです、短期間ですがメインアカウントを複数登録しているのです。\\n\\n不安になったのではてな運営に問い合わせてみましたところ、以下のような回答がありました。\\n\\n> はてなIDの変更に伴って作成されたアカウントである場合には、目的となる移行などの作業終了後に、不要となったアカウントを退会いただけましたら問題ございません。\\n> <cite>はてなサポート窓口返信メール</cite>\\n\\nひとまず安心しました。\\n\\n## おわりに\\n\\nはてなIDの変更は本当に面倒です。\\n\\nやるならできるだけ早めがよいと思います。\\n\\nそもそも最初の登録の時に慎重に決めていれば、このような事態にならないので、これからはてなブログを始める方はお気をつけくださいませ。（これから始める方がこの記事に来るとは思えないですが...）","bodyHtml":"<h2>はじめに</h2>\\n<p>はてなIDは登録すると二度と変更ができないので、変更したい場合は現在のはてなIDを削除して再登録する必要があります。</p>\\n<p>この記事では、はてなIDを削除・再登録し、ブログを移行するまでの作業を記述しています。</p>\\n<h2>記事データバックアップ</h2>\\n<p><code>設定 ＞ 詳細設定 ＞ エクスポート</code></p>\\n<p>万が一の時のために念のためバックアップを取っておきます。</p>\\n<p>なお、ここで取得したデータは移行先ブログへのインポート目的ではありません\\n※理由は後述</p>\\n<h2>メールアドレス変更</h2>\\n<p><code>Myはてな ＞ プロフィール ＞ 設定</code></p>\\n<p>新しいはてなIDを登録する際、登録済みのメールアドレスは設定できないため、適当なメールアドレスに変更しておきます。</p>\\n<h2>はてなID登録</h2>\\n<p>新しいはてなIDを登録し、ブログを開設します。</p>\\n<h2>各種設定をコピー</h2>\\n<p>コピーした設定項目は以下の通りです。</p>\\n<h3>設定</h3>\\n<ul>\\n<li>基本設定</li>\\n<li>詳細設定</li>\\n<li>公開設定</li>\\n</ul>\\n<h3>デザイン</h3>\\n<ul>\\n<li>同じデザインテーマをインストール</li>\\n<li>HTML, CSS</li>\\n<li>その他設定値</li>\\n</ul>\\n<h3>アカウント設定</h3>\\n<ul>\\n<li>基本設定</li>\\n<li>外部連携</li>\\n</ul>\\n<h2>はてなブログ Pro にアップデート</h2>\\n<p>無料のはてなブログだとドメインは</p>\\n<ul>\\n<li>~ .hatenablog.com</li>\\n<li>~ .hateblo.com</li>\\n</ul>\\n<p>とかになりますが、同じドメインを設定することができないので、\\nドメインが変わるついでにはてなブログ Pro にしました。</p>\\n<h2>独自ドメイン取得</h2>\\n<p>独自ドメインは、<a href=\\"https://www.onamae.com/\\">お名前.com</a>で取りました。</p>\\n<p>参考：https://goo.gl/q4XE2R</p>\\n<p>しかし、すぐにムームードメインで取り直しました。</p>\\n<p>参考：https://goo.gl/KcdoMG</p>\\n<p>色々調べた結果、ムームドメインの方が安く済みそうでしたし、最初に取得したドメインが<code>.site</code>だったので、２年目以降の料金が高くついてしまうので変更しました。</p>\\n<p>独自ドメインを取得する際は、初年度の料金だけではなく、次年度の料金も調べてから取得することをオススメ致します。</p>\\n<h2>旧ブログで使用していた画像のエクスポート</h2>\\n<p>僕はブログで使用している画像の管理をはてなフォトライフで行なっていたので、これも移行する必要がありますので、ダウンロードしておきます。</p>\\n<p>１つ１つダウンロードしてもいいですが、量が多いと非常に面倒なのでツールを使用することにしました。</p>\\n<p>参考：https://goo.gl/CdqLAa</p>\\n<h2>記事の移行</h2>\\n<p>記事を１つ１つコピペしていきます。</p>\\n<p>なぜ先程エクスポート（バックアップ）したデータをインポートしないかと言うと、インポートすると記事が <strong>HTML</strong> になってしまうからです。</p>\\n<p>僕は基本的に <strong>Markdown</strong> で書いているため、HTML でインポートされてしまうとリライトするときに大変な思いをします。</p>\\n<p>また、記事をコピペする際は、内部リンクや画像の URL の設定に注意が必要です。</p>\\n<h2>外部サービスの設定変更</h2>\\n<p>下記サービスの設定を変更しました</p>\\n<h3>Amazon アソシエイト</h3>\\n<p>登録サイト URL の追加は問い合わせフォームでしかできないのでちょっと面倒です。</p>\\n<p>参考：https://goo.gl/YaaMJc</p>\\n<h3>楽天アフィリエイト</h3>\\n<p>登録サイト URL を変更するだけなので楽チンです。</p>\\n<h3>ブックマークランキング</h3>\\n<p>こちらも登録サイト URL を変更するだけですが、Ping の送信を外部サービスに設定している場合はそちらも変更も必要です。</p>\\n<h3>Google Analytics</h3>\\n<p>プロパティを削除して登録し直す</p>\\n<h3>Google Search Console</h3>\\n<p>同上</p>\\n<h3>Google Adsense</h3>\\n<p>こちらは移行後に新しく登録しました。</p>\\n<p>現在審査中です。</p>\\n<h2>旧ブログ、旧IDの削除</h2>\\n<p>移行漏れがないことを確認し削除します。</p>\\n<h2>気になった点</h2>\\n<p>はてな利用規約に以下の記載があります。</p>\\n<blockquote>\\n<p>ユーザー名を共有する行為、当社の許諾無く 1 人でメインアカウントを複数保有する行為、当社が許諾する数を超えるサブアカウントを保有する行為\\n&lt;cite&gt;http://www.hatena.ne.jp/rule/rule&lt;/cite&gt;</p>\\n</blockquote>\\n<p>今回はてなIDを変更するにあたって以下の手順を実行しました。</p>\\n<p><code>新ID登録　＞　旧ID削除</code></p>\\n<p>そうです、短期間ですがメインアカウントを複数登録しているのです。</p>\\n<p>不安になったのではてな運営に問い合わせてみましたところ、以下のような回答がありました。</p>\\n<blockquote>\\n<p>はてなIDの変更に伴って作成されたアカウントである場合には、目的となる移行などの作業終了後に、不要となったアカウントを退会いただけましたら問題ございません。\\n&lt;cite&gt;はてなサポート窓口返信メール&lt;/cite&gt;</p>\\n</blockquote>\\n<p>ひとまず安心しました。</p>\\n<h2>おわりに</h2>\\n<p>はてなIDの変更は本当に面倒です。</p>\\n<p>やるならできるだけ早めがよいと思います。</p>\\n<p>そもそも最初の登録の時に慎重に決めていれば、このような事態にならないので、これからはてなブログを始める方はお気をつけくださいませ。（これから始める方がこの記事に来るとは思えないですが...）</p>\\n","preview":"はじめに\\n\\nはてなIDは登録すると二度と変更ができないので、変更したい場合は現在のはてなIDを削除して再登録する必要があります。\\n\\nこの記事では、はてなIDを削除・再登録し、ブログを移行するまでの作業を記述しています。\\n\\n記事データバックアップ\\n\\n設定 ＞ 詳細設定 ＞","dir":"src/contents/json","base":"2018-08-19_change-hatena-id.json","ext":".json","sourceBase":"2018-08-19_change-hatena-id.md","sourceExt":".md"}')},374:function(n){n.exports=JSON.parse('{"title":"Java で Json のシリアライズ・デシリアライズを柔軟に行う","description":null,"image":"/images/articles/thumbnails/java.png","category":"プログラミング","tags":["Java"],"created_at":"2018-08-21","updated_at":"2018-08-21","bodyContent":"## 前提\\n\\nJson パーサライブラリは **Jackson** を使用しております。\\n\\n## Bean 定義\\n\\n```java {data-filename=Bean.java}\\npublic class Bean {\\n\\n  private int id;\\n\\n  private String name;\\n\\n  public int getId() {\\n    return id;\\n  }\\n\\n  public void setId(int id) {\\n    this.id = id;\\n  }\\n\\n  public String getName() {\\n    return name;\\n  }\\n\\n  public void setName(String name) {\\n    this.name = name;\\n  }\\n\\n  @Override\\n  public String toString() {\\n    StringBuilder builder = new StringBuilder();\\n    builder.append(\\"Bean [id=\\");\\n    builder.append(id);\\n    builder.append(\\", name=\\");\\n    builder.append(name);\\n    builder.append(\\"]\\");\\n    return builder.toString();\\n  }\\n}\\n```\\n\\n## 実行クラス定義\\n\\n```java {data-filename=Test.java}\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\n\\npublic class Test {\\n\\n  public static void main(String[] args) throws Exception {\\n\\n    ObjectMapper om = new ObjectMapper();\\n\\n    Bean bean = new Bean();\\n    bean.setId(1);\\n    bean.setName(\\"太郎\\");\\n\\n    // シリアライズ（オブジェクト → JSON）\\n    String serialized = om.writeValueAsString(bean);\\n    System.out.println(serialized);\\n\\n    String json = \\"{\\\\\\"id\\\\\\":2,\\\\\\"name\\\\\\":\\\\\\"次郎\\\\\\"}\\";\\n\\n    // デシリアライズ（JSON → オブジェクト）\\n    Bean deserialized = om.readValue(json, Bean.class);\\n    System.out.println(deserialized.toString());\\n\\n  }\\n\\n}\\n```\\n\\n## 実行結果（デフォルトの状態）\\n\\n```bash\\n{\\"id\\":1,\\"name\\":\\"太郎\\"}\\nBean [id=2, name=次郎]\\n```\\n\\n## Bean 修正（READ_ONLY）\\n\\n```java {data-filename=Bean.java}\\n  @JsonProperty(access = Access.READ_ONLY)\\n  private String name;\\n```\\n\\n`name`プロパティにアノテーションを追加している。\\n\\n## 実行結果（READ_ONLY）\\n\\n```bash\\n{\\"id\\":1,\\"name\\":\\"太郎\\"}\\nBean [id=2, name=null]\\n```\\n\\n`name`プロパティは**シリアライズ時**のみ反映されている。\\n\\n## Bean 修正（WRITE_ONLY）\\n\\n```java {data-filename=Bean.java}\\n  @JsonProperty(access = Access.WRITE_ONLY)\\n  private String name;\\n```\\n\\n`name`プロパティにアノテーションを修正している。\\n\\n## 実行結果（WRITE_ONLY）\\n\\n```bash\\n{\\"id\\":1}\\nBean [id=2, name=次郎]\\n```\\n\\n`name`プロパティは**デシリアライズ時**のみ反映されている。\\n\\n## まとめ\\n\\nプロパティに`@JsonProperty`を指定することによって、シリアライズのみ行うのか、デシリアライズのみ行うのかを柔軟に行うことが可能になります。\\n\\nそれにしても、`@JsonProperty`が`READ_ONLY`の時は`ObjectMapper#writeValueAsString`することができて、`@JsonProperty`が`WRITE_ONLY`の時は`ObjectMapper#readValue`することができるので、ちょっと違和感がありますね。\\n\\nまぁ、Bean 等のオブジェクトのプロパティにつけるアノテーションなので、オブジェクト目線なのでしょうね。","bodyHtml":"<h2>前提</h2>\\n<p>Json パーサライブラリは <strong>Jackson</strong> を使用しております。</p>\\n<h2>Bean 定義</h2>\\n<pre><code class=\\"hljs\\">public class Bean {\\n\\n  private int id;\\n\\n  private String name;\\n\\n  public int getId() {\\n    return id;\\n  }\\n\\n  public void setId(int id) {\\n    this.id = id;\\n  }\\n\\n  public String getName() {\\n    return name;\\n  }\\n\\n  public void setName(String name) {\\n    this.name = name;\\n  }\\n\\n  @Override\\n  public String toString() {\\n    StringBuilder builder = new StringBuilder();\\n    builder.append(\\"Bean [id=\\");\\n    builder.append(id);\\n    builder.append(\\", name=\\");\\n    builder.append(name);\\n    builder.append(\\"]\\");\\n    return builder.toString();\\n  }\\n}</code></pre><h2>実行クラス定義</h2>\\n<pre><code class=\\"hljs\\">import com.fasterxml.jackson.databind.ObjectMapper;\\n\\npublic class Test {\\n\\n  public static void main(String[] args) throws Exception {\\n\\n    ObjectMapper om = new ObjectMapper();\\n\\n    Bean bean = new Bean();\\n    bean.setId(1);\\n    bean.setName(\\"太郎\\");\\n\\n    // シリアライズ（オブジェクト → JSON）\\n    String serialized = om.writeValueAsString(bean);\\n    System.out.println(serialized);\\n\\n    String json = \\"{\\\\\\"id\\\\\\":2,\\\\\\"name\\\\\\":\\\\\\"次郎\\\\\\"}\\";\\n\\n    // デシリアライズ（JSON → オブジェクト）\\n    Bean deserialized = om.readValue(json, Bean.class);\\n    System.out.println(deserialized.toString());\\n\\n  }\\n\\n}</code></pre><h2>実行結果（デフォルトの状態）</h2>\\n<pre><code class=\\"hljs\\">{<span class=\\"hljs-string\\">\\"id\\"</span>:1,<span class=\\"hljs-string\\">\\"name\\"</span>:<span class=\\"hljs-string\\">\\"太郎\\"</span>}\\nBean [id=2, name=次郎]</code></pre><h2>Bean 修正（READ_ONLY）</h2>\\n<pre><code class=\\"hljs\\">@JsonProperty(access = Access.READ_ONLY)\\n  private String name;</code></pre><p><code>name</code>プロパティにアノテーションを追加している。</p>\\n<h2>実行結果（READ_ONLY）</h2>\\n<pre><code class=\\"hljs\\">{<span class=\\"hljs-string\\">\\"id\\"</span>:1,<span class=\\"hljs-string\\">\\"name\\"</span>:<span class=\\"hljs-string\\">\\"太郎\\"</span>}\\nBean [id=2, name=null]</code></pre><p><code>name</code>プロパティは<strong>シリアライズ時</strong>のみ反映されている。</p>\\n<h2>Bean 修正（WRITE_ONLY）</h2>\\n<pre><code class=\\"hljs\\">@JsonProperty(access = Access.WRITE_ONLY)\\n  private String name;</code></pre><p><code>name</code>プロパティにアノテーションを修正している。</p>\\n<h2>実行結果（WRITE_ONLY）</h2>\\n<pre><code class=\\"hljs\\">{<span class=\\"hljs-string\\">\\"id\\"</span>:1}\\nBean [id=2, name=次郎]</code></pre><p><code>name</code>プロパティは<strong>デシリアライズ時</strong>のみ反映されている。</p>\\n<h2>まとめ</h2>\\n<p>プロパティに<code>@JsonProperty</code>を指定することによって、シリアライズのみ行うのか、デシリアライズのみ行うのかを柔軟に行うことが可能になります。</p>\\n<p>それにしても、<code>@JsonProperty</code>が<code>READ_ONLY</code>の時は<code>ObjectMapper#writeValueAsString</code>することができて、<code>@JsonProperty</code>が<code>WRITE_ONLY</code>の時は<code>ObjectMapper#readValue</code>することができるので、ちょっと違和感がありますね。</p>\\n<p>まぁ、Bean 等のオブジェクトのプロパティにつけるアノテーションなので、オブジェクト目線なのでしょうね。</p>\\n","preview":"前提\\n\\nJson パーサライブラリは Jackson を使用しております。\\n\\nBean 定義\\n\\npublic class Bean {\\n\\n  private int id;\\n\\n  private String name;\\n\\n  public int getId() {\\n    return id;\\n  }","dir":"src/contents/json","base":"2018-08-21_json-serialize-deserialize.json","ext":".json","sourceBase":"2018-08-21_json-serialize-deserialize.md","sourceExt":".md"}')},375:function(n){n.exports=JSON.parse('{"title":"MapUtils の使い方 (Apache Commons Collections)","description":null,"image":"/images/articles/thumbnails/java.png","category":"プログラミング","tags":["Java"],"created_at":"2018-08-27","updated_at":"2018-08-27","bodyContent":"## はじめに\\n\\nJava の Map 操作を Null セーフで行いたい場合、Apache Commons Collections の MapUtils を使うと良いです。\\n\\n### Map インスタンス\\n\\n```java {data-filename=xxx.java}\\n// 要素あり\\nMap<String, Object> map = new HashMap<>();\\nmap.put(\\"str\\", \\"あいう\\");\\nmap.put(\\"int\\", 123);\\nmap.put(\\"bool\\", true);\\n\\n// 空\\nMap<String, Object> emptyMap = new HashMap<>();\\n```\\n\\n### isEmpty\\n\\n```java {data-filename=xxx.java}\\nMapUtils.isEmpty(map);      // false\\nMapUtils.isEmpty(emptyMap); // true\\nMapUtils.isEmpty(null);     // true\\n```\\n\\n### isNotEmpty\\n\\n```java {data-filename=xxx.java}\\nMapUtils.isNotEmpty(map);       // true\\nMapUtils.isNotEmpty(emptyMap);  // false\\nMapUtils.isNotEmpty(null);      // false\\n```\\n\\n### getString\\n\\n```java {data-filename=xxx.java}\\nMapUtils.getString(map, \\"str\\");         // あいう\\nMapUtils.getString(emptyMap, \\"str\\");    // null\\nMapUtils.getString(null, \\"str\\");        // null\\nMapUtils.getString(map, \\"int\\");         // 123\\n```\\n\\n`int`を取得しようとすると自動的に`String`にキャストされます。\\n\\n### getString（デフォルト有り）\\n\\n```java {data-filename=xxx.java}\\nMapUtils.getString(map, \\"str\\", \\"default\\");      // あいう\\nMapUtils.getString(emptyMap, \\"str\\", \\"default\\"); // default\\nMapUtils.getString(null, \\"str\\", \\"default\\");     // default\\nMapUtils.getString(map, \\"int\\", \\"default\\");      // 123\\n```\\n\\n`null`の場合、デフォルトに設定した値（3 番目の引数）が返却される。\\n\\n### getInteger\\n\\n```java {data-filename=xxx.java}\\nMapUtils.getInteger(map, \\"int\\");        // 123\\nMapUtils.getInteger(emptyMap, \\"int\\");   // null\\nMapUtils.getInteger(null, \\"int\\");       // null\\nMapUtils.getInteger(map, \\"str\\");        // null\\n```\\n\\n`String`を取得しようとすると`int`へのキャストができず`null`が返却されます。（4 つ目）\\n\\nちなみにキー`str`に数値文字列が入っている場合は`int`にキャストされます。\\n\\n### getInteger（デフォルト有り）\\n\\n```java {data-filename=xxx.java}\\nMapUtils.getInteger(map, \\"int\\", 999);        // 123\\nMapUtils.getInteger(emptyMap, \\"int\\", 999);   // 999\\nMapUtils.getInteger(null, \\"int\\", 999);       // 999\\nMapUtils.getInteger(map, \\"str\\", 999);        // 999\\n```\\n\\n`null`の場合、デフォルトに設定した値（3 番目の引数）が返却される。\\n\\n### getBoolean\\n\\n```java {data-filename=xxx.java}\\nMapUtils.getBoolean(map, \\"bool\\");       // true\\nMapUtils.getBoolean(emptyMap, \\"bool\\");  // null\\nMapUtils.getBoolean(null, \\"bool\\");      // null\\nMapUtils.getBoolean(map, \\"str\\");        // false\\nMapUtils.getBoolean(map, \\"int\\");        // true\\n```\\n\\n`String`を取得した場合`false`になります。\\n\\n`int`を取得した場合、取得した数値によって結果が変わります。\\n\\n- 0 以外　 → 　`true`\\n- 0 　 → 　`false`\\n\\n### getBoolean（デフォルト有り）\\n\\n```java {data-filename=xxx.java}\\nMapUtils.getBoolean(map, \\"bool\\", true);       // true\\nMapUtils.getBoolean(emptyMap, \\"bool\\", true);  // true\\nMapUtils.getBoolean(null, \\"bool\\", true);      // true\\nMapUtils.getBoolean(map, \\"str\\", true);        // false\\nMapUtils.getBoolean(map, \\"int\\", true);        // true\\n```\\n\\n`null`の場合、デフォルトに設定した値（3 番目の引数）が返却される。","bodyHtml":"<h2>はじめに</h2>\\n<p>Java の Map 操作を Null セーフで行いたい場合、Apache Commons Collections の MapUtils を使うと良いです。</p>\\n<h3>Map インスタンス</h3>\\n<pre><code class=\\"hljs\\">// 要素あり\\nMap&lt;String, Object&gt; map = new HashMap&lt;&gt;();\\nmap.put(\\"str\\", \\"あいう\\");\\nmap.put(\\"int\\", 123);\\nmap.put(\\"bool\\", true);\\n\\n// 空\\nMap&lt;String, Object&gt; emptyMap = new HashMap&lt;&gt;();</code></pre><h3>isEmpty</h3>\\n<pre><code class=\\"hljs\\">MapUtils.isEmpty(map);      // false\\nMapUtils.isEmpty(emptyMap); // true\\nMapUtils.isEmpty(null);     // true</code></pre><h3>isNotEmpty</h3>\\n<pre><code class=\\"hljs\\">MapUtils.isNotEmpty(map);       // true\\nMapUtils.isNotEmpty(emptyMap);  // false\\nMapUtils.isNotEmpty(null);      // false</code></pre><h3>getString</h3>\\n<pre><code class=\\"hljs\\">MapUtils.getString(map, \\"str\\");         // あいう\\nMapUtils.getString(emptyMap, \\"str\\");    // null\\nMapUtils.getString(null, \\"str\\");        // null\\nMapUtils.getString(map, \\"int\\");         // 123</code></pre><p><code>int</code>を取得しようとすると自動的に<code>String</code>にキャストされます。</p>\\n<h3>getString（デフォルト有り）</h3>\\n<pre><code class=\\"hljs\\">MapUtils.getString(map, \\"str\\", \\"default\\");      // あいう\\nMapUtils.getString(emptyMap, \\"str\\", \\"default\\"); // default\\nMapUtils.getString(null, \\"str\\", \\"default\\");     // default\\nMapUtils.getString(map, \\"int\\", \\"default\\");      // 123</code></pre><p><code>null</code>の場合、デフォルトに設定した値（3 番目の引数）が返却される。</p>\\n<h3>getInteger</h3>\\n<pre><code class=\\"hljs\\">MapUtils.getInteger(map, \\"int\\");        // 123\\nMapUtils.getInteger(emptyMap, \\"int\\");   // null\\nMapUtils.getInteger(null, \\"int\\");       // null\\nMapUtils.getInteger(map, \\"str\\");        // null</code></pre><p><code>String</code>を取得しようとすると<code>int</code>へのキャストができず<code>null</code>が返却されます。（4 つ目）</p>\\n<p>ちなみにキー<code>str</code>に数値文字列が入っている場合は<code>int</code>にキャストされます。</p>\\n<h3>getInteger（デフォルト有り）</h3>\\n<pre><code class=\\"hljs\\">MapUtils.getInteger(map, \\"int\\", 999);        // 123\\nMapUtils.getInteger(emptyMap, \\"int\\", 999);   // 999\\nMapUtils.getInteger(null, \\"int\\", 999);       // 999\\nMapUtils.getInteger(map, \\"str\\", 999);        // 999</code></pre><p><code>null</code>の場合、デフォルトに設定した値（3 番目の引数）が返却される。</p>\\n<h3>getBoolean</h3>\\n<pre><code class=\\"hljs\\">MapUtils.getBoolean(map, \\"bool\\");       // true\\nMapUtils.getBoolean(emptyMap, \\"bool\\");  // null\\nMapUtils.getBoolean(null, \\"bool\\");      // null\\nMapUtils.getBoolean(map, \\"str\\");        // false\\nMapUtils.getBoolean(map, \\"int\\");        // true</code></pre><p><code>String</code>を取得した場合<code>false</code>になります。</p>\\n<p><code>int</code>を取得した場合、取得した数値によって結果が変わります。</p>\\n<ul>\\n<li>0 以外　 → 　<code>true</code></li>\\n<li>0 　 → 　<code>false</code></li>\\n</ul>\\n<h3>getBoolean（デフォルト有り）</h3>\\n<pre><code class=\\"hljs\\">MapUtils.getBoolean(map, \\"bool\\", true);       // true\\nMapUtils.getBoolean(emptyMap, \\"bool\\", true);  // true\\nMapUtils.getBoolean(null, \\"bool\\", true);      // true\\nMapUtils.getBoolean(map, \\"str\\", true);        // false\\nMapUtils.getBoolean(map, \\"int\\", true);        // true</code></pre><p><code>null</code>の場合、デフォルトに設定した値（3 番目の引数）が返却される。</p>\\n","preview":"はじめに\\n\\nJava の Map 操作を Null セーフで行いたい場合、Apache Commons Collections の MapUtils を使うと良いです。\\n\\nMap インスタンス\\n\\n// 要素あり\\nMap map = new HashMap();\\nmap.put(\\"str\\",","dir":"src/contents/json","base":"2018-08-27_maputils-usage.json","ext":".json","sourceBase":"2018-08-27_maputils-usage.md","sourceExt":".md"}')},376:function(n){n.exports=JSON.parse('{"title":"Vue.js でログイン機能を実装する","description":null,"image":"/images/articles/thumbnails/vue.png","category":"プログラミング","tags":["Vue.js"],"created_at":"2018-11-03","updated_at":"2018-11-03","bodyContent":"## 前提\\n\\nこの記事は`@vue/cli`を使用した内容となっております。\\n\\n## バージョン\\n\\n```js\\n\\"vue\\": \\"^2.5.17\\",\\n\\"vue-router\\": \\"^3.0.1\\",\\n\\"vuex\\": \\"^3.0.1\\"\\n```\\n\\n## ページ構成\\n\\n- ホーム\\n- プロフィール\\n- ログイン\\n\\nこのうち、プロフィールはログイン認証が必要なページとします。\\n\\n### ソースファイル\\n\\n上記ページ構成のファイルをそれぞれ用意します。\\n\\n- src/views/Home.vue\\n- src/views/Profile.vue\\n- src/views/Login.vue\\n\\n※上 2 つの中身は適当で大丈夫です。ログインページは後述します。\\n\\n## ルーター設定\\n\\n`src/router.js`を編集します。\\n\\n```js {data-filename=src/router.js}\\nimport Vue from \'vue\'\\nimport Router from \'vue-router\'\\nimport Home from \'./views/Home.vue\'\\nimport store from \'./store\' // (1)\\n\\nVue.use(Router)\\n\\nconst router = new Router({\\n  routes: [\\n    {\\n      path: \'/\',\\n      component: Home\\n    },\\n    {\\n      path: \'/profile\',\\n      component: () => import(\'./views/Profile.vue\'),\\n      meta: { requiresAuth: true } // (2)\\n    },\\n    {\\n      path: \'/login\',\\n      component: () => import(\'./views/Login.vue\')\\n    }\\n  ]\\n})\\n\\n// (3)\\nrouter.beforeEach((to, from, next) => {\\n  if (to.matched.some((record) => record.meta.requiresAuth)) {\\n    if (!store.getters.loggedIn) {\\n      next({\\n        path: \'/login\',\\n        query: {\\n          redirect: to.fullPath,\\n          message: true\\n        }\\n      })\\n    } else {\\n      next()\\n    }\\n  } else {\\n    next()\\n  }\\n})\\n\\nexport default router\\n```\\n\\n(1) ログイン情報を参照するため`store`をインポートしておきます。\\n\\n(2) プロフィールページはログイン認証が必要なため、`meta: { requiresAuth: true }`を追加しておきます。\\n\\nここでの`requiresAuth`は適宜変更して大丈夫です。\\n\\n(3) ページ遷移した際に、ログインしていない状態かつログイン認証が必要な場合は、ログインページに遷移するようにしています。\\n\\nログインページに遷移させる際、`redirect: to.fullPath`を与えて、ログイン完了後にもともと遷移しようとしていたページにリダイレクトできるようにしております。\\n\\n`message: true`に関しては、強制的にログインページに飛ばされた時用にメッセージを表示させるフラグになります。\\n\\n## ストア設定\\n\\n`src/store.js`を編集します。\\n\\n```js {data-filename=src/store.js}\\nimport Vue from \'vue\'\\nimport Vuex from \'vuex\'\\n\\nVue.use(Vuex)\\n\\nexport default new Vuex.Store({\\n  state: {\\n    userId: \'\'\\n  },\\n  getters: {\\n    loggedIn: (state) => {\\n      return Boolean(state.userId.trim())\\n    }\\n  },\\n  mutations: {\\n    setUserId(state, userId) {\\n      state.userId = userId\\n    }\\n  },\\n  actions: {}\\n})\\n```\\n\\nログインした際のユーザ ID を保持しておくようにしています。\\n\\n`getters`の`loggedIn`では、`userId`に何らかの値がセットされている場合に`true`を返すようにしています。\\n\\n## ルートページの設定\\n\\n`src/App.vue`を編集します。\\n\\n```html {data-filename=src/App.vue}\\n<template>\\n  <div id=\\"app\\">\\n    <div id=\\"nav\\">\\n      <router-link to=\\"/\\">Home</router-link> |\\n      <router-link to=\\"/profile\\">Profile</router-link> |\\n      <a @click=\\"logout()\\" v-if=\\"$store.getters.loggedIn\\">Logout</a>\\n      \x3c!-- (1) --\x3e\\n      <router-link\\n        :to=\\"\'/login?redirect=\' + $route.fullPath\\"\\n        v-else-if=\\"$route.path !== \'/login\'\\"\\n        >Login</router-link\\n      >\\n      \x3c!-- (2) --\x3e\\n    </div>\\n    <div v-if=\\"$route.query.message\\">ログイン認証が必要なページです。</div>\\n    \x3c!-- (3) --\x3e\\n    <router-view />\\n  </div>\\n</template>\\n```\\n\\n(1) ログアウト処理をするためのリンクです。\\n\\nログインしている状態の時にだけ表示するようにしています。\\n\\n(2) ログインページに遷移するためのリンクです。\\n\\n遷移先のパラメータに`redirect`を含めることで、ログイン処理後に元いたページにリダイレクトさせることができるようになります。\\n\\nまた、ログインしていない状態かつログインページ以外で表示するようにしています。\\n\\n(3) 強制的にログインページに飛ばされた際に表示させるメッセージです。\\n\\n```js {data-filename=src/App.vue}\\n<script>\\nexport default {\\n  methods: {\\n    logout () {\\n      this.$store.commit(\'setUserId\', \'\')\\n      if (this.$route.meta.requiresAuth) {\\n        this.$router.push({\\n          path: \'/login\',\\n          query: { redirect: this.$route.fullPath }\\n        })\\n      }\\n    }\\n  }\\n}\\n<\/script>\\n```\\n\\nストアで保持しているユーザ ID を空にします。\\n\\nまた、ログインが必要なページでログアウトした際、強制的にログインページに飛ばすようにしています。\\n\\nこの時もやはりリダイレクトで戻って来られるようにパラメータを渡しています。\\n\\n## ログインページの設定\\n\\n```html {data-filename=src/views/Login.vue}\\n<template>\\n  <div class=\\"about\\">\\n    <h1>This is an login page</h1>\\n    <input v-model=\\"userId\\" />\\n    <button @click=\\"login()\\" :disabled=\\"!userId\\">ログイン</button>\\n  </div>\\n</template>\\n```\\n\\nユーザ ID 入力欄とログインボタンを設置しています。\\n\\nログインボタンは、ユーザ ID が未入力の場合は非活性にしています。\\n\\n```js {data-filename=src/views/Login.vue}\\n<script>\\nexport default {\\n  data () {\\n    return {\\n      userId: \'\'\\n    }\\n  },\\n  methods: {\\n    login () {\\n      this.$store.commit(\'setUserId\', this.userId) // (1)\\n      this.$router.push(this.$route.query.redirect) // (2)\\n    }\\n  }\\n}\\n<\/script>\\n```\\n\\n(1) 入力したユーザ ID でストアを更新しています。\\n\\n(2) 元いたページにリダイレクトさせます。\\n\\n## 参考\\n\\nhttps://router.vuejs.org/ja/guide/advanced/meta.html","bodyHtml":"<h2>前提</h2>\\n<p>この記事は<code>@vue/cli</code>を使用した内容となっております。</p>\\n<h2>バージョン</h2>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-string\\">\\"vue\\"</span>: <span class=\\"hljs-string\\">\\"^2.5.17\\"</span>,\\n<span class=\\"hljs-string\\">\\"vue-router\\"</span>: <span class=\\"hljs-string\\">\\"^3.0.1\\"</span>,\\n<span class=\\"hljs-string\\">\\"vuex\\"</span>: <span class=\\"hljs-string\\">\\"^3.0.1\\"</span></code></pre><h2>ページ構成</h2>\\n<ul>\\n<li>ホーム</li>\\n<li>プロフィール</li>\\n<li>ログイン</li>\\n</ul>\\n<p>このうち、プロフィールはログイン認証が必要なページとします。</p>\\n<h3>ソースファイル</h3>\\n<p>上記ページ構成のファイルをそれぞれ用意します。</p>\\n<ul>\\n<li>src/views/Home.vue</li>\\n<li>src/views/Profile.vue</li>\\n<li>src/views/Login.vue</li>\\n</ul>\\n<p>※上 2 つの中身は適当で大丈夫です。ログインページは後述します。</p>\\n<h2>ルーター設定</h2>\\n<p><code>src/router.js</code>を編集します。</p>\\n<pre><code class=\\"hljs\\">import Vue from \'vue\'\\nimport Router from \'vue-router\'\\nimport Home from \'./views/Home.vue\'\\nimport store from \'./store\' // (1)\\n\\nVue.use(Router)\\n\\nconst router = new Router({\\n  routes: [\\n    {\\n      path: \'/\',\\n      component: Home\\n    },\\n    {\\n      path: \'/profile\',\\n      component: () =&gt; import(\'./views/Profile.vue\'),\\n      meta: { requiresAuth: true } // (2)\\n    },\\n    {\\n      path: \'/login\',\\n      component: () =&gt; import(\'./views/Login.vue\')\\n    }\\n  ]\\n})\\n\\n// (3)\\nrouter.beforeEach((to, from, next) =&gt; {\\n  if (to.matched.some((record) =&gt; record.meta.requiresAuth)) {\\n    if (!store.getters.loggedIn) {\\n      next({\\n        path: \'/login\',\\n        query: {\\n          redirect: to.fullPath,\\n          message: true\\n        }\\n      })\\n    } else {\\n      next()\\n    }\\n  } else {\\n    next()\\n  }\\n})\\n\\nexport default router</code></pre><p>(1) ログイン情報を参照するため<code>store</code>をインポートしておきます。</p>\\n<p>(2) プロフィールページはログイン認証が必要なため、<code>meta: { requiresAuth: true }</code>を追加しておきます。</p>\\n<p>ここでの<code>requiresAuth</code>は適宜変更して大丈夫です。</p>\\n<p>(3) ページ遷移した際に、ログインしていない状態かつログイン認証が必要な場合は、ログインページに遷移するようにしています。</p>\\n<p>ログインページに遷移させる際、<code>redirect: to.fullPath</code>を与えて、ログイン完了後にもともと遷移しようとしていたページにリダイレクトできるようにしております。</p>\\n<p><code>message: true</code>に関しては、強制的にログインページに飛ばされた時用にメッセージを表示させるフラグになります。</p>\\n<h2>ストア設定</h2>\\n<p><code>src/store.js</code>を編集します。</p>\\n<pre><code class=\\"hljs\\">import Vue from \'vue\'\\nimport Vuex from \'vuex\'\\n\\nVue.use(Vuex)\\n\\nexport default new Vuex.Store({\\n  state: {\\n    userId: \'\'\\n  },\\n  getters: {\\n    loggedIn: (state) =&gt; {\\n      return Boolean(state.userId.trim())\\n    }\\n  },\\n  mutations: {\\n    setUserId(state, userId) {\\n      state.userId = userId\\n    }\\n  },\\n  actions: {}\\n})</code></pre><p>ログインした際のユーザ ID を保持しておくようにしています。</p>\\n<p><code>getters</code>の<code>loggedIn</code>では、<code>userId</code>に何らかの値がセットされている場合に<code>true</code>を返すようにしています。</p>\\n<h2>ルートページの設定</h2>\\n<p><code>src/App.vue</code>を編集します。</p>\\n<pre><code class=\\"hljs\\">&lt;template&gt;\\n  &lt;div id=\\"app\\"&gt;\\n    &lt;div id=\\"nav\\"&gt;\\n      &lt;router-link to=\\"/\\"&gt;Home&lt;/router-link&gt; |\\n      &lt;router-link to=\\"/profile\\"&gt;Profile&lt;/router-link&gt; |\\n      &lt;a @click=\\"logout()\\" v-if=\\"$store.getters.loggedIn\\"&gt;Logout&lt;/a&gt;\\n      &lt;!-- (1) --&gt;\\n      &lt;router-link\\n        :to=\\"\'/login?redirect=\' + $route.fullPath\\"\\n        v-else-if=\\"$route.path !== \'/login\'\\"\\n        &gt;Login&lt;/router-link\\n      &gt;\\n      &lt;!-- (2) --&gt;\\n    &lt;/div&gt;\\n    &lt;div v-if=\\"$route.query.message\\"&gt;ログイン認証が必要なページです。&lt;/div&gt;\\n    &lt;!-- (3) --&gt;\\n    &lt;router-view /&gt;\\n  &lt;/div&gt;\\n&lt;/template&gt;</code></pre><p>(1) ログアウト処理をするためのリンクです。</p>\\n<p>ログインしている状態の時にだけ表示するようにしています。</p>\\n<p>(2) ログインページに遷移するためのリンクです。</p>\\n<p>遷移先のパラメータに<code>redirect</code>を含めることで、ログイン処理後に元いたページにリダイレクトさせることができるようになります。</p>\\n<p>また、ログインしていない状態かつログインページ以外で表示するようにしています。</p>\\n<p>(3) 強制的にログインページに飛ばされた際に表示させるメッセージです。</p>\\n<pre><code class=\\"hljs\\">&lt;script&gt;\\nexport default {\\n  methods: {\\n    logout () {\\n      this.$store.commit(\'setUserId\', \'\')\\n      if (this.$route.meta.requiresAuth) {\\n        this.$router.push({\\n          path: \'/login\',\\n          query: { redirect: this.$route.fullPath }\\n        })\\n      }\\n    }\\n  }\\n}\\n&lt;/script&gt;</code></pre><p>ストアで保持しているユーザ ID を空にします。</p>\\n<p>また、ログインが必要なページでログアウトした際、強制的にログインページに飛ばすようにしています。</p>\\n<p>この時もやはりリダイレクトで戻って来られるようにパラメータを渡しています。</p>\\n<h2>ログインページの設定</h2>\\n<pre><code class=\\"hljs\\">&lt;template&gt;\\n  &lt;div class=\\"about\\"&gt;\\n    &lt;h1&gt;This is an login page&lt;/h1&gt;\\n    &lt;input v-model=\\"userId\\" /&gt;\\n    &lt;button @click=\\"login()\\" :disabled=\\"!userId\\"&gt;ログイン&lt;/button&gt;\\n  &lt;/div&gt;\\n&lt;/template&gt;</code></pre><p>ユーザ ID 入力欄とログインボタンを設置しています。</p>\\n<p>ログインボタンは、ユーザ ID が未入力の場合は非活性にしています。</p>\\n<pre><code class=\\"hljs\\">&lt;script&gt;\\nexport default {\\n  data () {\\n    return {\\n      userId: \'\'\\n    }\\n  },\\n  methods: {\\n    login () {\\n      this.$store.commit(\'setUserId\', this.userId) // (1)\\n      this.$router.push(this.$route.query.redirect) // (2)\\n    }\\n  }\\n}\\n&lt;/script&gt;</code></pre><p>(1) 入力したユーザ ID でストアを更新しています。</p>\\n<p>(2) 元いたページにリダイレクトさせます。</p>\\n<h2>参考</h2>\\n<p>https://router.vuejs.org/ja/guide/advanced/meta.html</p>\\n","preview":"前提\\n\\nこの記事は@vue/cliを使用した内容となっております。\\n\\nバージョン\\n\\n\\"vue\\": \\"^2.5.17\\",\\n\\"vue-router\\": \\"^3.0.1\\",\\n\\"vuex\\":","dir":"src/contents/json","base":"2018-11-03_vue-login.json","ext":".json","sourceBase":"2018-11-03_vue-login.md","sourceExt":".md"}')},377:function(n){n.exports=JSON.parse('{"title":"Heroku の Spring Boot アプリでテーブル接続を行う","description":null,"image":"/images/articles/thumbnails/java.png","category":"プログラミング","tags":["Java","Heroku"],"created_at":"2018-11-10","updated_at":"2018-11-10","bodyContent":"## 環境\\n\\n```bash\\nmacOS Mojave 10.14.1\\nEclipse (Pleiades) Oxygen.3a Release (4.7.3a)\\n```\\n\\n## 使用するもの\\n\\n- Heroku\\n- Spring Boot\\n- PostgreSQL\\n- Gradle\\n- Lombok\\n\\n## 事前準備\\n\\nあらかじめ Java 8 をインストールしておいてください。\\n\\n## Heroku 登録および設定\\n\\n### 登録\\n\\n[こちら](https://signup.heroku.com/login)から登録をします。\\n\\n### CLI インストール\\n\\n```bash\\n$ brew install heroku/brew/heroku\\n```\\n\\nHomebrew がない場合は[こちら](https://devcenter.heroku.com/articles/getting-started-with-java#set-up)からダウンロードしてインストールします。\\n\\n## PostgreSQL インストール\\n\\n[こちら](https://postgresapp.com/)を参照し、①〜③ を実施します。\\n\\n### データ作成\\n\\n上記 ① で起動した PostgreSQL アプリから使用するデータベースをダブルクリックし、ターミナルを立ち上げます。\\n\\nあらかじめ以下のようにテーブルを作成しておきます。\\n\\n```bash\\n# select * from sample;\\n id | name\\n----+------\\n  1 | hoge\\n  2 | fuga\\n  3 | piyo\\n(3 rows)\\n```\\n\\n## Spring Boot アプリケーション作成\\n\\n作成方法は下記記事を参考にして頂ければ。\\n\\n### 依存追加\\n\\n`build.gradle`の`dependencies`に追加します。\\n\\n```groovy {data-filename=build.gradle}\\ndependencies {\\n  compile(\'org.springframework.boot:spring-boot-starter-data-jpa\')\\n  compile(\'org.springframework.boot:spring-boot-devtools\')\\n  compileOnly(\'org.projectlombok:lombok\')\\n  runtime(\'org.postgresql:postgresql\')\\n  implementation(\'org.springframework.boot:spring-boot-starter-web\')\\n  testImplementation(\'org.springframework.boot:spring-boot-starter-test\')\\n}\\n```\\n\\n`org.springframework.boot:spring-boot-devtools`はホットデプロイするために使用。\\n\\n### データベース接続設定\\n\\n`src/main/resources/application.properties`を作成します。\\n\\n```properties {data-filename=src/main/resources/application.properties}\\nspring.datasource.url=${DATABASE_URL}\\nspring.datasource.driverClassName=org.postgresql.Driver\\n```\\n\\n`${DATABASE_URL}`については環境変数から取得するようにしています。\\n\\nこうすることで、Heroku にデプロイした時は Heroku 上のデータベースに接続することができるようになります。\\n\\n#### Mac での環境変数の設定\\n\\n[こちら](https://qiita.com/hoisjp/items/19374252db8e748c3407)のサイトを参考にさせていただきました。\\n\\n`setenv.DATABASE_URL.plist`\\n\\n```xml {data-filename=setenv.DATABASE_URL.plist}\\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<!DOCTYPE plist PUBLIC \\"-//Apple//DTD PLIST 1.0//EN\\" \\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\">\\n  <plist version=\\"1.0\\">\\n  <dict>\\n  <key>Label</key>\\n  <string>setenv.DATABASE_URL</string>\\n  <key>ProgramArguments</key>\\n  <array>\\n    <string>/bin/launchctl</string>\\n    <string>setenv</string>\\n    <string>DATABASE_URL</string>\\n    <string>jdbc:postgresql://localhost:5432/{データベース名}</string>\\n  </array>\\n  <key>RunAtLoad</key>\\n  <true/>\\n  <key>ServiceIPC</key>\\n  <false/>\\n</dict>\\n</plist>\\n```\\n\\n### ソースファイル作成\\n\\n#### Entity\\n\\n```java {data-filename=Sample.java}\\npackage com.example.sample.domain;\\n\\nimport javax.persistence.Entity;\\nimport javax.persistence.GeneratedValue;\\nimport javax.persistence.GenerationType;\\nimport javax.persistence.Id;\\n\\nimport lombok.Getter;\\nimport lombok.Setter;\\nimport lombok.ToString;\\n\\n@Entity\\n@Getter\\n@Setter\\n@ToString\\npublic class Sample {\\n\\n  @Id\\n  @GeneratedValue(strategy=GenerationType.IDENTITY)\\n  private Integer id;\\n\\n  private String name;\\n\\n}\\n```\\n\\nLombok を使用して Getter, Setter を省略しています。\\n\\n#### DAO\\n\\n```java {data-filename=SampleRepository.java}\\npackage com.example.sample.domain;\\n\\nimport org.springframework.data.jpa.repository.JpaRepository;\\n\\npublic interface SampleRepository  extends JpaRepository<Sample, Integer>{\\n\\n}\\n```\\n\\n#### Service\\n\\n```java {data-filename=SampleService.java}\\npackage com.example.sample.service;\\n\\nimport java.util.List;\\n\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.transaction.annotation.Transactional;\\n\\nimport com.example.sample.domain.Sample;\\nimport com.example.sample.domain.SampleRepository;\\n\\n@Service\\n@Transactional\\npublic class SampleService {\\n\\n  @Autowired\\n  SampleRepository sampleRepository;\\n\\n  public List<Sample> selectAll() {\\n    return sampleRepository.findAll();\\n  }\\n\\n}\\n```\\n\\n#### Controller\\n\\n```java {data-filename=SampleController.java}\\npackage com.example.sample.web;\\n\\nimport java.util.List;\\n\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.web.bind.annotation.RequestMapping;\\nimport org.springframework.web.bind.annotation.RequestMethod;\\nimport org.springframework.web.bind.annotation.RestController;\\n\\nimport com.example.sample.domain.Sample;\\nimport com.example.sample.service.SampleService;\\n\\n@RestController\\n@RequestMapping(\\"sample\\")\\npublic class SampleController {\\n\\n    @Autowired\\n    SampleService sampleService;\\n\\n    @RequestMapping(value = \\"\\", method = RequestMethod.GET)\\n    public String hello() {\\n        return \\"Hello world.\\";\\n    }\\n\\n    @RequestMapping(value = \\"select-all\\", method = RequestMethod.GET)\\n    public List<Sample> selectAll() {\\n        return sampleService.selectAll();\\n    }\\n}\\n```\\n\\n#### 注意点\\n\\n注意点として、パッケージ構成を上記の通りにしないと`@Autowired`でインジェクションができません。\\n（アノテーションを別途定義すればできないことはない）\\n\\n[こちら](https://qiita.com/ewai/items/f375d562744502d79790)のサイトを参考にさせて頂きました。\\n\\n### lombok インストール方法\\n\\n少しハマったので書いておきます。\\n\\n`build.gradle`に依存を入れただけだと適切に動かないので、以下の手順を実行します。\\n\\n- Eclipse のアプリのパッケージ内を表示します。\\n- `Contents/MacOS`に`lombok.jar`を入れます。※ ファイル名注意\\n- `Contents/Eclipse/eclipse.ini`に２行追記\\n\\n```ini {data-filename=Contents/Eclipse/eclipse.ini}\\n-Xbootclasspath/a:lombok.jar\\n-javaagent:lombok.jar\\n```\\n\\n## ローカルで起動確認\\n\\nEclipse でプロジェクト名のコンテキストメニューを開き、Spring Boot アプリケーションで実行します。\\n\\nこの時、以下のようなエラーが出る場合があると思います。\\n\\n```bash\\nCaused by: java.sql.SQLFeatureNotSupportedException: org.postgresql.jdbc.PgConnection.createClob() メソッドはまだ実装されていません。\\n```\\n\\nこの場合、`src/main/resources/hibernate.properties`を作成します。\\n\\n```properties {data-filename=src/main/resources/hibernate.properties}\\nhibernate.jdbc.lob.non_contextual_creation=true\\n```\\n\\n### 画面確認\\n\\nhttp://localhost:8080/sample/select-all\\n\\nURL にアクセスし、 sample テーブルにインサートした内容が JSON で表示されていれば OK です。\\n\\n## Heroku 側の起動確認\\n\\n以下、ターミナルでの作業です。\\n\\n### Git コミット\\n\\n```bash\\ngit init\\ngit add .\\ngit commit -m \\"commit message\\"\\n```\\n\\n### Heroku にデプロイ\\n\\n```bash\\nheroku login\\nheroku create\\ngit push heroku master\\nheroku open\\n```\\n\\nこの状態で、`ドメイン/sample`にアクセスすると`Hello world.`が表示されます。\\n\\n### Heroku の DB 設定\\n\\nPostgreSQL のアドオンを追加\\n\\n```bash\\nheroku addons:create heroku-postgresql\\n```\\n\\nHeroku の PostgreSQL に接続\\n\\n```bash\\nheroku pg:psql\\n```\\n\\nローカルのテーブルと同様に作成します。\\n\\nこの状態で、`ドメイン/sample/select-all`にアクセスするとテーブルの内容が JSON で表示されます。\\n\\n### ２回目以降のデプロイ\\n\\n```bash\\ngit add .\\ngit commit -m \\"commit message\\"\\ngit push heroku master\\nheroku open\\n```","bodyHtml":"<h2>環境</h2>\\n<pre><code class=\\"hljs\\">macOS Mojave 10.14.1\\nEclipse (Pleiades) Oxygen.3a Release (4.7.3a)</code></pre><h2>使用するもの</h2>\\n<ul>\\n<li>Heroku</li>\\n<li>Spring Boot</li>\\n<li>PostgreSQL</li>\\n<li>Gradle</li>\\n<li>Lombok</li>\\n</ul>\\n<h2>事前準備</h2>\\n<p>あらかじめ Java 8 をインストールしておいてください。</p>\\n<h2>Heroku 登録および設定</h2>\\n<h3>登録</h3>\\n<p><a href=\\"https://signup.heroku.com/login\\">こちら</a>から登録をします。</p>\\n<h3>CLI インストール</h3>\\n<pre><code class=\\"hljs\\">$ brew install heroku/brew/heroku</code></pre><p>Homebrew がない場合は<a href=\\"https://devcenter.heroku.com/articles/getting-started-with-java#set-up\\">こちら</a>からダウンロードしてインストールします。</p>\\n<h2>PostgreSQL インストール</h2>\\n<p><a href=\\"https://postgresapp.com/\\">こちら</a>を参照し、①〜③ を実施します。</p>\\n<h3>データ作成</h3>\\n<p>上記 ① で起動した PostgreSQL アプリから使用するデータベースをダブルクリックし、ターミナルを立ち上げます。</p>\\n<p>あらかじめ以下のようにテーブルを作成しておきます。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-comment\\"># select * from sample;</span>\\n id | name\\n----+------\\n  1 | hoge\\n  2 | fuga\\n  3 | piyo\\n(3 rows)</code></pre><h2>Spring Boot アプリケーション作成</h2>\\n<p>作成方法は下記記事を参考にして頂ければ。</p>\\n<h3>依存追加</h3>\\n<p><code>build.gradle</code>の<code>dependencies</code>に追加します。</p>\\n<pre><code class=\\"hljs\\">dependencies {\\n  compile(\'org.springframework.boot:spring-boot-starter-data-jpa\')\\n  compile(\'org.springframework.boot:spring-boot-devtools\')\\n  compileOnly(\'org.projectlombok:lombok\')\\n  runtime(\'org.postgresql:postgresql\')\\n  implementation(\'org.springframework.boot:spring-boot-starter-web\')\\n  testImplementation(\'org.springframework.boot:spring-boot-starter-test\')\\n}</code></pre><p><code>org.springframework.boot:spring-boot-devtools</code>はホットデプロイするために使用。</p>\\n<h3>データベース接続設定</h3>\\n<p><code>src/main/resources/application.properties</code>を作成します。</p>\\n<pre><code class=\\"hljs\\">spring.datasource.url=${DATABASE_URL}\\nspring.datasource.driverClassName=org.postgresql.Driver</code></pre><p><code>${DATABASE_URL}</code>については環境変数から取得するようにしています。</p>\\n<p>こうすることで、Heroku にデプロイした時は Heroku 上のデータベースに接続することができるようになります。</p>\\n<h4>Mac での環境変数の設定</h4>\\n<p><a href=\\"https://qiita.com/hoisjp/items/19374252db8e748c3407\\">こちら</a>のサイトを参考にさせていただきました。</p>\\n<p><code>setenv.DATABASE_URL.plist</code></p>\\n<pre><code class=\\"hljs\\">&lt;?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?&gt;\\n&lt;!DOCTYPE plist PUBLIC \\"-//Apple//DTD PLIST 1.0//EN\\" \\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\"&gt;\\n  &lt;plist version=\\"1.0\\"&gt;\\n  &lt;dict&gt;\\n  &lt;key&gt;Label&lt;/key&gt;\\n  &lt;string&gt;setenv.DATABASE_URL&lt;/string&gt;\\n  &lt;key&gt;ProgramArguments&lt;/key&gt;\\n  &lt;array&gt;\\n    &lt;string&gt;/bin/launchctl&lt;/string&gt;\\n    &lt;string&gt;setenv&lt;/string&gt;\\n    &lt;string&gt;DATABASE_URL&lt;/string&gt;\\n    &lt;string&gt;jdbc:postgresql://localhost:5432/{データベース名}&lt;/string&gt;\\n  &lt;/array&gt;\\n  &lt;key&gt;RunAtLoad&lt;/key&gt;\\n  &lt;true/&gt;\\n  &lt;key&gt;ServiceIPC&lt;/key&gt;\\n  &lt;false/&gt;\\n&lt;/dict&gt;\\n&lt;/plist&gt;</code></pre><h3>ソースファイル作成</h3>\\n<h4>Entity</h4>\\n<pre><code class=\\"hljs\\">package com.example.sample.domain;\\n\\nimport javax.persistence.Entity;\\nimport javax.persistence.GeneratedValue;\\nimport javax.persistence.GenerationType;\\nimport javax.persistence.Id;\\n\\nimport lombok.Getter;\\nimport lombok.Setter;\\nimport lombok.ToString;\\n\\n@Entity\\n@Getter\\n@Setter\\n@ToString\\npublic class Sample {\\n\\n  @Id\\n  @GeneratedValue(strategy=GenerationType.IDENTITY)\\n  private Integer id;\\n\\n  private String name;\\n\\n}</code></pre><p>Lombok を使用して Getter, Setter を省略しています。</p>\\n<h4>DAO</h4>\\n<pre><code class=\\"hljs\\">package com.example.sample.domain;\\n\\nimport org.springframework.data.jpa.repository.JpaRepository;\\n\\npublic interface SampleRepository  extends JpaRepository&lt;Sample, Integer&gt;{\\n\\n}</code></pre><h4>Service</h4>\\n<pre><code class=\\"hljs\\">package com.example.sample.service;\\n\\nimport java.util.List;\\n\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.transaction.annotation.Transactional;\\n\\nimport com.example.sample.domain.Sample;\\nimport com.example.sample.domain.SampleRepository;\\n\\n@Service\\n@Transactional\\npublic class SampleService {\\n\\n  @Autowired\\n  SampleRepository sampleRepository;\\n\\n  public List&lt;Sample&gt; selectAll() {\\n    return sampleRepository.findAll();\\n  }\\n\\n}</code></pre><h4>Controller</h4>\\n<pre><code class=\\"hljs\\">package com.example.sample.web;\\n\\nimport java.util.List;\\n\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.web.bind.annotation.RequestMapping;\\nimport org.springframework.web.bind.annotation.RequestMethod;\\nimport org.springframework.web.bind.annotation.RestController;\\n\\nimport com.example.sample.domain.Sample;\\nimport com.example.sample.service.SampleService;\\n\\n@RestController\\n@RequestMapping(\\"sample\\")\\npublic class SampleController {\\n\\n    @Autowired\\n    SampleService sampleService;\\n\\n    @RequestMapping(value = \\"\\", method = RequestMethod.GET)\\n    public String hello() {\\n        return \\"Hello world.\\";\\n    }\\n\\n    @RequestMapping(value = \\"select-all\\", method = RequestMethod.GET)\\n    public List&lt;Sample&gt; selectAll() {\\n        return sampleService.selectAll();\\n    }\\n}</code></pre><h4>注意点</h4>\\n<p>注意点として、パッケージ構成を上記の通りにしないと<code>@Autowired</code>でインジェクションができません。\\n（アノテーションを別途定義すればできないことはない）</p>\\n<p><a href=\\"https://qiita.com/ewai/items/f375d562744502d79790\\">こちら</a>のサイトを参考にさせて頂きました。</p>\\n<h3>lombok インストール方法</h3>\\n<p>少しハマったので書いておきます。</p>\\n<p><code>build.gradle</code>に依存を入れただけだと適切に動かないので、以下の手順を実行します。</p>\\n<ul>\\n<li>Eclipse のアプリのパッケージ内を表示します。</li>\\n<li><code>Contents/MacOS</code>に<code>lombok.jar</code>を入れます。※ ファイル名注意</li>\\n<li><code>Contents/Eclipse/eclipse.ini</code>に２行追記</li>\\n</ul>\\n<pre><code class=\\"hljs\\">-Xbootclasspath/a:lombok.jar\\n-javaagent:lombok.jar</code></pre><h2>ローカルで起動確認</h2>\\n<p>Eclipse でプロジェクト名のコンテキストメニューを開き、Spring Boot アプリケーションで実行します。</p>\\n<p>この時、以下のようなエラーが出る場合があると思います。</p>\\n<pre><code class=\\"hljs\\">Caused by: java.sql.SQLFeatureNotSupportedException: org.postgresql.jdbc.PgConnection.createClob() メソッドはまだ実装されていません。</code></pre><p>この場合、<code>src/main/resources/hibernate.properties</code>を作成します。</p>\\n<pre><code class=\\"hljs\\">hibernate.jdbc.lob.non_contextual_creation=true</code></pre><h3>画面確認</h3>\\n<p>http://localhost:8080/sample/select-all</p>\\n<p>URL にアクセスし、 sample テーブルにインサートした内容が JSON で表示されていれば OK です。</p>\\n<h2>Heroku 側の起動確認</h2>\\n<p>以下、ターミナルでの作業です。</p>\\n<h3>Git コミット</h3>\\n<pre><code class=\\"hljs\\">git init\\ngit add .\\ngit commit -m <span class=\\"hljs-string\\">\\"commit message\\"</span></code></pre><h3>Heroku にデプロイ</h3>\\n<pre><code class=\\"hljs\\">heroku login\\nheroku create\\ngit push heroku master\\nheroku open</code></pre><p>この状態で、<code>ドメイン/sample</code>にアクセスすると<code>Hello world.</code>が表示されます。</p>\\n<h3>Heroku の DB 設定</h3>\\n<p>PostgreSQL のアドオンを追加</p>\\n<pre><code class=\\"hljs\\">heroku addons:create heroku-postgresql</code></pre><p>Heroku の PostgreSQL に接続</p>\\n<pre><code class=\\"hljs\\">heroku pg:psql</code></pre><p>ローカルのテーブルと同様に作成します。</p>\\n<p>この状態で、<code>ドメイン/sample/select-all</code>にアクセスするとテーブルの内容が JSON で表示されます。</p>\\n<h3>２回目以降のデプロイ</h3>\\n<pre><code class=\\"hljs\\">git add .\\ngit commit -m <span class=\\"hljs-string\\">\\"commit message\\"</span>\\ngit push heroku master\\nheroku open</code></pre>","preview":"環境\\n\\nmacOS Mojave 10.14.1\\nEclipse (Pleiades) Oxygen.3a Release (4.7.3a)\\n\\n使用するもの\\n\\nHeroku\\nSpring Boot\\nPostgreSQL\\nGradle\\nLombok\\n\\n事前準備\\n\\nあらかじめ Java 8","dir":"src/contents/json","base":"2018-11-10_heroku-springboot-table.json","ext":".json","sourceBase":"2018-11-10_heroku-springboot-table.md","sourceExt":".md"}')},378:function(n){n.exports=JSON.parse('{"title":"Vue.js で Firebase を利用するときに警告が出た場合の対処法","description":null,"image":"/images/articles/thumbnails/vue.png","category":"プログラミング","tags":["Vue.js","Firebase"],"created_at":"2018-12-05","updated_at":"2018-12-05","bodyContent":"## 警告が出る場合\\n\\n```js {data-filename=xxx.js}\\nimport firebase from \'firebase\'\\n```\\n\\nこのように`import`すると下記のような警告が出力されます。\\n\\n```bash\\nIt looks like you\'re using the development build of the Firebase JS SDK.\\nWhen deploying Firebase apps to production, it is advisable to only import\\nthe individual SDK components you intend to use.\\n\\nFor the module builds, these are available in the following manner\\n(replace <PACKAGE> with the name of a component - i.e. auth, database, etc):\\n\\nCommonJS Modules:\\nconst firebase = require(\'firebase/app\');\\nrequire(\'firebase/<PACKAGE>\');\\n\\nES Modules:\\nimport firebase from \'firebase/app\';\\nimport \'firebase/<PACKAGE>\';\\n\\nTypescript:\\nimport * as firebase from \'firebase/app\';\\nimport \'firebase/<PACKAGE>\';\\n```\\n\\n## 対処法\\n\\n```js {data-filename=xxx.js}\\nimport firebase from \'firebase/app\'\\nimport \'firebase/auth\'\\nimport \'firebase/database\'\\nimport \'firebase/firestore\'\\n```\\n\\n警告に書いてある通り、`import firebase from \\"firebase\\"`を`import firebase from \\"firebase/app\\"`にし、使用したいアプリを更に`import`することで警告を消すことができました。\\n\\n上記は、`Authentication`, `Realtime Database`, `Cloud Firestore`を使用する場合です。","bodyHtml":"<h2>警告が出る場合</h2>\\n<pre><code class=\\"hljs\\">import firebase from \'firebase\'</code></pre><p>このように<code>import</code>すると下記のような警告が出力されます。</p>\\n<pre><code class=\\"hljs\\">It looks like you<span class=\\"hljs-string\\">\'re using the development build of the Firebase JS SDK.\\nWhen deploying Firebase apps to production, it is advisable to only import\\nthe individual SDK components you intend to use.\\n\\nFor the module builds, these are available in the following manner\\n(replace &lt;PACKAGE&gt; with the name of a component - i.e. auth, database, etc):\\n\\nCommonJS Modules:\\nconst firebase = require(\'</span>firebase/app<span class=\\"hljs-string\\">\');\\nrequire(\'</span>firebase/&lt;PACKAGE&gt;<span class=\\"hljs-string\\">\');\\n\\nES Modules:\\nimport firebase from \'</span>firebase/app<span class=\\"hljs-string\\">\';\\nimport \'</span>firebase/&lt;PACKAGE&gt;<span class=\\"hljs-string\\">\';\\n\\nTypescript:\\nimport * as firebase from \'</span>firebase/app<span class=\\"hljs-string\\">\';\\nimport \'</span>firebase/&lt;PACKAGE&gt;<span class=\\"hljs-string\\">\';</span></code></pre><h2>対処法</h2>\\n<pre><code class=\\"hljs\\">import firebase from \'firebase/app\'\\nimport \'firebase/auth\'\\nimport \'firebase/database\'\\nimport \'firebase/firestore\'</code></pre><p>警告に書いてある通り、<code>import firebase from &quot;firebase&quot;</code>を<code>import firebase from &quot;firebase/app&quot;</code>にし、使用したいアプリを更に<code>import</code>することで警告を消すことができました。</p>\\n<p>上記は、<code>Authentication</code>, <code>Realtime Database</code>, <code>Cloud Firestore</code>を使用する場合です。</p>\\n","preview":"警告が出る場合\\n\\nimport firebase from \'firebase\'\\n\\nこのようにimportすると下記のような警告が出力されます。\\n\\nIt looks like you\'re using the development build of the Firebase JS SDK.\\nWhen","dir":"src/contents/json","base":"2018-12-05_vue-firebase-warning.json","ext":".json","sourceBase":"2018-12-05_vue-firebase-warning.md","sourceExt":".md"}')},379:function(n){n.exports=JSON.parse('{"title":"Firebase の匿名アカウントを認証済みアカウントにリンクさせる","description":null,"image":"/images/articles/thumbnails/firebase.png","category":"プログラミング","tags":["Firebase","Javascript"],"created_at":"2019-02-04","updated_at":"2019-02-04","bodyContent":"## はじめに\\n\\nFirebase で匿名認証を使用すると、ユーザは何の情報も入力せずに Firebase のセキュリティルールに制御されているデータにアクセスできるようになるので、導入することでサービスの利用者が増えるのではないかと思いました。\\n\\nhttps://firebase.google.com/docs/auth/web/anonymous-auth\\n\\n上記の公式ドキュメントを読みつつ、実装してみたのですが、「匿名アカウントを永久アカウントに変換する」部分で躓いたので、記事を残しておこうと思います。\\n\\n## 匿名認証によるログイン処理の実装\\n\\n```js {data-filename=xxx.js}\\nfirebase\\n  .auth()\\n  .signInAnonymously()\\n  .then(() => {\\n    console.log(\'success\')\\n  })\\n```\\n\\nこの処理を実行することで、匿名アカウントとして Firebase Authentication に登録されます。\\n\\nなお、匿名アカウントの状態でログアウト処理をしてしまうと、二度とそのアカウントにアクセスできないっぽいです。\\n\\n## 認証済みアカウントにリンクさせる処理の実装\\n\\n```js {data-filename=xxx.js}\\n// Twitter の例\\nconst provider = new firebase.auth.TwitterAuthProvider()\\nfirebase\\n  .auth()\\n  .currentUser.linkWithPopup(provider)\\n  .then(\\n    () => {\\n      console.log(\'success\')\\n    },\\n    (error) => {\\n      console.log(`failure: ${error}`)\\n    }\\n  )\\n```\\n\\n公式ドキュメントのやり方とちょっと違います。\\n\\n匿名アカウントでログインしている状態で、`firebase.auth().currentUser.linkWithPopup(provider)`を実行することで、そのアカウントが`provider`のサービスにリンクされるようになります。\\n\\nちなみに、現在ログイン中のアカウントが匿名アカウントかどうかを判定する場合の処理は以下です。\\n\\n```js {data-filename=xxx.js}\\nfirebase.auth().currentUser.isAnonymous\\n```\\n\\n## おわりに\\n\\n公式ドキュメントの方法がよくわからなかったので、わかる方がいらっしゃいましたら、教えていただけると幸いです。\\n\\nまた、上記処理を実装したサービスは以下になります。","bodyHtml":"<h2>はじめに</h2>\\n<p>Firebase で匿名認証を使用すると、ユーザは何の情報も入力せずに Firebase のセキュリティルールに制御されているデータにアクセスできるようになるので、導入することでサービスの利用者が増えるのではないかと思いました。</p>\\n<p>https://firebase.google.com/docs/auth/web/anonymous-auth</p>\\n<p>上記の公式ドキュメントを読みつつ、実装してみたのですが、「匿名アカウントを永久アカウントに変換する」部分で躓いたので、記事を残しておこうと思います。</p>\\n<h2>匿名認証によるログイン処理の実装</h2>\\n<pre><code class=\\"hljs\\">firebase\\n  .auth()\\n  .signInAnonymously()\\n  .then(() =&gt; {\\n    console.log(\'success\')\\n  })</code></pre><p>この処理を実行することで、匿名アカウントとして Firebase Authentication に登録されます。</p>\\n<p>なお、匿名アカウントの状態でログアウト処理をしてしまうと、二度とそのアカウントにアクセスできないっぽいです。</p>\\n<h2>認証済みアカウントにリンクさせる処理の実装</h2>\\n<pre><code class=\\"hljs\\">// Twitter の例\\nconst provider = new firebase.auth.TwitterAuthProvider()\\nfirebase\\n  .auth()\\n  .currentUser.linkWithPopup(provider)\\n  .then(\\n    () =&gt; {\\n      console.log(\'success\')\\n    },\\n    (error) =&gt; {\\n      console.log(`failure: ${error}`)\\n    }\\n  )</code></pre><p>公式ドキュメントのやり方とちょっと違います。</p>\\n<p>匿名アカウントでログインしている状態で、<code>firebase.auth().currentUser.linkWithPopup(provider)</code>を実行することで、そのアカウントが<code>provider</code>のサービスにリンクされるようになります。</p>\\n<p>ちなみに、現在ログイン中のアカウントが匿名アカウントかどうかを判定する場合の処理は以下です。</p>\\n<pre><code class=\\"hljs\\">firebase.auth().currentUser.isAnonymous</code></pre><h2>おわりに</h2>\\n<p>公式ドキュメントの方法がよくわからなかったので、わかる方がいらっしゃいましたら、教えていただけると幸いです。</p>\\n<p>また、上記処理を実装したサービスは以下になります。</p>\\n","preview":"はじめに\\n\\nFirebase で匿名認証を使用すると、ユーザは何の情報も入力せずに Firebase","dir":"src/contents/json","base":"2019-02-04_firebase-anonymous-authenticated-link.json","ext":".json","sourceBase":"2019-02-04_firebase-anonymous-authenticated-link.md","sourceExt":".md"}')},380:function(n){n.exports=JSON.parse('{"title":"Nuxt.js × VeeValidate でカスタムルールを作成する","description":null,"image":"/images/articles/thumbnails/nuxt.png","category":"プログラミング","tags":["Nuxt.js","VeeValidate"],"created_at":"2019-05-20","updated_at":"2019-05-20","bodyContent":"少々はまったので書いておきます。\\n\\n前提として、プラグインとして VeeValidate を読み込む場合です。\\n\\n## カスタムルール作成\\n\\n`plugins/vee-validate.js`\\n\\n### 引数なしの場合\\n\\n```js {data-filename=xxx.js}\\nimport Vue from \'vue\'\\nimport VeeValidate, { Validator } from \'vee-validate\'\\nimport ja from \'vee-validate/dist/locale/ja\'\\n\\nVue.use(VeeValidate)\\nValidator.localize(\'ja\', ja)\\n\\n/*\\n ** カスタムルール\\n */\\nValidator.extend(\'hoge\', {\\n  getMessage: (field) => `${field}がエラーです`,\\n  validate: (value) => value === \'hoge\'\\n})\\n```\\n\\n### 引数ありの場合\\n\\n```js {data-filename=xxx.js}\\nimport Vue from \'vue\'\\nimport VeeValidate, { Validator } from \'vee-validate\'\\nimport ja from \'vee-validate/dist/locale/ja\'\\n\\nVue.use(VeeValidate)\\nValidator.localize(\'ja\', ja)\\n\\n/*\\n ** カスタムルール\\n */\\nValidator.extend(\'max_array\', {\\n  getMessage: (field, length) => `${field}は${length}個以内にしてください`,\\n  validate: (value, length) => value.length <= length\\n})\\n```\\n\\n## 呼び出し方\\n\\n`.vue ファイル内のテンプレート`\\n\\n```html {data-filename=xxx.vue}\\n\x3c!-- 引数なし --\x3e\\nv-validate=\\"{ hoge: true }\\"\\n\\n\x3c!-- 引数あり --\x3e\\nv-validate=\\"{ max_array: 10}\\"\\n```","bodyHtml":"<p>少々はまったので書いておきます。</p>\\n<p>前提として、プラグインとして VeeValidate を読み込む場合です。</p>\\n<h2>カスタムルール作成</h2>\\n<p><code>plugins/vee-validate.js</code></p>\\n<h3>引数なしの場合</h3>\\n<pre><code class=\\"hljs\\">import Vue from \'vue\'\\nimport VeeValidate, { Validator } from \'vee-validate\'\\nimport ja from \'vee-validate/dist/locale/ja\'\\n\\nVue.use(VeeValidate)\\nValidator.localize(\'ja\', ja)\\n\\n/*\\n ** カスタムルール\\n */\\nValidator.extend(\'hoge\', {\\n  getMessage: (field) =&gt; `${field}がエラーです`,\\n  validate: (value) =&gt; value === \'hoge\'\\n})</code></pre><h3>引数ありの場合</h3>\\n<pre><code class=\\"hljs\\">import Vue from \'vue\'\\nimport VeeValidate, { Validator } from \'vee-validate\'\\nimport ja from \'vee-validate/dist/locale/ja\'\\n\\nVue.use(VeeValidate)\\nValidator.localize(\'ja\', ja)\\n\\n/*\\n ** カスタムルール\\n */\\nValidator.extend(\'max_array\', {\\n  getMessage: (field, length) =&gt; `${field}は${length}個以内にしてください`,\\n  validate: (value, length) =&gt; value.length &lt;= length\\n})</code></pre><h2>呼び出し方</h2>\\n<p><code>.vue ファイル内のテンプレート</code></p>\\n<pre><code class=\\"hljs\\">&lt;!-- 引数なし --&gt;\\nv-validate=\\"{ hoge: true }\\"\\n\\n&lt;!-- 引数あり --&gt;\\nv-validate=\\"{ max_array: 10}\\"</code></pre>","preview":"少々はまったので書いておきます。\\n\\n前提として、プラグインとして VeeValidate を読み込む場合です。\\n\\nカスタムルール作成\\n\\nplugins/vee-validate.js\\n\\n引数なしの場合\\n\\nimport Vue from \'vue\'\\nimport VeeValidate, { Validator }","dir":"src/contents/json","base":"2019-05-20_nuxt-veevalidate-custom.json","ext":".json","sourceBase":"2019-05-20_nuxt-veevalidate-custom.md","sourceExt":".md"}')},381:function(n){n.exports=JSON.parse('{"title":"Nuxt.js でログイン機能を実装する","description":null,"image":"/images/articles/thumbnails/nuxt.png","category":"プログラミング","tags":["Nuxt.js"],"created_at":"2019-05-30","updated_at":"2019-05-30","bodyContent":"## Nuxt をインストールする\\n\\nhttps://ja.nuxtjs.org/guide/installation\\n\\n```bash\\n$ npx create-nuxt-app <project-name>\\n```\\n\\n### いくつかの質問に対する設定値\\n\\n状況に応じて選択してください。\\n\\n以下、筆者が普段選択するものを記載します。\\n\\n#### サーバーサイドのフレームワーク\\n\\nNone\\n\\n#### UI フレームワーク\\n\\nVuetfy\\n\\n※このページでは Vuetfy を使用して進めていきます。\\n\\n#### テスティングフレームワーク\\n\\nNone\\n\\n#### Nuxt のモード\\n\\n- 簡単なアプリの場合`SPA`\\n- ちょっと凝ったアプリの場合`Universal`\\n\\n※あとからでも変更できます\\n\\n#### axios\\n\\n筆者は firebase が好きなのでをサーバーサイドの実装はあまりしないので追加しません。\\n\\nサーバーサイドを自前で用意する場合や、外部サービスと連携させる場合は追加します。\\n\\n#### EsLint\\n\\n追加する\\n\\n#### Prettier\\n\\n追加する\\n\\n### 起動してみる\\n\\n```bash\\n$ npm run dev\\n```\\n\\nhttp://localhost:3000\\n\\nにアクセスし、画面が表示されれば OK です。\\n\\n## 画面を作成する\\n\\nまずはじめに画面構成をお伝えしておきます。\\n\\n### 画面構成\\n\\n- ホーム画面（ログインを行う）\\n- 認証が必要な画面\\n- 認証が不要な画面\\n\\nログインしていない状態で認証が必要な画面にアクセスするとホーム画面に飛ばされます。\\n\\n### 認証が必要な画面を作成する\\n\\n```html {data-filename=pages/authentication-required.vue}\\n<template>\\n  <div>\\n    認証が必要な画面です。\\n  </div>\\n</template>\\n```\\n\\nひとまず、テンプレート部分だけ作成します。\\n\\n見ての通り、文字を表示させているだけです。\\n\\n後ほどスクリプトも記述します。\\n\\n### 認証が不要な画面を作成する\\n\\n```html {data-filename=pages/authentication-not-required.vue}\\n<template>\\n  <div>\\n    認証が不要な画面です。\\n  </div>\\n</template>\\n```\\n\\nこちらも文字を表示させているだけです。\\n\\nスクリプトは特に記述しないので、これで完成です。\\n\\n### デフォルトのレイアウトを変更する\\n\\n```html {data-filename=layouts/default.vue}\\n<template>\\n  <v-app dark>\\n    <v-tabs fixed-tabs hide-slider>\\n      <v-tab to=\\"/\\">\\n        ホーム\\n      </v-tab>\\n      <v-tab to=\\"/authentication-not-required\\">\\n        認証不要\\n      </v-tab>\\n      <v-tab to=\\"/authentication-required\\">\\n        認証必要\\n      </v-tab>\\n    </v-tabs>\\n\\n    <v-content>\\n      <v-container>\\n        <nuxt />\\n      </v-container>\\n    </v-content>\\n  </v-app>\\n</template>\\n```\\n\\n上部にツールバーを表示させ、ホーム画面／認証が不要な画面／認証が必要な画面に遷移できるようにしています。\\n\\n下半分の`<nuxt />`の部分はそれぞれのページを表示する領域になります。\\n\\n### ここまでの画面確認\\n\\nhttp://localhost:3000\\n\\nにアクセスすると、インストール直後に起動した画面の上部にツールバーが追加されていると思います。\\n\\nツールバーをクリックした際、該当のページに遷移されるようになっていれば OK です。\\n\\n### ストアを作成する\\n\\nログイン状態を保持させるためにストア（Vuex）を作成します。\\n\\n```js {data-filename=store/index.js}\\nexport const state = () => ({\\n  loggedIn: false\\n})\\n\\nexport const mutations = {\\n  login(state) {\\n    state.loggedIn = true\\n  },\\n  logout(state) {\\n    state.loggedIn = false\\n  }\\n}\\n```\\n\\nstate にログイン状態をブール値で保持させ、\\n\\nmutations にログイン時、ログアウト時に使用するファンクションを定義します。\\n\\n※ストアの javascript ファイルを新規追加した場合は、ローカルサーバーを再起動させてください。（最近のバージョンではストアファイルの追加もウォッチするようになったようです）\\n\\n### ミドルウェアを作成する\\n\\nログインしていない状態で、認証が必要な画面に遷移した場合、ホーム画面に強制的に飛ばすために必要になります。\\n\\n```js {data-filename=middleware/authenticated.js}\\nexport default ({ store, redirect, route }) => {\\n  // ログインしていない場合ホームにリダイレクトします。\\n  if (!store.state.loggedIn) {\\n    return redirect({\\n      path: \'/\',\\n      query: {\\n        showMessage: true,\\n        redirect: route.path\\n      }\\n    })\\n  }\\n}\\n```\\n\\n強制的にホーム画面に飛ばされた後にログイン処理をした場合、もともと表示していた画面に戻すために、クエリに`redurect`を設定しています。\\n\\nまた、警告メッセージを出したいので、`showMessage`を設定しています。\\n\\n### 認証が必要な画面を修正する\\n\\nミドルウェアを作成しただけの状態では、ログインしていなくても認証が必要な画面に行けてしまうので、修正を行います。\\n\\n上の方に書かれていますが、ここでスクリプトを追加します。\\n\\n```js {data-filename=pages/authentication-required.vue}\\n<script>\\nexport default {\\n  middleware: \'authenticated\'\\n}\\n<\/script>\\n```\\n\\nミドルウェア`authenticated`を使いますよー。と宣言しています。\\n\\nこうすることで、ログインしていない状態でこのページに行こうとすると強制的にホーム画面に飛ばされるようになります。\\n\\n### ホーム画面（ログインする画面）を作成する\\n\\n最後にログイン機能を持たせたホーム画面を作成します。\\n\\n```html {data-filename=pages/index.vue}\\n<template>\\n  <v-layout column>\\n    <template v-if=\\"$store.state.loggedIn\\">\\n      <v-flex>\\n        <v-btn color=\\"primary\\" @click=\\"logout()\\">\\n          logout\\n        </v-btn>\\n      </v-flex>\\n    </template>\\n\\n    <template v-else>\\n      <v-flex>\\n        <v-alert\\n          :value=\\"$route.query.showMessage\\"\\n          color=\\"warning\\"\\n          icon=\\"priority_high\\"\\n          outline\\n        >\\n          ログイン認証してください。\\n        </v-alert>\\n      </v-flex>\\n\\n      <v-flex>\\n        <v-btn color=\\"primary\\" @click=\\"login()\\">\\n          login\\n        </v-btn>\\n      </v-flex>\\n    </template>\\n  </v-layout>\\n</template>\\n```\\n\\nログイン状態によって、ログイン／ログアウトボタンを表示させ、認証が必要な画面から強制的に飛ばされた場合は、アラートメッセージを出すようにしています。\\n\\n```js {data-filename=pages/index.vue}\\n<script>\\nexport default {\\n  methods: {\\n    login() {\\n      this.$store.commit(\'login\')\\n\\n      // URL のクエリにリダイレクトが存在する場合はリダイレクトします。\\n      if (this.$route.query.redirect) {\\n        this.$router.push(this.$route.query.redirect)\\n      }\\n    },\\n\\n    logout() {\\n      this.$store.commit(\'logout\')\\n    }\\n  }\\n}\\n<\/script>\\n```\\n\\nログイン／ログアウトボタンを押した際、ストアにログイン状態を反映させています。\\n\\nまた、ログインする際、URL のクエリに`redirect`が存在する場合は、そのパスにリダイレクトさせるようにしています。\\n\\n### 最終確認\\n\\nログインしていない状態で、認証が必要な画面に行こうとすると、強制的にホーム画面に戻され、アラートメッセージが表示されていると思います。\\n\\nまた、その状態で、ログインをすると、認証が必要な画面に戻されるようになっていると思います。","bodyHtml":"<h2>Nuxt をインストールする</h2>\\n<p>https://ja.nuxtjs.org/guide/installation</p>\\n<pre><code class=\\"hljs\\">$ npx create-nuxt-app &lt;project-name&gt;</code></pre><h3>いくつかの質問に対する設定値</h3>\\n<p>状況に応じて選択してください。</p>\\n<p>以下、筆者が普段選択するものを記載します。</p>\\n<h4>サーバーサイドのフレームワーク</h4>\\n<p>None</p>\\n<h4>UI フレームワーク</h4>\\n<p>Vuetfy</p>\\n<p>※このページでは Vuetfy を使用して進めていきます。</p>\\n<h4>テスティングフレームワーク</h4>\\n<p>None</p>\\n<h4>Nuxt のモード</h4>\\n<ul>\\n<li>簡単なアプリの場合<code>SPA</code></li>\\n<li>ちょっと凝ったアプリの場合<code>Universal</code></li>\\n</ul>\\n<p>※あとからでも変更できます</p>\\n<h4>axios</h4>\\n<p>筆者は firebase が好きなのでをサーバーサイドの実装はあまりしないので追加しません。</p>\\n<p>サーバーサイドを自前で用意する場合や、外部サービスと連携させる場合は追加します。</p>\\n<h4>EsLint</h4>\\n<p>追加する</p>\\n<h4>Prettier</h4>\\n<p>追加する</p>\\n<h3>起動してみる</h3>\\n<pre><code class=\\"hljs\\">$ npm run dev</code></pre><p>http://localhost:3000</p>\\n<p>にアクセスし、画面が表示されれば OK です。</p>\\n<h2>画面を作成する</h2>\\n<p>まずはじめに画面構成をお伝えしておきます。</p>\\n<h3>画面構成</h3>\\n<ul>\\n<li>ホーム画面（ログインを行う）</li>\\n<li>認証が必要な画面</li>\\n<li>認証が不要な画面</li>\\n</ul>\\n<p>ログインしていない状態で認証が必要な画面にアクセスするとホーム画面に飛ばされます。</p>\\n<h3>認証が必要な画面を作成する</h3>\\n<pre><code class=\\"hljs\\">&lt;template&gt;\\n  &lt;div&gt;\\n    認証が必要な画面です。\\n  &lt;/div&gt;\\n&lt;/template&gt;</code></pre><p>ひとまず、テンプレート部分だけ作成します。</p>\\n<p>見ての通り、文字を表示させているだけです。</p>\\n<p>後ほどスクリプトも記述します。</p>\\n<h3>認証が不要な画面を作成する</h3>\\n<pre><code class=\\"hljs\\">&lt;template&gt;\\n  &lt;div&gt;\\n    認証が不要な画面です。\\n  &lt;/div&gt;\\n&lt;/template&gt;</code></pre><p>こちらも文字を表示させているだけです。</p>\\n<p>スクリプトは特に記述しないので、これで完成です。</p>\\n<h3>デフォルトのレイアウトを変更する</h3>\\n<pre><code class=\\"hljs\\">&lt;template&gt;\\n  &lt;v-app dark&gt;\\n    &lt;v-tabs fixed-tabs hide-slider&gt;\\n      &lt;v-tab to=\\"/\\"&gt;\\n        ホーム\\n      &lt;/v-tab&gt;\\n      &lt;v-tab to=\\"/authentication-not-required\\"&gt;\\n        認証不要\\n      &lt;/v-tab&gt;\\n      &lt;v-tab to=\\"/authentication-required\\"&gt;\\n        認証必要\\n      &lt;/v-tab&gt;\\n    &lt;/v-tabs&gt;\\n\\n    &lt;v-content&gt;\\n      &lt;v-container&gt;\\n        &lt;nuxt /&gt;\\n      &lt;/v-container&gt;\\n    &lt;/v-content&gt;\\n  &lt;/v-app&gt;\\n&lt;/template&gt;</code></pre><p>上部にツールバーを表示させ、ホーム画面／認証が不要な画面／認証が必要な画面に遷移できるようにしています。</p>\\n<p>下半分の<code>&lt;nuxt /&gt;</code>の部分はそれぞれのページを表示する領域になります。</p>\\n<h3>ここまでの画面確認</h3>\\n<p>http://localhost:3000</p>\\n<p>にアクセスすると、インストール直後に起動した画面の上部にツールバーが追加されていると思います。</p>\\n<p>ツールバーをクリックした際、該当のページに遷移されるようになっていれば OK です。</p>\\n<h3>ストアを作成する</h3>\\n<p>ログイン状態を保持させるためにストア（Vuex）を作成します。</p>\\n<pre><code class=\\"hljs\\">export const state = () =&gt; ({\\n  loggedIn: false\\n})\\n\\nexport const mutations = {\\n  login(state) {\\n    state.loggedIn = true\\n  },\\n  logout(state) {\\n    state.loggedIn = false\\n  }\\n}</code></pre><p>state にログイン状態をブール値で保持させ、</p>\\n<p>mutations にログイン時、ログアウト時に使用するファンクションを定義します。</p>\\n<p>※ストアの javascript ファイルを新規追加した場合は、ローカルサーバーを再起動させてください。（最近のバージョンではストアファイルの追加もウォッチするようになったようです）</p>\\n<h3>ミドルウェアを作成する</h3>\\n<p>ログインしていない状態で、認証が必要な画面に遷移した場合、ホーム画面に強制的に飛ばすために必要になります。</p>\\n<pre><code class=\\"hljs\\">export default ({ store, redirect, route }) =&gt; {\\n  // ログインしていない場合ホームにリダイレクトします。\\n  if (!store.state.loggedIn) {\\n    return redirect({\\n      path: \'/\',\\n      query: {\\n        showMessage: true,\\n        redirect: route.path\\n      }\\n    })\\n  }\\n}</code></pre><p>強制的にホーム画面に飛ばされた後にログイン処理をした場合、もともと表示していた画面に戻すために、クエリに<code>redurect</code>を設定しています。</p>\\n<p>また、警告メッセージを出したいので、<code>showMessage</code>を設定しています。</p>\\n<h3>認証が必要な画面を修正する</h3>\\n<p>ミドルウェアを作成しただけの状態では、ログインしていなくても認証が必要な画面に行けてしまうので、修正を行います。</p>\\n<p>上の方に書かれていますが、ここでスクリプトを追加します。</p>\\n<pre><code class=\\"hljs\\">&lt;script&gt;\\nexport default {\\n  middleware: \'authenticated\'\\n}\\n&lt;/script&gt;</code></pre><p>ミドルウェア<code>authenticated</code>を使いますよー。と宣言しています。</p>\\n<p>こうすることで、ログインしていない状態でこのページに行こうとすると強制的にホーム画面に飛ばされるようになります。</p>\\n<h3>ホーム画面（ログインする画面）を作成する</h3>\\n<p>最後にログイン機能を持たせたホーム画面を作成します。</p>\\n<pre><code class=\\"hljs\\">&lt;template&gt;\\n  &lt;v-layout column&gt;\\n    &lt;template v-if=\\"$store.state.loggedIn\\"&gt;\\n      &lt;v-flex&gt;\\n        &lt;v-btn color=\\"primary\\" @click=\\"logout()\\"&gt;\\n          logout\\n        &lt;/v-btn&gt;\\n      &lt;/v-flex&gt;\\n    &lt;/template&gt;\\n\\n    &lt;template v-else&gt;\\n      &lt;v-flex&gt;\\n        &lt;v-alert\\n          :value=\\"$route.query.showMessage\\"\\n          color=\\"warning\\"\\n          icon=\\"priority_high\\"\\n          outline\\n        &gt;\\n          ログイン認証してください。\\n        &lt;/v-alert&gt;\\n      &lt;/v-flex&gt;\\n\\n      &lt;v-flex&gt;\\n        &lt;v-btn color=\\"primary\\" @click=\\"login()\\"&gt;\\n          login\\n        &lt;/v-btn&gt;\\n      &lt;/v-flex&gt;\\n    &lt;/template&gt;\\n  &lt;/v-layout&gt;\\n&lt;/template&gt;</code></pre><p>ログイン状態によって、ログイン／ログアウトボタンを表示させ、認証が必要な画面から強制的に飛ばされた場合は、アラートメッセージを出すようにしています。</p>\\n<pre><code class=\\"hljs\\">&lt;script&gt;\\nexport default {\\n  methods: {\\n    login() {\\n      this.$store.commit(\'login\')\\n\\n      // URL のクエリにリダイレクトが存在する場合はリダイレクトします。\\n      if (this.$route.query.redirect) {\\n        this.$router.push(this.$route.query.redirect)\\n      }\\n    },\\n\\n    logout() {\\n      this.$store.commit(\'logout\')\\n    }\\n  }\\n}\\n&lt;/script&gt;</code></pre><p>ログイン／ログアウトボタンを押した際、ストアにログイン状態を反映させています。</p>\\n<p>また、ログインする際、URL のクエリに<code>redirect</code>が存在する場合は、そのパスにリダイレクトさせるようにしています。</p>\\n<h3>最終確認</h3>\\n<p>ログインしていない状態で、認証が必要な画面に行こうとすると、強制的にホーム画面に戻され、アラートメッセージが表示されていると思います。</p>\\n<p>また、その状態で、ログインをすると、認証が必要な画面に戻されるようになっていると思います。</p>\\n","preview":"Nuxt をインストールする\\n\\nhttps://ja.nuxtjs.org/guide/installation\\n\\n$ npx","dir":"src/contents/json","base":"2019-05-30_nuxt-login.json","ext":".json","sourceBase":"2019-05-30_nuxt-login.md","sourceExt":".md"}')},382:function(n){n.exports=JSON.parse('{"title":"Nuxt.js と GitHub Pages を使った無料ブログを作った","description":"ブログって本格的に運用しようとすると結構お金かかりますよね？お金に余裕がないので自分でブログを作ってみました！その方法とは？","image":"/images/articles/thumbnails/website_blog.png","category":"ブログ運営","tags":["Nuxt.js","GitHubPages"],"created_at":"2019-10-31","updated_at":"2019-10-31","bodyContent":"## どんなものを作ったか\\n\\nこのサイトです。\\nhttps://www.kz62.net\\n\\n## なぜ作ったか\\n\\n以前はてなブログ PRO を利用しておりましたが、料金が高いので辞めました。\\nしかし、せっかく書いた記事を捨てるのはもったいなかったので、自分でブログを作成しました。\\nこれなら費用はドメイン代のみになります。\\n（独自ドメインにこだわらなければ無料）\\n\\n## ソースコード\\n\\nこちらに置いてあるのでご自由にどうぞ。\\nご意見等お待ちしております。\\nhttps://github.com/kz62123/personal-blog\\n\\n## 使い方\\n\\n### 前提\\n\\n`git`, `npm` が使える状態であること。\\n\\n### GitHub からクローン\\n\\n```bash\\n$ git clone https://github.com/kz62123/personal-blog.git\\n```\\n\\n### 依存パッケージをインストール\\n\\n```bash\\n$ cd personal-blog\\n$ npm install\\n```\\n\\n### 起動して確認\\n\\n```bash\\n$ npm run dev\\n```\\n\\nhttp://localhost:3000/\\nこちらにアクセスして以下のように表示されていれば OK です。\\n\\n![ブログトップ](/images/articles/2019-10-31_nuxt-github-blog/blog_top.png \'ブログトップ\')\\n\\n### ソースコード修正\\n\\n修正箇所がいくつかあります。\\n`【~~~~】`の部分が修正箇所です。\\n正規表現での検索で`【.*】`と入力すればすべて拾えます。\\n\\nそれでは修正箇所を１つずつ解説していきます。\\n\\n#### env ファイルの修正\\n\\n```js {data-filename=/env/development.js}\\nmodule.exports = {\\n  // seo\\n  title: \'【サイト名】\',\\n  description: \'【サイト詳細】\',\\n  baseUrl: \'http://localhost:3000\',\\n\\n  // settings\\n  pageRange: 5\\n}\\n```\\n\\n- title\\n  ブラウザのタブや Google 検索した際に表示される内容です。\\n\\n- description\\n  Google 検索した際にタイトルの下に表示される内容です。\\n  ただし、ブログ記事のページの場合はその記事の内容が表示されます。\\n\\n```js {data-filename=/env/production.js}\\nmodule.exports = {\\n  // seo\\n  title: \'【サイト名】\',\\n  description: \'【サイト詳細】\',\\n  baseUrl: \'【https://www.yoursite.com】\',\\n\\n  // settings\\n  pageRange: 5\\n}\\n```\\n\\n- title\\n  上で設定した内容と同じものを設定します。\\n\\n- description\\n  上で設定した内容と同じものを設定します。\\n\\n- baseUrl\\n  この設定は独自ドメインを使うか否かで変わります。\\n\\n  - 独自ドメインを使わない場合\\n    `https://<username>.github.io/<repository-name>`\\n\\n  - 独自ドメインを使う場合\\n    `https:<独自ドメイン>`\\n\\n#### Nuxt 設定ファイルの修正\\n\\n```js {data-filename=/nuxt.config.js}\\nrouter: {\\n  base: process.env.NODE_ENV === \'production\' ? \'/【repository-name】/\' : \'/\'\\n},\\n```\\n\\n19~21 行目です。\\nこの設定は独自ドメインを使うか否かで変わります。\\n\\n- 独自ドメインを使わない場合\\n  【repository-name】をプッシュするリポジトリ名にします。\\n\\n- 独自ドメインを使う場合\\n  上記 3 行をコメントアウトしてください。\\n\\n```js {data-filename=/nuxt.config.js}\\n\'@nuxtjs/google-analytics\',\\n  {\\n    id: \'【UA-xxxxxxxxx-x】\'\\n  }\\n```\\n\\n86~89 行目です。\\nご自身の Google Analytics のトラッキング ID を設定します。\\n\\n#### フッターの修正\\n\\n```js {data-filename=/src/components/layouts/Footer.vue}\\n{\\n  label: \'お問い合わせ\',\\n  href: \'【https://Googleフォーム】\'\\n}\\n```\\n\\n36~39 行目です。\\nご自身で作成された Google フォームの URL を設定します。\\n`href`属性でリンクできるならば Google フォーム以外でも大丈夫です。\\n\\n以上で修正は終わりです。\\nこれでソース側の準備は整ったのですが、その前に GitHub の準備をします。\\n\\n### GitHub 準備\\n\\n#### Git のフォルダを削除する\\n\\nクローンしてきた状態だと筆者のリポジトリを指していますので、`/.git`フォルダの削除を行います。\\n\\n#### リポジトリ作成\\n\\n公開リポジトリを作成してください。\\nhttps://github.com/\\n\\n#### Git 管理を開始する\\n\\n```bash\\n$ git init\\n$ git add .\\n$ git commit -m \\"first commit\\"\\n$ git remote add origin https://github.com/<username>/<repository-name>.git\\n$ git push -u origin master\\n```\\n\\n今まで修正してきたソースを GitHub の作成したリポジトリにプッシュしておきます。\\n\\n### 静的ファイル生成\\n\\n```bash\\n$ npm run generate\\n```\\n\\n### デプロイ\\n\\n```bash\\n$ npm run deploy\\n```\\n\\n### Https を強制する\\n\\nGitHub のリポジトリ ＞ settings\\n\\n![GitHub Pages 設定](/images/articles/2019-10-31_nuxt-github-blog/github_pages_https.png \'GitHub Pages 設定\')\\n\\n**Enforce HTTPS** にチェックを入れます。\\n\\n最終的に **Your site is published at ~~~** のようになれば OK です。\\n少し時間がかかる場合もあるようです。\\n\\nこの状態でブログページにアクセスして表示されていれば OK です。\\n\\n## 記事の書き方\\n\\n続いて記事の書き方を解説していきます。\\n\\n### 記事のフォルダ、ファイル名\\n\\n- 記事管理フォルダ\\n`/src/contents/markdown`\\n\\n- ファイル名\\n  `<YYYY-MM-DD>_<記事URL>.md`\\n\\n### 記事の中身\\n\\n```markdown {data-filename=/src/contents/markdown/2020-01-01_sample.md}\\n---\\ntitle: サンプル記事\\ndescription: サンプル記事詳細\\nimage: /images/articles/thumbnails/icon.png\\ncategory: カテゴリ\\ntags:\\n  - タグ１\\n  - タグ２\\ncreated_at: \'2020-01-01\'\\nupdated_at: \'2020-01-02\'\\n---\\n\\n- テキストテキストテキスト\\n- テキストテキストテキスト\\n```\\n\\n#### ヘッダエリア\\n\\n`---`で囲われたエリアがヘッダエリアになります。\\n\\n- title\\n  記事のタイトルです。\\n  ブラウザのタブや Google 検索した際にも表示される内容です。\\n\\n- description\\n  Google 検索した際にタイトルの下に表示される内容です。\\n  こちらを指定しない場合、本文の先頭数文字が適用されます。\\n\\n- image\\n  記事一覧のサムネイル、記事の上部に表示される画像です。\\n\\n- category\\n  記事一覧のサムネイルの左上に表示されます。\\n  記事中にパンくずリストとしても表示されます。\\n  カテゴリによる検索も可能になります。\\n\\n- tags\\n  記事一覧、記事中に表示されます。\\n  タグによる検索も可能になります。\\n  **複数指定できます。**\\n\\n- created_at\\n  記事作成日です。\\n\\n- updated_at\\n  記事更新日です。\\n\\n#### 本文エリア\\n\\nヘッダエリアの下が本文エリアになります。\\nMarkdown 形式で入力できます。\\n\\n## 記事修正後のデプロイについて\\n\\n記事修正後にデプロイする場合は以下の手順を実行します。\\n\\n### GitHub へプッシュする\\n\\n```bash\\n$ git add .\\n$ git commit -m <コミットメッセージ>\\n$ git push\\n```\\n\\n### 静的ファイル生成\\n\\n```bash\\n$ npm run generate\\n```\\n\\n### デプロイ\\n\\n```bash\\n$ npm run deploy\\n```\\n\\n## おわり\\n\\n以上です。\\nよかったら使ってみてください。\\nご意見・ご要望等ございましたら、お気軽にお問い合わせください。","bodyHtml":"<h2>どんなものを作ったか</h2>\\n<p>このサイトです。\\nhttps://www.kz62.net</p>\\n<h2>なぜ作ったか</h2>\\n<p>以前はてなブログ PRO を利用しておりましたが、料金が高いので辞めました。\\nしかし、せっかく書いた記事を捨てるのはもったいなかったので、自分でブログを作成しました。\\nこれなら費用はドメイン代のみになります。\\n（独自ドメインにこだわらなければ無料）</p>\\n<h2>ソースコード</h2>\\n<p>こちらに置いてあるのでご自由にどうぞ。\\nご意見等お待ちしております。\\nhttps://github.com/kz62123/personal-blog</p>\\n<h2>使い方</h2>\\n<h3>前提</h3>\\n<p><code>git</code>, <code>npm</code> が使える状態であること。</p>\\n<h3>GitHub からクローン</h3>\\n<pre><code class=\\"hljs\\">$ git <span class=\\"hljs-built_in\\">clone</span> https://github.com/kz62123/personal-blog.git</code></pre><h3>依存パッケージをインストール</h3>\\n<pre><code class=\\"hljs\\">$ <span class=\\"hljs-built_in\\">cd</span> personal-blog\\n$ npm install</code></pre><h3>起動して確認</h3>\\n<pre><code class=\\"hljs\\">$ npm run dev</code></pre><p>http://localhost:3000/\\nこちらにアクセスして以下のように表示されていれば OK です。</p>\\n<p><img src=\\"/images/articles/2019-10-31_nuxt-github-blog/blog_top.png\\" alt=\\"ブログトップ\\" title=\\"ブログトップ\\"></p>\\n<h3>ソースコード修正</h3>\\n<p>修正箇所がいくつかあります。\\n<code>【~~~~】</code>の部分が修正箇所です。\\n正規表現での検索で<code>【.*】</code>と入力すればすべて拾えます。</p>\\n<p>それでは修正箇所を１つずつ解説していきます。</p>\\n<h4>env ファイルの修正</h4>\\n<pre><code class=\\"hljs\\">module.exports = {\\n  // seo\\n  title: \'【サイト名】\',\\n  description: \'【サイト詳細】\',\\n  baseUrl: \'http://localhost:3000\',\\n\\n  // settings\\n  pageRange: 5\\n}</code></pre><ul>\\n<li>\\n<p>title\\nブラウザのタブや Google 検索した際に表示される内容です。</p>\\n</li>\\n<li>\\n<p>description\\nGoogle 検索した際にタイトルの下に表示される内容です。\\nただし、ブログ記事のページの場合はその記事の内容が表示されます。</p>\\n</li>\\n</ul>\\n<pre><code class=\\"hljs\\">module.exports = {\\n  // seo\\n  title: \'【サイト名】\',\\n  description: \'【サイト詳細】\',\\n  baseUrl: \'【https://www.yoursite.com】\',\\n\\n  // settings\\n  pageRange: 5\\n}</code></pre><ul>\\n<li>\\n<p>title\\n上で設定した内容と同じものを設定します。</p>\\n</li>\\n<li>\\n<p>description\\n上で設定した内容と同じものを設定します。</p>\\n</li>\\n<li>\\n<p>baseUrl\\nこの設定は独自ドメインを使うか否かで変わります。</p>\\n<ul>\\n<li>\\n<p>独自ドメインを使わない場合\\n<code>https://&lt;username&gt;.github.io/&lt;repository-name&gt;</code></p>\\n</li>\\n<li>\\n<p>独自ドメインを使う場合\\n<code>https:&lt;独自ドメイン&gt;</code></p>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<h4>Nuxt 設定ファイルの修正</h4>\\n<pre><code class=\\"hljs\\">router: {\\n  base: process.env.NODE_ENV === \'production\' ? \'/【repository-name】/\' : \'/\'\\n},</code></pre><p>19~21 行目です。\\nこの設定は独自ドメインを使うか否かで変わります。</p>\\n<ul>\\n<li>\\n<p>独自ドメインを使わない場合\\n【repository-name】をプッシュするリポジトリ名にします。</p>\\n</li>\\n<li>\\n<p>独自ドメインを使う場合\\n上記 3 行をコメントアウトしてください。</p>\\n</li>\\n</ul>\\n<pre><code class=\\"hljs\\">\'@nuxtjs/google-analytics\',\\n  {\\n    id: \'【UA-xxxxxxxxx-x】\'\\n  }</code></pre><p>86~89 行目です。\\nご自身の Google Analytics のトラッキング ID を設定します。</p>\\n<h4>フッターの修正</h4>\\n<pre><code class=\\"hljs\\">{\\n  label: \'お問い合わせ\',\\n  href: \'【https://Googleフォーム】\'\\n}</code></pre><p>36~39 行目です。\\nご自身で作成された Google フォームの URL を設定します。\\n<code>href</code>属性でリンクできるならば Google フォーム以外でも大丈夫です。</p>\\n<p>以上で修正は終わりです。\\nこれでソース側の準備は整ったのですが、その前に GitHub の準備をします。</p>\\n<h3>GitHub 準備</h3>\\n<h4>Git のフォルダを削除する</h4>\\n<p>クローンしてきた状態だと筆者のリポジトリを指していますので、<code>/.git</code>フォルダの削除を行います。</p>\\n<h4>リポジトリ作成</h4>\\n<p>公開リポジトリを作成してください。\\nhttps://github.com/</p>\\n<h4>Git 管理を開始する</h4>\\n<pre><code class=\\"hljs\\">$ git init\\n$ git add .\\n$ git commit -m <span class=\\"hljs-string\\">\\"first commit\\"</span>\\n$ git remote add origin https://github.com/&lt;username&gt;/&lt;repository-name&gt;.git\\n$ git push -u origin master</code></pre><p>今まで修正してきたソースを GitHub の作成したリポジトリにプッシュしておきます。</p>\\n<h3>静的ファイル生成</h3>\\n<pre><code class=\\"hljs\\">$ npm run generate</code></pre><h3>デプロイ</h3>\\n<pre><code class=\\"hljs\\">$ npm run deploy</code></pre><h3>Https を強制する</h3>\\n<p>GitHub のリポジトリ ＞ settings</p>\\n<p><img src=\\"/images/articles/2019-10-31_nuxt-github-blog/github_pages_https.png\\" alt=\\"GitHub Pages 設定\\" title=\\"GitHub Pages 設定\\"></p>\\n<p><strong>Enforce HTTPS</strong> にチェックを入れます。</p>\\n<p>最終的に <strong>Your site is published at ~~~</strong> のようになれば OK です。\\n少し時間がかかる場合もあるようです。</p>\\n<p>この状態でブログページにアクセスして表示されていれば OK です。</p>\\n<h2>記事の書き方</h2>\\n<p>続いて記事の書き方を解説していきます。</p>\\n<h3>記事のフォルダ、ファイル名</h3>\\n<ul>\\n<li>\\n<p>記事管理フォルダ\\n<code>/src/contents/markdown</code></p>\\n</li>\\n<li>\\n<p>ファイル名\\n<code>&lt;YYYY-MM-DD&gt;_&lt;記事URL&gt;.md</code></p>\\n</li>\\n</ul>\\n<h3>記事の中身</h3>\\n<pre><code class=\\"hljs\\">---\\ntitle: サンプル記事\\ndescription: サンプル記事詳細\\nimage: /images/articles/thumbnails/icon.png\\ncategory: カテゴリ\\ntags:\\n  - タグ１\\n  - タグ２\\ncreated_at: \'2020-01-01\'\\nupdated_at: \'2020-01-02\'\\n---\\n\\n- テキストテキストテキスト\\n- テキストテキストテキスト</code></pre><h4>ヘッダエリア</h4>\\n<p><code>---</code>で囲われたエリアがヘッダエリアになります。</p>\\n<ul>\\n<li>\\n<p>title\\n記事のタイトルです。\\nブラウザのタブや Google 検索した際にも表示される内容です。</p>\\n</li>\\n<li>\\n<p>description\\nGoogle 検索した際にタイトルの下に表示される内容です。\\nこちらを指定しない場合、本文の先頭数文字が適用されます。</p>\\n</li>\\n<li>\\n<p>image\\n記事一覧のサムネイル、記事の上部に表示される画像です。</p>\\n</li>\\n<li>\\n<p>category\\n記事一覧のサムネイルの左上に表示されます。\\n記事中にパンくずリストとしても表示されます。\\nカテゴリによる検索も可能になります。</p>\\n</li>\\n<li>\\n<p>tags\\n記事一覧、記事中に表示されます。\\nタグによる検索も可能になります。\\n<strong>複数指定できます。</strong></p>\\n</li>\\n<li>\\n<p>created_at\\n記事作成日です。</p>\\n</li>\\n<li>\\n<p>updated_at\\n記事更新日です。</p>\\n</li>\\n</ul>\\n<h4>本文エリア</h4>\\n<p>ヘッダエリアの下が本文エリアになります。\\nMarkdown 形式で入力できます。</p>\\n<h2>記事修正後のデプロイについて</h2>\\n<p>記事修正後にデプロイする場合は以下の手順を実行します。</p>\\n<h3>GitHub へプッシュする</h3>\\n<pre><code class=\\"hljs\\">$ git add .\\n$ git commit -m &lt;コミットメッセージ&gt;\\n$ git push</code></pre><h3>静的ファイル生成</h3>\\n<pre><code class=\\"hljs\\">$ npm run generate</code></pre><h3>デプロイ</h3>\\n<pre><code class=\\"hljs\\">$ npm run deploy</code></pre><h2>おわり</h2>\\n<p>以上です。\\nよかったら使ってみてください。\\nご意見・ご要望等ございましたら、お気軽にお問い合わせください。</p>\\n","preview":"どんなものを作ったか\\n\\nこのサイトです。\\nhttps://www.kz62.net\\n\\nなぜ作ったか\\n\\n以前はてなブログ PRO","dir":"src/contents/json","base":"2019-10-31_nuxt-github-blog.json","ext":".json","sourceBase":"2019-10-31_nuxt-github-blog.md","sourceExt":".md"}')},383:function(n){n.exports=JSON.parse('{"title":"Windows で IntelliJ が起動しなくなったときにやったこと","description":"IntelliJ を 2019.2 にアップデートしたら起動しなくなってしまったので、やったことをまとめました。","image":"/images/articles/thumbnails/intellij.jpg","category":"プログラミング","tags":["IntelliJ"],"created_at":"2019-11-14","updated_at":"2019-11-14","bodyContent":"## 起動しなくなった経緯\\n\\nもともと Windows で IntelliJ の **2018.3** を使用しており大分古くなってきたのでアップデートを行いました。\\nアップデートを行った直後はちゃんと起動していたのですが、数日後に起動しようとしたら、うんともすんとも言わなくなってしまいました。\\n\\n## やったこと\\n\\n<IDE_HOME>\\\\bin\\\\idea.bat をコマンドプロンプトで実行しエラー内容を確認しました。\\n\\n```bash\\nInitial heap size set to a larger value than the maximum heap size\\n```\\n\\n最大ヒープサイズが初期ヒープサイズよりも小さく設定されてしまっているようです。\\n\\n<IDE_HOME>\\\\bin\\\\idea64.exe.vmoptions にそれぞれ設定されているので変更してみました。\\n\\n```bash {data-filename=<IDE_HOME>\\\\bin\\\\idea64.exe.vmoptions}\\n-Xms1024m\\n-Xmx2048m\\n```\\n\\n修正後起動してみましたが、同様のエラーが出力され起動できませんでした。\\n**ていうかそもそも最初から Xmx の方が大きかったので問題なかったような気がします。**\\n\\nC:\\\\Users\\\\<USER_ID>\\\\\\\\.IntelliJIdea2019.2\\\\config\\\\idea64.exe.vmoptions にも設定ファイルがあるようなのでこちらは削除しました。\\n\\n削除してから起動してみたら無事に起動させることができました！","bodyHtml":"<h2>起動しなくなった経緯</h2>\\n<p>もともと Windows で IntelliJ の <strong>2018.3</strong> を使用しており大分古くなってきたのでアップデートを行いました。\\nアップデートを行った直後はちゃんと起動していたのですが、数日後に起動しようとしたら、うんともすんとも言わなくなってしまいました。</p>\\n<h2>やったこと</h2>\\n<p>&lt;IDE_HOME&gt;\\\\bin\\\\idea.bat をコマンドプロンプトで実行しエラー内容を確認しました。</p>\\n<pre><code class=\\"hljs\\">Initial heap size <span class=\\"hljs-built_in\\">set</span> to a larger value than the maximum heap size</code></pre><p>最大ヒープサイズが初期ヒープサイズよりも小さく設定されてしまっているようです。</p>\\n<p>&lt;IDE_HOME&gt;\\\\bin\\\\idea64.exe.vmoptions にそれぞれ設定されているので変更してみました。</p>\\n<pre><code class=\\"hljs\\">-Xms1024m\\n-Xmx2048m</code></pre><p>修正後起動してみましたが、同様のエラーが出力され起動できませんでした。\\n<strong>ていうかそもそも最初から Xmx の方が大きかったので問題なかったような気がします。</strong></p>\\n<p>C:\\\\Users&lt;USER_ID&gt;\\\\.IntelliJIdea2019.2\\\\config\\\\idea64.exe.vmoptions にも設定ファイルがあるようなのでこちらは削除しました。</p>\\n<p>削除してから起動してみたら無事に起動させることができました！</p>\\n","preview":"起動しなくなった経緯\\n\\nもともと Windows で IntelliJ の 2018.3","dir":"src/contents/json","base":"2019-11-14_intellij-startup-failed.json","ext":".json","sourceBase":"2019-11-14_intellij-startup-failed.md","sourceExt":".md"}')},384:function(n){n.exports=JSON.parse('{"title":"今まで本をろくに読んでこなかった人間が本を読もうと決意した","description":"本を読むと知識だけではなく、様々な力が身に付きます。その力とは？","image":"/images/articles/thumbnails/book_hon_no_mushi_man_bug.png","category":"人生の目標","tags":["本"],"created_at":"2019-11-28","updated_at":"2019-11-28","bodyContent":"## はじめに\\n\\n日記です。\\n\\n自分の中に秘めているだけでは実行しないと思い、記事にしてみました。\\n\\n## なぜ本を読もうと思ったのか\\n\\nこれは単純に多くの成功者たちの発信を見たとき、本を読んでいる人が圧倒的に多かったからです。\\n\\nそしてその方たちはこう言っていました。\\n本を読むと、そこから得られる知識だけではなく、論理的思考力や、本質を見極める能力が高まるそうです。\\n\\n僕は今まで、本を読むよりもネットで検索した方が効率的に知識を得られるので、本は必要ないと思っていましたが、もっと大切なものがあることに気づきました。\\n\\n今までろくに本を読んだことがありませんでしたが、とりあえず手始めに今年中に１冊を目標に読んでみたいと思います（少ない）\\n\\n## 本を読む環境を用意する\\n\\n現代において、本を読む方法は２通りあると思います。\\n\\n- 紙の本を読む\\n- 電子化された本を読む\\n\\n僕は２つめの電子化された本を読もうと思います。\\n\\n理由としては、\\n\\n- 持ち運びが楽\\n- 暗い部屋でも読める\\n- 場所を取らない\\n- 購入したらすぐ読める\\n\\nこんなところでしょうか。\\n\\nとりあえず Kindle Paperwhite を買おうと思います！\\n\\n<div class=\\"kaerebalink-box\\"><div class=\\"kaerebalink-image\\"><a href=\\"https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106181317256451?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fcadae6dfd974f93948f7dc6629b8dea3%2F&m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fcadae6dfd974f93948f7dc6629b8dea3%2F\\" target=\\"_blank\\" ><img src=\\"https://thumbnail.image.rakuten.co.jp/ran/img/4001/0000/841/667/127/910/40010000841667127910_1.jpg?_ex=320x320\\" style=\\"border: none;\\" /></a></div><div class=\\"kaerebalink-info\\"><div class=\\"kaerebalink-name\\"><a href=\\"https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106181317256451?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fcadae6dfd974f93948f7dc6629b8dea3%2F&m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fcadae6dfd974f93948f7dc6629b8dea3%2F\\" target=\\"_blank\\" >Amazon アマゾン B07HCSQ48P 電子書籍リーダー 広告つき Kindle Paperwhite</a></div><div class=\\"kaerebalink-powered-date\\">posted with <a href=\\"https://kaereba.com\\" rel=\\"nofollow\\" target=\\"_blank\\">カエレバ</a></div><div class=\\"kaerebalink-detail\\"></div><div class=\\"kaerebalink-rank\\"></div></div><div class=\\"kaerebalink-footer\\" style=\\"\\"><div class=\\"shoplinkrakuten\\" style=\\"display:inline; padding-right:5px;\\"><a href=\\"https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106181317256451?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fcadae6dfd974f93948f7dc6629b8dea3%2F&m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fcadae6dfd974f93948f7dc6629b8dea3%2F\\" target=\\"_blank\\" >楽天市場</a></div><div class=\\"shoplinkamazon\\" style=\\"display:inline; padding-right:5px;\\"><a href=\\"https://www.amazon.co.jp/gp/search?keywords=kindle&__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&tag=kz62-22\\" target=\\"_blank\\" >Amazon</a></div></div><div class=\\"kaerebalink-footer\\" style=\\"clear: left\\"></div></div>","bodyHtml":"<h2>はじめに</h2>\\n<p>日記です。</p>\\n<p>自分の中に秘めているだけでは実行しないと思い、記事にしてみました。</p>\\n<h2>なぜ本を読もうと思ったのか</h2>\\n<p>これは単純に多くの成功者たちの発信を見たとき、本を読んでいる人が圧倒的に多かったからです。</p>\\n<p>そしてその方たちはこう言っていました。\\n本を読むと、そこから得られる知識だけではなく、論理的思考力や、本質を見極める能力が高まるそうです。</p>\\n<p>僕は今まで、本を読むよりもネットで検索した方が効率的に知識を得られるので、本は必要ないと思っていましたが、もっと大切なものがあることに気づきました。</p>\\n<p>今までろくに本を読んだことがありませんでしたが、とりあえず手始めに今年中に１冊を目標に読んでみたいと思います（少ない）</p>\\n<h2>本を読む環境を用意する</h2>\\n<p>現代において、本を読む方法は２通りあると思います。</p>\\n<ul>\\n<li>紙の本を読む</li>\\n<li>電子化された本を読む</li>\\n</ul>\\n<p>僕は２つめの電子化された本を読もうと思います。</p>\\n<p>理由としては、</p>\\n<ul>\\n<li>持ち運びが楽</li>\\n<li>暗い部屋でも読める</li>\\n<li>場所を取らない</li>\\n<li>購入したらすぐ読める</li>\\n</ul>\\n<p>こんなところでしょうか。</p>\\n<p>とりあえず Kindle Paperwhite を買おうと思います！</p>\\n<p>&lt;div class=&quot;kaerebalink-box&quot;&gt;&lt;div class=&quot;kaerebalink-image&quot;&gt;&lt;a href=&quot;https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106181317256451?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fcadae6dfd974f93948f7dc6629b8dea3%2F&amp;m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fcadae6dfd974f93948f7dc6629b8dea3%2F&quot; target=&quot;_blank&quot; &gt;&lt;img src=&quot;https://thumbnail.image.rakuten.co.jp/ran/img/4001/0000/841/667/127/910/40010000841667127910_1.jpg?_ex=320x320&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-info&quot;&gt;&lt;div class=&quot;kaerebalink-name&quot;&gt;&lt;a href=&quot;https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106181317256451?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fcadae6dfd974f93948f7dc6629b8dea3%2F&amp;m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fcadae6dfd974f93948f7dc6629b8dea3%2F&quot; target=&quot;_blank&quot; &gt;Amazon アマゾン B07HCSQ48P 電子書籍リーダー 広告つき Kindle Paperwhite&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-powered-date&quot;&gt;posted with &lt;a href=&quot;https://kaereba.com&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;カエレバ&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-detail&quot;&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-rank&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-footer&quot; style=&quot;&quot;&gt;&lt;div class=&quot;shoplinkrakuten&quot; style=&quot;display:inline; padding-right:5px;&quot;&gt;&lt;a href=&quot;https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106181317256451?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fcadae6dfd974f93948f7dc6629b8dea3%2F&amp;m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fcadae6dfd974f93948f7dc6629b8dea3%2F&quot; target=&quot;_blank&quot; &gt;楽天市場&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;shoplinkamazon&quot; style=&quot;display:inline; padding-right:5px;&quot;&gt;&lt;a href=&quot;https://www.amazon.co.jp/gp/search?keywords=kindle&amp;__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;tag=kz62-22&quot; target=&quot;_blank&quot; &gt;Amazon&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-footer&quot; style=&quot;clear: left&quot;&gt;&lt;/div&gt;&lt;/div&gt;</p>\\n","preview":"","dir":"src/contents/json","base":"2019-11-28_read-book.json","ext":".json","sourceBase":"2019-11-28_read-book.md","sourceExt":".md"}')},385:function(n){n.exports=JSON.parse('{"title":"副業を増やしてセブンポケッツを目指そう","description":null,"image":"/images/articles/thumbnails/buisnessman_money_niyakeru.png","category":"人生の目標","tags":["副業","セブンポケッツ"],"created_at":"2019-11-29","updated_at":"2020-02-02","bodyContent":"## はじめに\\n\\nみなさん、セブンポケッツという言葉を知っていますか？\\n\\n簡単に言うと **「７つの収入源を持とう」** ということです。\\n\\n## 現状は、、、\\n\\n僕は残念ながら現状は給与所得しかありません。\\n\\nしかも満足のいく給料は貰っていません。\\n\\n現代社会において、いつリストラされるか分からないし、会社が倒産するかもわからないので収入源は増やしておいた方が良いと思いました。\\n\\n幸い、会社での業務はそれほど忙しくないので、空いた時間に副収入につながることをやってしまおう（ゲス顔）\\n\\nちなみにこの記事も業務中に書いていることは内緒です。\\n\\n## どういったもので収入を得るか\\n\\n### 現在やっていること\\n\\nまず今現在やっていることは以下になります。\\n\\n- 会社員（本業）\\n- 起業（共同経営）\\n- 個人開発Webサービス\\n- 当ブログ\\n- 投資信託\\n- FX（勉強中）\\n\\nこのうち、会社員以外での収益はまだありません。\\n\\n### 今後やりたいこと\\n\\n今後やりたいことは以下になります。\\n\\n- 電脳せどり\\n\\n## おわりに\\n\\n以上になります。\\n\\nまた、会社員での給与所得は将来的になくしたいと思っています。\\nそれには起業を成功させることが必須だと思っているので、なかなかハードルは高そうです。","bodyHtml":"<h2>はじめに</h2>\\n<p>みなさん、セブンポケッツという言葉を知っていますか？</p>\\n<p>簡単に言うと <strong>「７つの収入源を持とう」</strong> ということです。</p>\\n<h2>現状は、、、</h2>\\n<p>僕は残念ながら現状は給与所得しかありません。</p>\\n<p>しかも満足のいく給料は貰っていません。</p>\\n<p>現代社会において、いつリストラされるか分からないし、会社が倒産するかもわからないので収入源は増やしておいた方が良いと思いました。</p>\\n<p>幸い、会社での業務はそれほど忙しくないので、空いた時間に副収入につながることをやってしまおう（ゲス顔）</p>\\n<p>ちなみにこの記事も業務中に書いていることは内緒です。</p>\\n<h2>どういったもので収入を得るか</h2>\\n<h3>現在やっていること</h3>\\n<p>まず今現在やっていることは以下になります。</p>\\n<ul>\\n<li>会社員（本業）</li>\\n<li>起業（共同経営）</li>\\n<li>個人開発Webサービス</li>\\n<li>当ブログ</li>\\n<li>投資信託</li>\\n<li>FX（勉強中）</li>\\n</ul>\\n<p>このうち、会社員以外での収益はまだありません。</p>\\n<h3>今後やりたいこと</h3>\\n<p>今後やりたいことは以下になります。</p>\\n<ul>\\n<li>電脳せどり</li>\\n</ul>\\n<h2>おわりに</h2>\\n<p>以上になります。</p>\\n<p>また、会社員での給与所得は将来的になくしたいと思っています。\\nそれには起業を成功させることが必須だと思っているので、なかなかハードルは高そうです。</p>\\n","preview":"はじめに\\n\\nみなさん、セブンポケッツという言葉を知っていますか？\\n\\n簡単に言うと 「７つの収入源を持とう」","dir":"src/contents/json","base":"2019-11-29_seven-pockets.json","ext":".json","sourceBase":"2019-11-29_seven-pockets.md","sourceExt":".md"}')},386:function(n){n.exports=JSON.parse('{"title":"IIJ のオブジェクトストレージに Java でアップロードする方法","description":null,"image":"/images/articles/thumbnails/job_programmer.png","category":"プログラミング","tags":["Java","IIJオブジェクトストレージ"],"created_at":"2019-12-09","updated_at":"2019-12-09","bodyContent":"## はじめに\\n\\nネットを探してもサンプルが見つからなかったので記載しておきます。\\n\\n公式の Java Doc は[こちら](https://support.storage-dag.iijgio.com/libs/dag-java/javadoc/1.2.4/index.html)\\n\\n## Gradle で依存を追加する\\n\\n変更箇所は以下２つになります。\\n\\n- repositories\\n- dependencies\\n\\n```groovy {data-filename=build.gradle}\\nrepositories {\\n  maven { url \'http://support.storage-dag.iijgio.com/libs/maven2\' }\\n}\\n\\ndependencies {\\n  compile group: \'com.iijgio.dag.client\', name: \'iijgio-dag-client-core\', version: \'1.2.4\'\\n}\\n```\\n\\nGradle の知識があまりなく、repositories に追加しなければならない部分にハマりました。\\n\\n## アップロードを実装する\\n\\n```java {data-filename=xxx.java}\\npublic String upload() throws IOException {\\n  // ACCESS_KEY, SECRET_KEY を使用して credentials を生成する\\n  IIJGIOCredentials credentials = new BasicIIJGIOCredentials(ACCESS_KEY, SECRET_KEY);\\n  StorageClient client = new StorageClient(credentials);\\n\\n  // ENDPOINT の設定\\n  client.setEndpoint(ENDPOINT);\\n\\n  // 適当なファイルを生成する（実際はアップロードしたいファイル）\\n  File tempFile = File.createTempFile(\\"test\\", null);\\n  FileWriter fw = new FileWriter(tempFile, true);\\n  BufferedWriter bw = new BufferedWriter(fw);\\n  PrintWriter pw = new PrintWriter(bw);\\n  pw.write(\\"テスト\\");\\n  pw.flush();\\n  pw.close();\\n\\n  // BUKET_NAME の 配下に KEY というファイル名でアップロードする\\n  PutObjectRequest putObjectRequest = new PutObjectRequest(BUKET_NAME, KEY, tempFile);\\n  client.putObject(putObjectRequest);\\n\\n  // アップロードしたファイルの URL を取得する\\n  return client.getUrl(BUKET_NAME, KEY).toString();\\n}\\n```\\n\\n特に ENDPOINT を設定しなければならない部分にハマりました。\\n\\n## おわりに\\n\\n以上です。\\n\\nみなさんのお役に立てれば幸いです。","bodyHtml":"<h2>はじめに</h2>\\n<p>ネットを探してもサンプルが見つからなかったので記載しておきます。</p>\\n<p>公式の Java Doc は<a href=\\"https://support.storage-dag.iijgio.com/libs/dag-java/javadoc/1.2.4/index.html\\">こちら</a></p>\\n<h2>Gradle で依存を追加する</h2>\\n<p>変更箇所は以下２つになります。</p>\\n<ul>\\n<li>repositories</li>\\n<li>dependencies</li>\\n</ul>\\n<pre><code class=\\"hljs\\">repositories {\\n  maven { url \'http://support.storage-dag.iijgio.com/libs/maven2\' }\\n}\\n\\ndependencies {\\n  compile group: \'com.iijgio.dag.client\', name: \'iijgio-dag-client-core\', version: \'1.2.4\'\\n}</code></pre><p>Gradle の知識があまりなく、repositories に追加しなければならない部分にハマりました。</p>\\n<h2>アップロードを実装する</h2>\\n<pre><code class=\\"hljs\\">public String upload() throws IOException {\\n  // ACCESS_KEY, SECRET_KEY を使用して credentials を生成する\\n  IIJGIOCredentials credentials = new BasicIIJGIOCredentials(ACCESS_KEY, SECRET_KEY);\\n  StorageClient client = new StorageClient(credentials);\\n\\n  // ENDPOINT の設定\\n  client.setEndpoint(ENDPOINT);\\n\\n  // 適当なファイルを生成する（実際はアップロードしたいファイル）\\n  File tempFile = File.createTempFile(\\"test\\", null);\\n  FileWriter fw = new FileWriter(tempFile, true);\\n  BufferedWriter bw = new BufferedWriter(fw);\\n  PrintWriter pw = new PrintWriter(bw);\\n  pw.write(\\"テスト\\");\\n  pw.flush();\\n  pw.close();\\n\\n  // BUKET_NAME の 配下に KEY というファイル名でアップロードする\\n  PutObjectRequest putObjectRequest = new PutObjectRequest(BUKET_NAME, KEY, tempFile);\\n  client.putObject(putObjectRequest);\\n\\n  // アップロードしたファイルの URL を取得する\\n  return client.getUrl(BUKET_NAME, KEY).toString();\\n}</code></pre><p>特に ENDPOINT を設定しなければならない部分にハマりました。</p>\\n<h2>おわりに</h2>\\n<p>以上です。</p>\\n<p>みなさんのお役に立てれば幸いです。</p>\\n","preview":"はじめに\\n\\nネットを探してもサンプルが見つからなかったので記載しておきます。\\n\\n公式の Java Doc はこちら\\n\\nGradle で依存を追加する\\n\\n変更箇所は以下２つになります。\\n\\nrepositories\\ndependencies\\n\\nrepositories {\\n  maven { url","dir":"src/contents/json","base":"2019-12-09_iij-object-storage-java.json","ext":".json","sourceBase":"2019-12-09_iij-object-storage-java.md","sourceExt":".md"}')},387:function(n){n.exports=JSON.parse('{"title":"MQL4を開発する環境を整える(Notepad++)","description":null,"image":"/images/articles/thumbnails/job_programmer.png","category":"プログラミング","tags":["FX","MQL4"],"created_at":"2020-03-08","updated_at":"2020-03-09","bodyContent":"## はじめに\\n\\nMQL4を開発しやすい環境を整えたので、特につまずいた部分を備忘録として残しておきます。\\n\\n環境は以下の通りです。\\n\\n- Wintows10\\n- MT4 build 1260\\n- Notepad++ v7.8.5\\n\\n普段使用している **VS Code** や **IntelliJ IDEA** も試してみましたが、**Notepad++** が最も要求を満たすことができました。\\n\\n## 設定内容\\n\\n### コンパイル\\n\\nNotepad++ からショートカットキーでコンパイルをできるようにします。\\n\\nまず以下内容のバッチファイルを作成してください。\\n\\n```bash {data-filename=ログ内容表示.bat}\\ntype %1\\n```\\n\\n引数で受け取ったファイルの情報を表示させるだけです。\\n※何故か Notepad++ のコマンド実行で type が認識されなかったのでバッチファイルを作成して実行させることにしています。\\n\\n次にプラグインの **NppExec** を導入します。\\n\\n導入した後、F6キーを押すとコマンドを入力する画面が出るので以下を入力します。\\n\\n```bash {data-filename=入力内容}\\nNPP_SAVE\\n\\"C:\\\\{MT4インストールフォルダ}\\\\metaeditor.exe\\" /compile:\\"$(FULL_CURRENT_PATH)\\" /log\\n{先程作成したバッチファイルのパス} \\"$(CURRENT_DIRECTORY)\\\\$(NAME_PART).log\\"\\n```\\n\\n{MT4インストールフォルダ}と{先程作成したバッチファイルのパス}は適宜変更してください。\\n\\nOKボタンを押すとコンパイルが実行されます。\\n\\n```bash {data-filename=コンソール表示内容}\\nResult: 0 errors, 0 warnings, 119 msec elapsed\\n```\\n\\n上記のようなメッセージがコンソールに出力されれば成功です。\\n\\nもう一度F6キーを押し、内容を保存します。\\nsave > 名前を入力 > save\\n\\n最後にショートカットの登録を行います。\\n設定 > ショートカット管理 > プラグインタブ\\nで先程保存した名前がありますので、お好みのショートカットを設定します。\\n\\n### シンタックスハイライト\\n\\n構文によって文字の色を変える設定をします。\\n\\n基本的には下記サイトを参考にさせて頂きました。\\nhttp://mt4ordersenderror.blog.fc2.com/blog-entry-12.html\\n\\n### コード補完\\n\\nMQL4でデフォルト定義されている関数等を最初の何文字かを入力することで自動的に補完するようにする設定をします。\\n\\n基本的には下記サイトを参考にさせて頂きました。\\nhttp://mt4ordersenderror.blog.fc2.com/blog-entry-13.html\\n\\n一部違うところがありましたので、その部分だけ記載いたします。\\n\\n作成した mql4.xml の配置場所は以下になります。\\n\\n```bash {data-filename=配置場所}\\nC:\\\\Program Files\\\\Notepad++\\\\autoCompletion\\n```\\n\\n### MQL4のヘルプ表示\\n\\nMQL4でデフォルト定義されている関数等にカーソルがある際に指定したショートカットキーを押すことでヘルプが出るようにします。\\n\\nまずはプラグインの **LanguageHelp** を導入します。\\n\\n次に設定です。\\nプラグイン > Language Help > Options... > Add...\\n\\n```bash {data-filename=設定内容}\\nName: mql4\\nExtension/file mask: *.mq4;*.mqh\\nExtended help file path: C:\\\\Users\\\\{ユーザ名}\\\\AppData\\\\Roaming\\\\MetaQuotes\\\\Terminal\\\\Help\\\\mql4.chm\\n```\\n\\n{ユーザ名}は適宜変更してください。\\n\\nこの段階でテストボタンを押下してヘルプが開くことを確認すると良いかと思います。\\n\\n最後にショートカットの登録を行います。\\n設定 > ショートカット管理 > プラグインタブ > Help（プラグイン列が LanguageHelp.dll になっているもの）\\n\\n### 関数リストの表示\\n\\n表示 > 関数リスト\\nをチェックした際に右側に表示されますが、最初は中身が空っぽになっているので、表示できるように設定をします。\\n\\n以下ファイルの編集を行います。\\n\\n```bash {data-filename=編集ファイル名}\\nC:\\\\Users\\\\{ユーザ名}\\\\AppData\\\\Roaming\\\\Notepad++/functionList.xml\\n```\\n\\n修正箇所は２箇所です。\\n\\nassociationMap タグ内に以下を追加する。\\n\\n```xml {data-filename=functionList.xml}\\n<association id=    \\"mql4_function\\"      userDefinedLangName=\\"MQL4\\"            />\\n```\\n\\nparsers タグ内に以下を追加する。\\n\\n```xml {data-filename=functionList.xml}\\n<parser\\n    displayName=\\"MQL4\\"\\n    id         =\\"mql4_function\\"\\n    commentExpr=\\"(?s:/\\\\*.*?\\\\*/)|(?m-s://.*?$)\\"\\n>\\n    <classRange\\n        mainExpr    =\\"^[\\\\t\\\\x20]*(class|struct)[\\\\t\\\\x20]+\\\\w+\\\\s*(final)?\\\\s*(:\\\\s*(public|protected|private)\\\\s+\\\\w+\\\\s*)?\\\\{\\"\\n        openSymbole =\\"\\\\{\\"\\n        closeSymbole=\\"\\\\}\\"\\n    >\\n        <className>\\n            <nameExpr expr=\\"(class|struct)[\\\\t\\\\x20]+\\\\w+\\" />\\n            <nameExpr expr=\\"[\\\\t\\\\x20]+\\\\w+\\" />\\n            <nameExpr expr=\\"\\\\w+\\" />\\n        </className>\\n        <function\\n            mainExpr=\\"^[\\\\t\\\\x20]*((static|const|virtual)\\\\s+)?(\\\\w+(\\\\s+\\\\w+)?(\\\\s+|(\\\\*|\\\\*\\\\*|&amp;)\\\\s+|\\\\s+(\\\\*|\\\\*\\\\*|&amp;)|\\\\s+(\\\\*|\\\\*\\\\*|&amp;)\\\\s+))?(\\\\w+\\\\s*::)?(?!(if|while|for|switch))[\\\\w~]+\\\\s*\\\\([^\\\\)\\\\(]*\\\\)(\\\\s*const\\\\s*)?(\\\\s*(final|override|final\\\\s*override|override\\\\s*final)\\\\s*)?[\\\\n\\\\s]*\\\\{\\"\\n        >\\n            <functionName>\\n                <funcNameExpr expr=\\"(?!(if|while|for|switch))[\\\\w~]+\\\\s*\\\\(\\" />\\n                <funcNameExpr expr=\\"(?!(if|while|for|switch))[\\\\w~]+\\" />\\n            </functionName>\\n        </function>\\n    </classRange>\\n    <function\\n        mainExpr=\\"^[\\\\t\\\\x20]*((static|const|virtual)\\\\s+)?\\\\w+(\\\\s+\\\\w+)?(\\\\s+|(\\\\*|\\\\*\\\\*|&amp;)\\\\s+|\\\\s+(\\\\*|\\\\*\\\\*|&amp;)|\\\\s+(\\\\*|\\\\*\\\\*|&amp;)\\\\s+)(\\\\w+\\\\s*::)?(?!(if|while|for))\\\\w+\\\\s*\\\\([^\\\\)\\\\(]*\\\\)(\\\\s*const\\\\s*)?[\\\\n\\\\s]*\\\\{\\"\\n    >\\n        <functionName>\\n            <nameExpr expr=\\"(?!(if|while|for))\\\\w+\\\\s*\\\\(\\" />\\n            <nameExpr expr=\\"(?!(if|while|for))\\\\w+\\" />\\n        </functionName>\\n        <className>\\n            <nameExpr expr=\\"\\\\w+(?=\\\\s*::)\\" />\\n        </className>\\n    </function>\\n</parser>\\n```\\n\\nNotepad++ を再起動すると関数リスト内に関数が表示されているかと思います。\\n\\nmqhファイル(MQL4の共通処理を集めたファイル)を自作している方は下記設定を行うことで同様に関数リストに表示されるようになります。\\n\\n言語 > ユーザー定義 > 言語を定義...\\n言語名をMQL4に変更します。\\n拡張子の入力欄に mq4 だけ入力されていると思いますが、以下に変更してください。\\n\\n```bash {data-filename=変更内容}\\nmq4 mqh\\n```\\n\\n### コードフォーマット\\n\\nインデント等をショートカットキーを押すことでフォーマットできるように設定します。\\n\\nまずはプラグインの **Indent By Fold** を導入します。\\n\\nそしてショートカットの登録を行います。\\n設定 > ショートカット管理 > プラグインタブ > Reindent File\\n\\n## 課題\\n\\n現時点での改善したいポイントを書いておきます。\\n\\n### ワークスペース上での指定ファイル非表示\\n\\n現状、ex4ファイルやlogファイルまで表示されてしまっていて、大変邪魔なので表示させないようにしたい。","bodyHtml":"<h2>はじめに</h2>\\n<p>MQL4を開発しやすい環境を整えたので、特につまずいた部分を備忘録として残しておきます。</p>\\n<p>環境は以下の通りです。</p>\\n<ul>\\n<li>Wintows10</li>\\n<li>MT4 build 1260</li>\\n<li>Notepad++ v7.8.5</li>\\n</ul>\\n<p>普段使用している <strong>VS Code</strong> や <strong>IntelliJ IDEA</strong> も試してみましたが、<strong>Notepad++</strong> が最も要求を満たすことができました。</p>\\n<h2>設定内容</h2>\\n<h3>コンパイル</h3>\\n<p>Notepad++ からショートカットキーでコンパイルをできるようにします。</p>\\n<p>まず以下内容のバッチファイルを作成してください。</p>\\n<pre><code class=\\"hljs\\">type %1</code></pre><p>引数で受け取ったファイルの情報を表示させるだけです。\\n※何故か Notepad++ のコマンド実行で type が認識されなかったのでバッチファイルを作成して実行させることにしています。</p>\\n<p>次にプラグインの <strong>NppExec</strong> を導入します。</p>\\n<p>導入した後、F6キーを押すとコマンドを入力する画面が出るので以下を入力します。</p>\\n<pre><code class=\\"hljs\\">NPP_SAVE\\n\\"C:\\\\{MT4インストールフォルダ}\\\\metaeditor.exe\\" /compile:\\"$(FULL_CURRENT_PATH)\\" /log\\n{先程作成したバッチファイルのパス} \\"$(CURRENT_DIRECTORY)\\\\$(NAME_PART).log\\"</code></pre><p>{MT4インストールフォルダ}と{先程作成したバッチファイルのパス}は適宜変更してください。</p>\\n<p>OKボタンを押すとコンパイルが実行されます。</p>\\n<pre><code class=\\"hljs\\">Result: 0 errors, 0 warnings, 119 msec elapsed</code></pre><p>上記のようなメッセージがコンソールに出力されれば成功です。</p>\\n<p>もう一度F6キーを押し、内容を保存します。\\nsave &gt; 名前を入力 &gt; save</p>\\n<p>最後にショートカットの登録を行います。\\n設定 &gt; ショートカット管理 &gt; プラグインタブ\\nで先程保存した名前がありますので、お好みのショートカットを設定します。</p>\\n<h3>シンタックスハイライト</h3>\\n<p>構文によって文字の色を変える設定をします。</p>\\n<p>基本的には下記サイトを参考にさせて頂きました。\\nhttp://mt4ordersenderror.blog.fc2.com/blog-entry-12.html</p>\\n<h3>コード補完</h3>\\n<p>MQL4でデフォルト定義されている関数等を最初の何文字かを入力することで自動的に補完するようにする設定をします。</p>\\n<p>基本的には下記サイトを参考にさせて頂きました。\\nhttp://mt4ordersenderror.blog.fc2.com/blog-entry-13.html</p>\\n<p>一部違うところがありましたので、その部分だけ記載いたします。</p>\\n<p>作成した mql4.xml の配置場所は以下になります。</p>\\n<pre><code class=\\"hljs\\">C:\\\\Program Files\\\\Notepad++\\\\autoCompletion</code></pre><h3>MQL4のヘルプ表示</h3>\\n<p>MQL4でデフォルト定義されている関数等にカーソルがある際に指定したショートカットキーを押すことでヘルプが出るようにします。</p>\\n<p>まずはプラグインの <strong>LanguageHelp</strong> を導入します。</p>\\n<p>次に設定です。\\nプラグイン &gt; Language Help &gt; Options... &gt; Add...</p>\\n<pre><code class=\\"hljs\\">Name: mql4\\nExtension/file mask: *.mq4;*.mqh\\nExtended help file path: C:\\\\Users\\\\{ユーザ名}\\\\AppData\\\\Roaming\\\\MetaQuotes\\\\Terminal\\\\Help\\\\mql4.chm</code></pre><p>{ユーザ名}は適宜変更してください。</p>\\n<p>この段階でテストボタンを押下してヘルプが開くことを確認すると良いかと思います。</p>\\n<p>最後にショートカットの登録を行います。\\n設定 &gt; ショートカット管理 &gt; プラグインタブ &gt; Help（プラグイン列が LanguageHelp.dll になっているもの）</p>\\n<h3>関数リストの表示</h3>\\n<p>表示 &gt; 関数リスト\\nをチェックした際に右側に表示されますが、最初は中身が空っぽになっているので、表示できるように設定をします。</p>\\n<p>以下ファイルの編集を行います。</p>\\n<pre><code class=\\"hljs\\">C:\\\\Users\\\\{ユーザ名}\\\\AppData\\\\Roaming\\\\Notepad++/functionList.xml</code></pre><p>修正箇所は２箇所です。</p>\\n<p>associationMap タグ内に以下を追加する。</p>\\n<pre><code class=\\"hljs\\">&lt;association id=    \\"mql4_function\\"      userDefinedLangName=\\"MQL4\\"            /&gt;</code></pre><p>parsers タグ内に以下を追加する。</p>\\n<pre><code class=\\"hljs\\">&lt;parser\\n    displayName=\\"MQL4\\"\\n    id         =\\"mql4_function\\"\\n    commentExpr=\\"(?s:/\\\\*.*?\\\\*/)|(?m-s://.*?$)\\"\\n&gt;\\n    &lt;classRange\\n        mainExpr    =\\"^[\\\\t\\\\x20]*(class|struct)[\\\\t\\\\x20]+\\\\w+\\\\s*(final)?\\\\s*(:\\\\s*(public|protected|private)\\\\s+\\\\w+\\\\s*)?\\\\{\\"\\n        openSymbole =\\"\\\\{\\"\\n        closeSymbole=\\"\\\\}\\"\\n    &gt;\\n        &lt;className&gt;\\n            &lt;nameExpr expr=\\"(class|struct)[\\\\t\\\\x20]+\\\\w+\\" /&gt;\\n            &lt;nameExpr expr=\\"[\\\\t\\\\x20]+\\\\w+\\" /&gt;\\n            &lt;nameExpr expr=\\"\\\\w+\\" /&gt;\\n        &lt;/className&gt;\\n        &lt;function\\n            mainExpr=\\"^[\\\\t\\\\x20]*((static|const|virtual)\\\\s+)?(\\\\w+(\\\\s+\\\\w+)?(\\\\s+|(\\\\*|\\\\*\\\\*|&amp;amp;)\\\\s+|\\\\s+(\\\\*|\\\\*\\\\*|&amp;amp;)|\\\\s+(\\\\*|\\\\*\\\\*|&amp;amp;)\\\\s+))?(\\\\w+\\\\s*::)?(?!(if|while|for|switch))[\\\\w~]+\\\\s*\\\\([^\\\\)\\\\(]*\\\\)(\\\\s*const\\\\s*)?(\\\\s*(final|override|final\\\\s*override|override\\\\s*final)\\\\s*)?[\\\\n\\\\s]*\\\\{\\"\\n        &gt;\\n            &lt;functionName&gt;\\n                &lt;funcNameExpr expr=\\"(?!(if|while|for|switch))[\\\\w~]+\\\\s*\\\\(\\" /&gt;\\n                &lt;funcNameExpr expr=\\"(?!(if|while|for|switch))[\\\\w~]+\\" /&gt;\\n            &lt;/functionName&gt;\\n        &lt;/function&gt;\\n    &lt;/classRange&gt;\\n    &lt;function\\n        mainExpr=\\"^[\\\\t\\\\x20]*((static|const|virtual)\\\\s+)?\\\\w+(\\\\s+\\\\w+)?(\\\\s+|(\\\\*|\\\\*\\\\*|&amp;amp;)\\\\s+|\\\\s+(\\\\*|\\\\*\\\\*|&amp;amp;)|\\\\s+(\\\\*|\\\\*\\\\*|&amp;amp;)\\\\s+)(\\\\w+\\\\s*::)?(?!(if|while|for))\\\\w+\\\\s*\\\\([^\\\\)\\\\(]*\\\\)(\\\\s*const\\\\s*)?[\\\\n\\\\s]*\\\\{\\"\\n    &gt;\\n        &lt;functionName&gt;\\n            &lt;nameExpr expr=\\"(?!(if|while|for))\\\\w+\\\\s*\\\\(\\" /&gt;\\n            &lt;nameExpr expr=\\"(?!(if|while|for))\\\\w+\\" /&gt;\\n        &lt;/functionName&gt;\\n        &lt;className&gt;\\n            &lt;nameExpr expr=\\"\\\\w+(?=\\\\s*::)\\" /&gt;\\n        &lt;/className&gt;\\n    &lt;/function&gt;\\n&lt;/parser&gt;</code></pre><p>Notepad++ を再起動すると関数リスト内に関数が表示されているかと思います。</p>\\n<p>mqhファイル(MQL4の共通処理を集めたファイル)を自作している方は下記設定を行うことで同様に関数リストに表示されるようになります。</p>\\n<p>言語 &gt; ユーザー定義 &gt; 言語を定義...\\n言語名をMQL4に変更します。\\n拡張子の入力欄に mq4 だけ入力されていると思いますが、以下に変更してください。</p>\\n<pre><code class=\\"hljs\\">mq4 mqh</code></pre><h3>コードフォーマット</h3>\\n<p>インデント等をショートカットキーを押すことでフォーマットできるように設定します。</p>\\n<p>まずはプラグインの <strong>Indent By Fold</strong> を導入します。</p>\\n<p>そしてショートカットの登録を行います。\\n設定 &gt; ショートカット管理 &gt; プラグインタブ &gt; Reindent File</p>\\n<h2>課題</h2>\\n<p>現時点での改善したいポイントを書いておきます。</p>\\n<h3>ワークスペース上での指定ファイル非表示</h3>\\n<p>現状、ex4ファイルやlogファイルまで表示されてしまっていて、大変邪魔なので表示させないようにしたい。</p>\\n","preview":"はじめに\\n\\nMQL4を開発しやすい環境を整えたので、特につまずいた部分を備忘録として残しておきます。\\n\\n環境は以下の通りです。\\n\\nWintows10\\nMT4 build 1260\\nNotepad++ v7.8.5\\n\\n普段使用している VS Code や IntelliJ IDEA も試してみましたが、Notepad++","dir":"src/contents/json","base":"2020-03-08_mql4-editor-settings.json","ext":".json","sourceBase":"2020-03-08_mql4-editor-settings.md","sourceExt":".md"}')},388:function(n){n.exports=JSON.parse('{"title":"フリーランスになるためにやったこと","description":"何かと準備に大変なフリーランス。フリーランスになるために僕が実施したことをご紹介いたします。","image":"/images/articles/thumbnails/cafe_nomad_man.png","category":"フリーランス","tags":["税金"],"created_at":"2021-06-19","updated_at":"2021-06-19","bodyContent":"フリーランスになる場合、やらなきゃいけないことが多くて大変そうですよね？\\nこれが億劫でなかなか踏み切れない方もいるかと思います。\\n新しくフリーランスになろうとしようとしている人のために\\n僕が実際に実施したことを記載していきます。\\n参考になりましたら幸いです。\\n\\n## 実施したこと\\n\\n- 開業届の提出（青色申告承認申請含む）\\n- 小規模企業共済の申し込み\\n- 年金切り替え\\n- 健康保険の手続き\\n- iDeCoの申し込み\\n- 名刺作成\\n- 仕事用の銀行口座とクレジットカードの用意\\n- 会計ソフト導入\\n- PC周りの備品調達\\n- 書類を管理するためのファイル調達\\n- お金に関わる勉強\\n\\n一つずつ詳しく見ていきましょう。\\n\\n## 開業届の提出（青色申告承認申請含む）\\n\\nこれがないと始まりません。\\n提出しなくてもフリーランスとしての活動はできるらしいですが、\\n税金に関して優遇されなくなってしまいますので提出しましょう。\\n\\nお住まいの管轄の税務署で手続きを行います。\\n\\n青色申告承認申請ですが、確定申告の方法が難しくなるようですが、\\n税制上のメリットがあるのでした方が良いかと思います。\\n\\n２つとも控えをもらえるので、大切に保管しておきましょう。\\n\\n## 小規模企業共済の申し込み\\n\\n金融機関で手続きを行います。\\n\\n全額控除される貯金みたいなものなので\\n余裕のある方はやってみてもいいかもしれませんが\\nデメリットも把握しておきましょう。\\n\\n最大月額7万円まで積み立てできます。\\n僕は7万円で手続きしましたが\\nお金に余裕がなくなったら金額を調整しようと思います。\\n\\nちなみに開業届の控えのコピーを持っていったら\\n原本じゃなきゃダメだと言われたので\\nこれから申し込みに行く方は注意してくださいw\\n\\n## 年金切り替え\\n\\n役所で手続きを行います。\\n\\n正社員は第2号被保険者でしたが\\nフリーランスは第1号被保険者になります。\\n\\n大きな違いは厚生年金がないことと\\n全額自己負担になることです。\\n（正社員は会社と折半）\\n\\nまた、月額400円で付加年金というものが付けられるのですが\\n払い込んだ月×200円が年金受取額として永続的に加算されるので\\n迷わず付けた方が良いです。\\n2年受給できれば元が取れてしまいます。\\n\\n## 健康保険の手続き\\n\\n会社で入っていた健康保険は失効してしまうので\\n自分で手続きをして発行しなくてはなりません。\\n\\nこちらは3通りあって、人によって何がお得かが変わってくるでしょう。\\n\\n- 国民健康保険\\n- 健康保険組合\\n- 任意継続\\n\\n国民健康保険は最も高いと言われているようで\\n実際に試算してみたら確かに高かったです。\\n\\n残る選択肢として2つありますが\\n健康保険組合に入る場合は職種が限られるそうで\\nエンジニアの場合は「文芸美術国民健康保険組合」というものに\\n入れるようです。\\n保険料はどれだけ収入が多くなっても固定なので\\n多くの方が一番安くなるのではないでしょうか。\\nただし、扶養家族がいる場合はその分\\n保険料が増えてしまうので注意が必要です。\\n\\n一方、任意継続は会社員時代の健康保険をそのまま\\n最大2年間継続できるというものです。\\n保険料については月収によって変わるので何とも言えませんが\\n扶養の概念があるので扶養家族がいる場合は\\nこちらの方が安くなる可能性があります。\\n\\n僕は扶養家族が1人いるので任意継続を選択しました。\\n\\n## iDeCoの申し込み\\n\\n僕は企業型DCをやっていたのでそれをiDeCoに移管させる手続きが必要でした。\\n\\nちなみにiDeCoは積立額全額が控除される投資信託のようなもので\\n上でご紹介した小規模企業共済と同様\\nお金に余裕がある方はやってみても良いかもしれません。\\n\\nフリーランスの場合は最大月額68000円まで積み立て可能。\\nただし、付加年金を付けている場合は67000円まで。\\n\\n僕は67000円積み立てています。\\n\\nデメリットとしては原則60歳になるまでは受け取ることができないことです。\\n\\n## 名刺作成\\n\\nフリーランスでも何かと名刺が必要になるかと思いますので作成しておきました。\\n\\n僕は[デコプチ](https://apps.apple.com/jp/app/%E3%83%87%E3%82%B3%E3%83%97%E3%83%81/id712265962)というiPhoneのアプリで作成しました。\\n\\n2580円で100枚作ることができ\\n品質もなかなか良かったので満足しております。\\n\\n## 仕事用の銀行口座とクレジットカードの用意\\n\\n僕はもともと銀行口座とクレジットカードを余分に持っていたので\\nこれを仕事用に使おうと決めただけです。\\n\\nでも、結局はプライベート用の口座やクレジットカードを使って\\n経費を使ったりしてしまっています。\\n\\nその場合は「事業主借」という科目で仕訳をする必要があるのですが\\n事業主借という科目を多用することで\\n税務署からチェックが入ってしまうことが考えられるそうです。\\n\\n理想を言ってしまえば仕事用とプライベート用で\\n支払いを完全に分けてしまうのが良いですが\\n現実的には難しそうです。\\n\\nここら辺はやっていくうちに自分なりのベストを模索しようと思います。\\n\\n## 会計ソフト導入\\n\\n僕は[弥生の青色申告オンライン](https://www.yayoi-kk.co.jp/products/aoiro_ol/index.html)を使用しております。\\n\\n選定理由はクラウド型サービスっていうのと1年間無料ってところです。\\n\\n慣れてないということもあるかも知れませんが若干の使いづらさは感じます。\\n\\n## PC周りの備品調達\\n\\nエンジニアとしての開発案件やFXトレードをしやすくなるような環境を目指しました。\\n\\n- L字型デスク\\n- デスクトップPC1台\\n- ノートPC1台\\n- モニター3台\\n- KVMスイッチ\\n- キーボード・マウス\\n- コードを纏めるためのグッズ\\n\\nこの環境でシステム開発の傍らでチャートを定期的に監視しております。\\n詳細は別記事にでも書こうと思います。\\n\\n## 書類を管理するためのファイル調達\\n\\n開業届の控えなどの大切な書類や\\n日々発生するレシート・領収書などを\\n保管しておくためのファイルを購入しました。\\n\\n特に確定申告に使用する資料は\\n保管期間が定められているものがあるので\\nしっかりと保管できるようにしておいた方が良いかと思います。\\n\\n## お金に関わる勉強\\n\\n最後にお金に関わる勉強です。\\n\\nインターネットで調べたりしたのもありますが\\n書籍を購入して勉強したりしています。\\n\\nフリーランスになると税金も自分で処理しなくてはならないし\\n将来の資産形成も正社員と比べると不利になりがちです。\\n\\n特に年金に関しては正社員が2階建てと言われるように\\n国民年金と厚生年金がありますが\\n対策をしていないフリーランスは1階建てで国民年金しかありません。\\n\\nここに付加年金やiDeCoなどで積み立てておくと\\n税金対策と資産形成が同時にできるので\\nお金に関してはそれなりに優位になれるかと思います。\\n\\n特に付加年金は書籍で勉強をして初めて知ったので\\nそれだけでも勉強した価値があったかと思います。\\n\\n実際に勉強した書籍をご紹介しますね。\\n\\n<div class=\\"kaerebalink-box\\"><div class=\\"kaerebalink-image\\"><a href=\\"https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_20210619134843055?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fcf3acb1e07aa2685d4e703b2b7ccd285%2F&m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fcf3acb1e07aa2685d4e703b2b7ccd285%2F\\" target=\\"_blank\\" ><img src=\\"https://thumbnail.image.rakuten.co.jp/ran/img/2001/0009/784/532/415/501/20010009784532415501_1.jpg?_ex=320x320\\" style=\\"border: none;\\" /></a></div><div class=\\"kaerebalink-info\\"><div class=\\"kaerebalink-name\\"><a href=\\"https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_20210619134843055?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fcf3acb1e07aa2685d4e703b2b7ccd285%2F&m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fcf3acb1e07aa2685d4e703b2b7ccd285%2F\\" target=\\"_blank\\" >うかる！ＦＰ３級速攻テキスト  ２０２１-２０２２年版 /日経ＢＰＭ（日本経済新聞出版本部）/フィナンシャルバンクインスティチュート</a></div><div class=\\"kaerebalink-powered-date\\">posted with <a href=\\"https://kaereba.com\\" rel=\\"nofollow\\" target=\\"_blank\\">カエレバ</a></div><div class=\\"kaerebalink-detail\\"></div><div class=\\"kaerebalink-rank\\"></div></div><div class=\\"kaerebalink-footer\\" style=\\"\\"><div class=\\"shoplinkrakuten\\" style=\\"display:inline; padding-right:5px;\\"><a href=\\"https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_20210619134843055?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fcf3acb1e07aa2685d4e703b2b7ccd285%2F&m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fcf3acb1e07aa2685d4e703b2b7ccd285%2F\\" target=\\"_blank\\" >楽天市場</a></div><div class=\\"shoplinkamazon\\" style=\\"display:inline; padding-right:5px;\\"><a href=\\"https://www.amazon.co.jp/gp/search?keywords=FP%20%EF%BC%93%E7%B4%9A%E3%80%80%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88&__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&tag=kz62-22\\" target=\\"_blank\\" >Amazon</a></div></div><div class=\\"kaerebalink-footer\\" style=\\"clear: left\\"></div></div>\\n\\n<div class=\\"kaerebalink-box\\"><div class=\\"kaerebalink-image\\"><a href=\\"https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106191349423218?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2F1c497821eeccc6f97970f752a55a581b%2F&m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2F1c497821eeccc6f97970f752a55a581b%2F\\" target=\\"_blank\\" ><img src=\\"https://thumbnail.image.rakuten.co.jp/ran/img/2001/0009/784/534/056/795/20010009784534056795_1.jpg?_ex=320x320\\" style=\\"border: none;\\" /></a></div><div class=\\"kaerebalink-info\\"><div class=\\"kaerebalink-name\\"><a href=\\"https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106191349423218?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2F1c497821eeccc6f97970f752a55a581b%2F&m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2F1c497821eeccc6f97970f752a55a581b%2F\\" target=\\"_blank\\" >簿記がわかってしまう魔法の書   /日本実業出版社/小沢浩</a></div><div class=\\"kaerebalink-powered-date\\">posted with <a href=\\"https://kaereba.com\\" rel=\\"nofollow\\" target=\\"_blank\\">カエレバ</a></div><div class=\\"kaerebalink-detail\\"></div><div class=\\"kaerebalink-rank\\"></div></div><div class=\\"kaerebalink-footer\\" style=\\"\\"><div class=\\"shoplinkrakuten\\" style=\\"display:inline; padding-right:5px;\\"><a href=\\"https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106191349423218?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2F1c497821eeccc6f97970f752a55a581b%2F&m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2F1c497821eeccc6f97970f752a55a581b%2F\\" target=\\"_blank\\" >楽天市場</a></div><div class=\\"shoplinkamazon\\" style=\\"display:inline; padding-right:5px;\\"><a href=\\"https://www.amazon.co.jp/gp/search?keywords=%E7%B0%BF%E8%A8%98%E3%81%8C%E3%82%8F%E3%81%8B%E3%81%A3%E3%81%A6%E3%81%97%E3%81%BE%E3%81%86&__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&tag=kz62-22\\" target=\\"_blank\\" >Amazon</a></div></div><div class=\\"kaerebalink-footer\\" style=\\"clear: left\\"></div></div>\\n\\n簿記の勉強は確定申告のために必要ですし\\nFP3級は投資・保険・税金等のお金に関係する基礎知識を\\n満遍なく勉強できるのでおすすめです。\\n\\n## まとめ\\n\\n正社員からフリーランスになるのって結構勇気が要りますよね。\\n\\n僕もフリーランスになることを視野に入れたのが3年くらい前になるのですが\\nなかなか踏み切れませんでした。\\n\\nフリーランスは実力がものを言う世界なので\\nやっていけるかどうか心配でしたし\\n税金関連も全く知識がありませんでしたからね。\\n\\nもちろんなってしまった今でも将来どうなるのかは不安ですが\\nそれは正社員でも同じかと思います。\\n\\n特に今の世の中は終身雇用が崩壊するとか言われていたりして\\n現に特に業績が悪くない企業であってもリストラしていたりしますからね。\\n\\nこれからフリーランスになろうとしている方だけではなく\\nすでにフリーランスになっている方にも参考になれば幸いです。\\n\\n最後までお目通し頂きありがとうございました。","bodyHtml":"<p>フリーランスになる場合、やらなきゃいけないことが多くて大変そうですよね？\\nこれが億劫でなかなか踏み切れない方もいるかと思います。\\n新しくフリーランスになろうとしようとしている人のために\\n僕が実際に実施したことを記載していきます。\\n参考になりましたら幸いです。</p>\\n<h2>実施したこと</h2>\\n<ul>\\n<li>開業届の提出（青色申告承認申請含む）</li>\\n<li>小規模企業共済の申し込み</li>\\n<li>年金切り替え</li>\\n<li>健康保険の手続き</li>\\n<li>iDeCoの申し込み</li>\\n<li>名刺作成</li>\\n<li>仕事用の銀行口座とクレジットカードの用意</li>\\n<li>会計ソフト導入</li>\\n<li>PC周りの備品調達</li>\\n<li>書類を管理するためのファイル調達</li>\\n<li>お金に関わる勉強</li>\\n</ul>\\n<p>一つずつ詳しく見ていきましょう。</p>\\n<h2>開業届の提出（青色申告承認申請含む）</h2>\\n<p>これがないと始まりません。\\n提出しなくてもフリーランスとしての活動はできるらしいですが、\\n税金に関して優遇されなくなってしまいますので提出しましょう。</p>\\n<p>お住まいの管轄の税務署で手続きを行います。</p>\\n<p>青色申告承認申請ですが、確定申告の方法が難しくなるようですが、\\n税制上のメリットがあるのでした方が良いかと思います。</p>\\n<p>２つとも控えをもらえるので、大切に保管しておきましょう。</p>\\n<h2>小規模企業共済の申し込み</h2>\\n<p>金融機関で手続きを行います。</p>\\n<p>全額控除される貯金みたいなものなので\\n余裕のある方はやってみてもいいかもしれませんが\\nデメリットも把握しておきましょう。</p>\\n<p>最大月額7万円まで積み立てできます。\\n僕は7万円で手続きしましたが\\nお金に余裕がなくなったら金額を調整しようと思います。</p>\\n<p>ちなみに開業届の控えのコピーを持っていったら\\n原本じゃなきゃダメだと言われたので\\nこれから申し込みに行く方は注意してくださいw</p>\\n<h2>年金切り替え</h2>\\n<p>役所で手続きを行います。</p>\\n<p>正社員は第2号被保険者でしたが\\nフリーランスは第1号被保険者になります。</p>\\n<p>大きな違いは厚生年金がないことと\\n全額自己負担になることです。\\n（正社員は会社と折半）</p>\\n<p>また、月額400円で付加年金というものが付けられるのですが\\n払い込んだ月×200円が年金受取額として永続的に加算されるので\\n迷わず付けた方が良いです。\\n2年受給できれば元が取れてしまいます。</p>\\n<h2>健康保険の手続き</h2>\\n<p>会社で入っていた健康保険は失効してしまうので\\n自分で手続きをして発行しなくてはなりません。</p>\\n<p>こちらは3通りあって、人によって何がお得かが変わってくるでしょう。</p>\\n<ul>\\n<li>国民健康保険</li>\\n<li>健康保険組合</li>\\n<li>任意継続</li>\\n</ul>\\n<p>国民健康保険は最も高いと言われているようで\\n実際に試算してみたら確かに高かったです。</p>\\n<p>残る選択肢として2つありますが\\n健康保険組合に入る場合は職種が限られるそうで\\nエンジニアの場合は「文芸美術国民健康保険組合」というものに\\n入れるようです。\\n保険料はどれだけ収入が多くなっても固定なので\\n多くの方が一番安くなるのではないでしょうか。\\nただし、扶養家族がいる場合はその分\\n保険料が増えてしまうので注意が必要です。</p>\\n<p>一方、任意継続は会社員時代の健康保険をそのまま\\n最大2年間継続できるというものです。\\n保険料については月収によって変わるので何とも言えませんが\\n扶養の概念があるので扶養家族がいる場合は\\nこちらの方が安くなる可能性があります。</p>\\n<p>僕は扶養家族が1人いるので任意継続を選択しました。</p>\\n<h2>iDeCoの申し込み</h2>\\n<p>僕は企業型DCをやっていたのでそれをiDeCoに移管させる手続きが必要でした。</p>\\n<p>ちなみにiDeCoは積立額全額が控除される投資信託のようなもので\\n上でご紹介した小規模企業共済と同様\\nお金に余裕がある方はやってみても良いかもしれません。</p>\\n<p>フリーランスの場合は最大月額68000円まで積み立て可能。\\nただし、付加年金を付けている場合は67000円まで。</p>\\n<p>僕は67000円積み立てています。</p>\\n<p>デメリットとしては原則60歳になるまでは受け取ることができないことです。</p>\\n<h2>名刺作成</h2>\\n<p>フリーランスでも何かと名刺が必要になるかと思いますので作成しておきました。</p>\\n<p>僕は<a href=\\"https://apps.apple.com/jp/app/%E3%83%87%E3%82%B3%E3%83%97%E3%83%81/id712265962\\">デコプチ</a>というiPhoneのアプリで作成しました。</p>\\n<p>2580円で100枚作ることができ\\n品質もなかなか良かったので満足しております。</p>\\n<h2>仕事用の銀行口座とクレジットカードの用意</h2>\\n<p>僕はもともと銀行口座とクレジットカードを余分に持っていたので\\nこれを仕事用に使おうと決めただけです。</p>\\n<p>でも、結局はプライベート用の口座やクレジットカードを使って\\n経費を使ったりしてしまっています。</p>\\n<p>その場合は「事業主借」という科目で仕訳をする必要があるのですが\\n事業主借という科目を多用することで\\n税務署からチェックが入ってしまうことが考えられるそうです。</p>\\n<p>理想を言ってしまえば仕事用とプライベート用で\\n支払いを完全に分けてしまうのが良いですが\\n現実的には難しそうです。</p>\\n<p>ここら辺はやっていくうちに自分なりのベストを模索しようと思います。</p>\\n<h2>会計ソフト導入</h2>\\n<p>僕は<a href=\\"https://www.yayoi-kk.co.jp/products/aoiro_ol/index.html\\">弥生の青色申告オンライン</a>を使用しております。</p>\\n<p>選定理由はクラウド型サービスっていうのと1年間無料ってところです。</p>\\n<p>慣れてないということもあるかも知れませんが若干の使いづらさは感じます。</p>\\n<h2>PC周りの備品調達</h2>\\n<p>エンジニアとしての開発案件やFXトレードをしやすくなるような環境を目指しました。</p>\\n<ul>\\n<li>L字型デスク</li>\\n<li>デスクトップPC1台</li>\\n<li>ノートPC1台</li>\\n<li>モニター3台</li>\\n<li>KVMスイッチ</li>\\n<li>キーボード・マウス</li>\\n<li>コードを纏めるためのグッズ</li>\\n</ul>\\n<p>この環境でシステム開発の傍らでチャートを定期的に監視しております。\\n詳細は別記事にでも書こうと思います。</p>\\n<h2>書類を管理するためのファイル調達</h2>\\n<p>開業届の控えなどの大切な書類や\\n日々発生するレシート・領収書などを\\n保管しておくためのファイルを購入しました。</p>\\n<p>特に確定申告に使用する資料は\\n保管期間が定められているものがあるので\\nしっかりと保管できるようにしておいた方が良いかと思います。</p>\\n<h2>お金に関わる勉強</h2>\\n<p>最後にお金に関わる勉強です。</p>\\n<p>インターネットで調べたりしたのもありますが\\n書籍を購入して勉強したりしています。</p>\\n<p>フリーランスになると税金も自分で処理しなくてはならないし\\n将来の資産形成も正社員と比べると不利になりがちです。</p>\\n<p>特に年金に関しては正社員が2階建てと言われるように\\n国民年金と厚生年金がありますが\\n対策をしていないフリーランスは1階建てで国民年金しかありません。</p>\\n<p>ここに付加年金やiDeCoなどで積み立てておくと\\n税金対策と資産形成が同時にできるので\\nお金に関してはそれなりに優位になれるかと思います。</p>\\n<p>特に付加年金は書籍で勉強をして初めて知ったので\\nそれだけでも勉強した価値があったかと思います。</p>\\n<p>実際に勉強した書籍をご紹介しますね。</p>\\n<p>&lt;div class=&quot;kaerebalink-box&quot;&gt;&lt;div class=&quot;kaerebalink-image&quot;&gt;&lt;a href=&quot;https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_20210619134843055?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fcf3acb1e07aa2685d4e703b2b7ccd285%2F&amp;m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fcf3acb1e07aa2685d4e703b2b7ccd285%2F&quot; target=&quot;_blank&quot; &gt;&lt;img src=&quot;https://thumbnail.image.rakuten.co.jp/ran/img/2001/0009/784/532/415/501/20010009784532415501_1.jpg?_ex=320x320&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-info&quot;&gt;&lt;div class=&quot;kaerebalink-name&quot;&gt;&lt;a href=&quot;https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_20210619134843055?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fcf3acb1e07aa2685d4e703b2b7ccd285%2F&amp;m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fcf3acb1e07aa2685d4e703b2b7ccd285%2F&quot; target=&quot;_blank&quot; &gt;うかる！ＦＰ３級速攻テキスト  ２０２１-２０２２年版 /日経ＢＰＭ（日本経済新聞出版本部）/フィナンシャルバンクインスティチュート&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-powered-date&quot;&gt;posted with &lt;a href=&quot;https://kaereba.com&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;カエレバ&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-detail&quot;&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-rank&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-footer&quot; style=&quot;&quot;&gt;&lt;div class=&quot;shoplinkrakuten&quot; style=&quot;display:inline; padding-right:5px;&quot;&gt;&lt;a href=&quot;https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_20210619134843055?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fcf3acb1e07aa2685d4e703b2b7ccd285%2F&amp;m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fcf3acb1e07aa2685d4e703b2b7ccd285%2F&quot; target=&quot;_blank&quot; &gt;楽天市場&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;shoplinkamazon&quot; style=&quot;display:inline; padding-right:5px;&quot;&gt;&lt;a href=&quot;https://www.amazon.co.jp/gp/search?keywords=FP%20%EF%BC%93%E7%B4%9A%E3%80%80%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88&amp;__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;tag=kz62-22&quot; target=&quot;_blank&quot; &gt;Amazon&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-footer&quot; style=&quot;clear: left&quot;&gt;&lt;/div&gt;&lt;/div&gt;</p>\\n<p>&lt;div class=&quot;kaerebalink-box&quot;&gt;&lt;div class=&quot;kaerebalink-image&quot;&gt;&lt;a href=&quot;https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106191349423218?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2F1c497821eeccc6f97970f752a55a581b%2F&amp;m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2F1c497821eeccc6f97970f752a55a581b%2F&quot; target=&quot;_blank&quot; &gt;&lt;img src=&quot;https://thumbnail.image.rakuten.co.jp/ran/img/2001/0009/784/534/056/795/20010009784534056795_1.jpg?_ex=320x320&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-info&quot;&gt;&lt;div class=&quot;kaerebalink-name&quot;&gt;&lt;a href=&quot;https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106191349423218?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2F1c497821eeccc6f97970f752a55a581b%2F&amp;m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2F1c497821eeccc6f97970f752a55a581b%2F&quot; target=&quot;_blank&quot; &gt;簿記がわかってしまう魔法の書   /日本実業出版社/小沢浩&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-powered-date&quot;&gt;posted with &lt;a href=&quot;https://kaereba.com&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;カエレバ&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-detail&quot;&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-rank&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-footer&quot; style=&quot;&quot;&gt;&lt;div class=&quot;shoplinkrakuten&quot; style=&quot;display:inline; padding-right:5px;&quot;&gt;&lt;a href=&quot;https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106191349423218?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2F1c497821eeccc6f97970f752a55a581b%2F&amp;m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2F1c497821eeccc6f97970f752a55a581b%2F&quot; target=&quot;_blank&quot; &gt;楽天市場&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;shoplinkamazon&quot; style=&quot;display:inline; padding-right:5px;&quot;&gt;&lt;a href=&quot;https://www.amazon.co.jp/gp/search?keywords=%E7%B0%BF%E8%A8%98%E3%81%8C%E3%82%8F%E3%81%8B%E3%81%A3%E3%81%A6%E3%81%97%E3%81%BE%E3%81%86&amp;__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;tag=kz62-22&quot; target=&quot;_blank&quot; &gt;Amazon&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-footer&quot; style=&quot;clear: left&quot;&gt;&lt;/div&gt;&lt;/div&gt;</p>\\n<p>簿記の勉強は確定申告のために必要ですし\\nFP3級は投資・保険・税金等のお金に関係する基礎知識を\\n満遍なく勉強できるのでおすすめです。</p>\\n<h2>まとめ</h2>\\n<p>正社員からフリーランスになるのって結構勇気が要りますよね。</p>\\n<p>僕もフリーランスになることを視野に入れたのが3年くらい前になるのですが\\nなかなか踏み切れませんでした。</p>\\n<p>フリーランスは実力がものを言う世界なので\\nやっていけるかどうか心配でしたし\\n税金関連も全く知識がありませんでしたからね。</p>\\n<p>もちろんなってしまった今でも将来どうなるのかは不安ですが\\nそれは正社員でも同じかと思います。</p>\\n<p>特に今の世の中は終身雇用が崩壊するとか言われていたりして\\n現に特に業績が悪くない企業であってもリストラしていたりしますからね。</p>\\n<p>これからフリーランスになろうとしている方だけではなく\\nすでにフリーランスになっている方にも参考になれば幸いです。</p>\\n<p>最後までお目通し頂きありがとうございました。</p>\\n","preview":"","dir":"src/contents/json","base":"2021-06-19_what-i-did-to-be-freelance.json","ext":".json","sourceBase":"2021-06-19_what-i-did-to-be-freelance.md","sourceExt":".md"}')},389:function(n){n.exports=JSON.parse('{"title":"寝ながら動画鑑賞をする環境を快適にする【タブレットアームスタンド】","description":"寝ながら動画鑑賞をする環境を快適にしたアイテムをご紹介します。","image":"/images/articles/thumbnails/online_school_boy.png","category":"学習","tags":["iPad","YouTube"],"created_at":"2021-06-20","updated_at":"2021-06-20","bodyContent":"睡眠にはあまりよろしくないと言われていますが\\n寝る前に動画鑑賞をしている方は多いかと思います。\\n\\n僕もその一人で、毎日寝る前にビジネス系のYoutubeを\\n見て勉強しているのですが手が疲れることが悩みでした。\\n\\n今回はその悩みを解消したアイテムをご紹介します。\\n\\n## 使用している端末\\n\\nまず僕が使用している端末ですが\\nスマホは iPhone SE2 を使用していて\\nタブレットは iPad Air4 を使用しております。\\n\\n今までは iPhone SE2 で動画鑑賞をしていたのですが\\n今回ご紹介するアイテムを購入してからは iPad Air4 で鑑賞しております。\\n\\nちなみに僕はブルーの一番安いスペックのものを使用しております。\\n容量に関しては使用スタイルによって変わってくると思いますが\\n動画鑑賞だけなら充分だと思います。\\n<div class=\\"kaerebalink-box\\"><div class=\\"kaerebalink-image\\"><a href=\\"https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106200959247144?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2F8ea734a115aa94d1eabbd255cca7f781%2F&m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2F8ea734a115aa94d1eabbd255cca7f781%2F\\" target=\\"_blank\\" ><img src=\\"https://thumbnail.image.rakuten.co.jp/ran/img/1001/0004/549/995/164/626/10010004549995164626_1.jpg?_ex=320x320\\" style=\\"border: none;\\" /></a></div><div class=\\"kaerebalink-info\\"><div class=\\"kaerebalink-name\\"><a href=\\"https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106200959247144?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2F8ea734a115aa94d1eabbd255cca7f781%2F&m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2F8ea734a115aa94d1eabbd255cca7f781%2F\\" target=\\"_blank\\" >アップル iPadAir 第4世代 WiFi 64GB スカイブルー</a></div><div class=\\"kaerebalink-powered-date\\">posted with <a href=\\"https://kaereba.com\\" rel=\\"nofollow\\" target=\\"_blank\\">カエレバ</a></div><div class=\\"kaerebalink-detail\\"></div><div class=\\"kaerebalink-rank\\"></div></div><div class=\\"kaerebalink-footer\\" style=\\"\\"><div class=\\"shoplinkrakuten\\" style=\\"display:inline; padding-right:5px;\\"><a href=\\"https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106200959247144?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2F8ea734a115aa94d1eabbd255cca7f781%2F&m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2F8ea734a115aa94d1eabbd255cca7f781%2F\\" target=\\"_blank\\" >楽天市場</a></div><div class=\\"shoplinkamazon\\" style=\\"display:inline; padding-right:5px;\\"><a href=\\"https://www.amazon.co.jp/gp/search?keywords=ipad&__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&tag=kz62-22\\" target=\\"_blank\\" >Amazon</a></div></div><div class=\\"kaerebalink-footer\\" style=\\"clear: left\\"></div></div>\\n\\n## 悩みを解消したアイテム\\n\\nさて、悩みを解消したアイテムは何かというと\\n記事タイトルにもありますが「タブレットアームスタンド」です。\\n\\n<div class=\\"kaerebalink-box\\"> <div class=\\"kaerebalink-image\\"><a href=\\"https://amzn.to/3vJ2wO7\\" target=\\"_blank\\"><img src=\\"//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B07HMJ1JJQ&Format=_SL250_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=kz62-22&language=ja_JP\\"></a></div><div class=\\"kaerebalink-info\\"> <div class=\\"kaerebalink-name\\"><a href=\\"https://amzn.to/3vJ2wO7\\" target=\\"_blank\\">【最新進化型】タブレット スタンド タブレット アーム スタンド 横/縱き 寝ながら iPad/ iPhone アーム スタンド or ホルダー ベッド、デスク、台所タブレットスタンド 4.5〜12.9インチ for iPad pro 、iPad 、Kindle、android surface、Fire HD8、N-Switch、iPhone XR、iPhone XS多機種対応 黒…【日本語取扱説明書】 (ブラック)</a></div><div class=\\"kaerebalink-powered-date\\">posted with <a href=\\"https://kaereba.com\\" rel=\\"nofollow\\" target=\\"_blank\\">カエレバ</a></div><div class=\\"kaerebalink-detail\\"></div><div class=\\"kaerebalink-rank\\"></div></div><div class=\\"kaerebalink-footer\\" style=\\"\\"> <div class=\\"shoplinkamazon\\" style=\\"display:inline; padding-right:5px;\\"><a href=\\"https://amzn.to/3vJ2wO7\\" target=\\"_blank\\">Amazon</a></div></div><div class=\\"kaerebalink-footer\\" style=\\"clear: left\\"></div></div>\\n\\nこちらの製品の良かった点は3つあります。\\n\\n- アームを固定する部品が水平にも垂直にも付けられる点\\n- iPad Air4 にケースを付けていても使用できる点\\n- iPhone SE2 でも使用できる点\\n\\n要するに、場所を選ばず、端末の大きさもある程度の幅を許容できると言うことです。\\n\\nちなみに、iPad Air4 のケースはこちらを使用しております。\\n\\n<div class=\\"kaerebalink-box\\"><div class=\\"kaerebalink-image\\"><a href=\\"https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106201046095734?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fa95b5355dd9734e1983e337e7c1c6fb5%2F&m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fa95b5355dd9734e1983e337e7c1c6fb5%2F\\" target=\\"_blank\\" ><img src=\\"https://thumbnail.image.rakuten.co.jp/ran/img/1001/0004/570/047/544/516/10010004570047544516_1.jpg?_ex=320x320\\" style=\\"border: none;\\" /></a></div><div class=\\"kaerebalink-info\\"><div class=\\"kaerebalink-name\\"><a href=\\"https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106201046095734?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fa95b5355dd9734e1983e337e7c1c6fb5%2F&m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fa95b5355dd9734e1983e337e7c1c6fb5%2F\\" target=\\"_blank\\" >ESR 2020 iPad Air 4用ウルトラスリム Smart Folio ソフトケース ネイビーブルー ES20451</a></div><div class=\\"kaerebalink-powered-date\\">posted with <a href=\\"https://kaereba.com\\" rel=\\"nofollow\\" target=\\"_blank\\">カエレバ</a></div><div class=\\"kaerebalink-detail\\"></div><div class=\\"kaerebalink-rank\\"></div></div><div class=\\"kaerebalink-footer\\" style=\\"\\"><div class=\\"shoplinkrakuten\\" style=\\"display:inline; padding-right:5px;\\"><a href=\\"https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106201046095734?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fa95b5355dd9734e1983e337e7c1c6fb5%2F&m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fa95b5355dd9734e1983e337e7c1c6fb5%2F\\" target=\\"_blank\\" >楽天市場</a></div><div class=\\"shoplinkamazon\\" style=\\"display:inline; padding-right:5px;\\"><a href=\\"https://www.amazon.co.jp/gp/search?keywords=ipad%20air4%20%E3%82%B1%E3%83%BC%E3%82%B9%20esr&__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&tag=kz62-22\\" target=\\"_blank\\" >Amazon</a></div></div><div class=\\"kaerebalink-footer\\" style=\\"clear: left\\"></div></div>\\n\\n## まとめ\\n\\n寝そべっている時に動画を見る場合、通常であれば腕で端末を固定するしかありません。\\n\\niPhone 等のスマホであれば腕が疲れるくらいで済みますが\\niPad 等のタブレットの場合は腕だけで固定するのはなかなか難しいのではないでしょうか。\\n\\n今回ご紹介させて頂いたアイテムであれば3,000円くらいで\\n快適な動画鑑賞環境を作ることができるので\\n是非お試し頂ければと思います。\\n\\n以上、この記事がご参考になれば幸いです。","bodyHtml":"<p>睡眠にはあまりよろしくないと言われていますが\\n寝る前に動画鑑賞をしている方は多いかと思います。</p>\\n<p>僕もその一人で、毎日寝る前にビジネス系のYoutubeを\\n見て勉強しているのですが手が疲れることが悩みでした。</p>\\n<p>今回はその悩みを解消したアイテムをご紹介します。</p>\\n<h2>使用している端末</h2>\\n<p>まず僕が使用している端末ですが\\nスマホは iPhone SE2 を使用していて\\nタブレットは iPad Air4 を使用しております。</p>\\n<p>今までは iPhone SE2 で動画鑑賞をしていたのですが\\n今回ご紹介するアイテムを購入してからは iPad Air4 で鑑賞しております。</p>\\n<p>ちなみに僕はブルーの一番安いスペックのものを使用しております。\\n容量に関しては使用スタイルによって変わってくると思いますが\\n動画鑑賞だけなら充分だと思います。\\n&lt;div class=&quot;kaerebalink-box&quot;&gt;&lt;div class=&quot;kaerebalink-image&quot;&gt;&lt;a href=&quot;https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106200959247144?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2F8ea734a115aa94d1eabbd255cca7f781%2F&amp;m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2F8ea734a115aa94d1eabbd255cca7f781%2F&quot; target=&quot;_blank&quot; &gt;&lt;img src=&quot;https://thumbnail.image.rakuten.co.jp/ran/img/1001/0004/549/995/164/626/10010004549995164626_1.jpg?_ex=320x320&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-info&quot;&gt;&lt;div class=&quot;kaerebalink-name&quot;&gt;&lt;a href=&quot;https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106200959247144?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2F8ea734a115aa94d1eabbd255cca7f781%2F&amp;m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2F8ea734a115aa94d1eabbd255cca7f781%2F&quot; target=&quot;_blank&quot; &gt;アップル iPadAir 第4世代 WiFi 64GB スカイブルー&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-powered-date&quot;&gt;posted with &lt;a href=&quot;https://kaereba.com&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;カエレバ&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-detail&quot;&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-rank&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-footer&quot; style=&quot;&quot;&gt;&lt;div class=&quot;shoplinkrakuten&quot; style=&quot;display:inline; padding-right:5px;&quot;&gt;&lt;a href=&quot;https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106200959247144?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2F8ea734a115aa94d1eabbd255cca7f781%2F&amp;m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2F8ea734a115aa94d1eabbd255cca7f781%2F&quot; target=&quot;_blank&quot; &gt;楽天市場&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;shoplinkamazon&quot; style=&quot;display:inline; padding-right:5px;&quot;&gt;&lt;a href=&quot;https://www.amazon.co.jp/gp/search?keywords=ipad&amp;__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;tag=kz62-22&quot; target=&quot;_blank&quot; &gt;Amazon&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-footer&quot; style=&quot;clear: left&quot;&gt;&lt;/div&gt;&lt;/div&gt;</p>\\n<h2>悩みを解消したアイテム</h2>\\n<p>さて、悩みを解消したアイテムは何かというと\\n記事タイトルにもありますが「タブレットアームスタンド」です。</p>\\n<p>&lt;div class=&quot;kaerebalink-box&quot;&gt; &lt;div class=&quot;kaerebalink-image&quot;&gt;&lt;a href=&quot;https://amzn.to/3vJ2wO7&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=B07HMJ1JJQ&amp;Format=<em>SL250</em>&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=kz62-22&amp;language=ja_JP&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-info&quot;&gt; &lt;div class=&quot;kaerebalink-name&quot;&gt;&lt;a href=&quot;https://amzn.to/3vJ2wO7&quot; target=&quot;_blank&quot;&gt;【最新進化型】タブレット スタンド タブレット アーム スタンド 横/縱き 寝ながら iPad/ iPhone アーム スタンド or ホルダー ベッド、デスク、台所タブレットスタンド 4.5〜12.9インチ for iPad pro 、iPad 、Kindle、android surface、Fire HD8、N-Switch、iPhone XR、iPhone XS多機種対応 黒…【日本語取扱説明書】 (ブラック)&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-powered-date&quot;&gt;posted with &lt;a href=&quot;https://kaereba.com&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;カエレバ&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-detail&quot;&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-rank&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-footer&quot; style=&quot;&quot;&gt; &lt;div class=&quot;shoplinkamazon&quot; style=&quot;display:inline; padding-right:5px;&quot;&gt;&lt;a href=&quot;https://amzn.to/3vJ2wO7&quot; target=&quot;_blank&quot;&gt;Amazon&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-footer&quot; style=&quot;clear: left&quot;&gt;&lt;/div&gt;&lt;/div&gt;</p>\\n<p>こちらの製品の良かった点は3つあります。</p>\\n<ul>\\n<li>アームを固定する部品が水平にも垂直にも付けられる点</li>\\n<li>iPad Air4 にケースを付けていても使用できる点</li>\\n<li>iPhone SE2 でも使用できる点</li>\\n</ul>\\n<p>要するに、場所を選ばず、端末の大きさもある程度の幅を許容できると言うことです。</p>\\n<p>ちなみに、iPad Air4 のケースはこちらを使用しております。</p>\\n<p>&lt;div class=&quot;kaerebalink-box&quot;&gt;&lt;div class=&quot;kaerebalink-image&quot;&gt;&lt;a href=&quot;https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106201046095734?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fa95b5355dd9734e1983e337e7c1c6fb5%2F&amp;m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fa95b5355dd9734e1983e337e7c1c6fb5%2F&quot; target=&quot;_blank&quot; &gt;&lt;img src=&quot;https://thumbnail.image.rakuten.co.jp/ran/img/1001/0004/570/047/544/516/10010004570047544516_1.jpg?_ex=320x320&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-info&quot;&gt;&lt;div class=&quot;kaerebalink-name&quot;&gt;&lt;a href=&quot;https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106201046095734?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fa95b5355dd9734e1983e337e7c1c6fb5%2F&amp;m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fa95b5355dd9734e1983e337e7c1c6fb5%2F&quot; target=&quot;_blank&quot; &gt;ESR 2020 iPad Air 4用ウルトラスリム Smart Folio ソフトケース ネイビーブルー ES20451&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-powered-date&quot;&gt;posted with &lt;a href=&quot;https://kaereba.com&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;カエレバ&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-detail&quot;&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-rank&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-footer&quot; style=&quot;&quot;&gt;&lt;div class=&quot;shoplinkrakuten&quot; style=&quot;display:inline; padding-right:5px;&quot;&gt;&lt;a href=&quot;https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_202106201046095734?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fa95b5355dd9734e1983e337e7c1c6fb5%2F&amp;m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fa95b5355dd9734e1983e337e7c1c6fb5%2F&quot; target=&quot;_blank&quot; &gt;楽天市場&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;shoplinkamazon&quot; style=&quot;display:inline; padding-right:5px;&quot;&gt;&lt;a href=&quot;https://www.amazon.co.jp/gp/search?keywords=ipad%20air4%20%E3%82%B1%E3%83%BC%E3%82%B9%20esr&amp;__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;tag=kz62-22&quot; target=&quot;_blank&quot; &gt;Amazon&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-footer&quot; style=&quot;clear: left&quot;&gt;&lt;/div&gt;&lt;/div&gt;</p>\\n<h2>まとめ</h2>\\n<p>寝そべっている時に動画を見る場合、通常であれば腕で端末を固定するしかありません。</p>\\n<p>iPhone 等のスマホであれば腕が疲れるくらいで済みますが\\niPad 等のタブレットの場合は腕だけで固定するのはなかなか難しいのではないでしょうか。</p>\\n<p>今回ご紹介させて頂いたアイテムであれば3,000円くらいで\\n快適な動画鑑賞環境を作ることができるので\\n是非お試し頂ければと思います。</p>\\n<p>以上、この記事がご参考になれば幸いです。</p>\\n","preview":"","dir":"src/contents/json","base":"2021-06-20_before-bedtime-movies.json","ext":".json","sourceBase":"2021-06-20_before-bedtime-movies.md","sourceExt":".md"}')},390:function(n){n.exports=JSON.parse('{"title":"MT4で快適に相場分析するためにインディケーターを作った","description":"表示している全チャートでラインを同期する。上下キー押下で表示している全チャートの通貨ペアを切り替える。","image":"/images/articles/thumbnails/kabu_chart_man.png","category":"投資","tags":["FX","MQL4","インディケーター"],"created_at":"2021-06-22","updated_at":"2021-06-22","bodyContent":"FXをされている方でMT4を使用して相場分析をしている方は多いと思います。\\n\\n僕は普段、以下画像のように6枚のチャート画面で分析をしております。\\n![チャート１](/images/articles/2021-06-22_custom-indicators/chart1.PNG \'チャート１\')\\n\\n表示している時間足は以下の通りです。\\n\\n- 1分足\\n- 5分足\\n- 15分足\\n- 1時間足\\n- 4時間足\\n- 日足\\n\\nただし、日足のチャートは適宜週足・月足に切り替えております。\\n\\nちなみに、画像の縦横比がおかしいと思われる方が\\nいらっしゃるかもしれないので一応補足しておきますと\\n2枚のモニターを縦に設置してMT4を2枚のモニターに跨って表示させております。\\n\\nアームなしで縦置きできるモニターを探すのに結構苦労したので載せておきますね。\\n<div class=\\"kaerebalink-box\\"><div class=\\"kaerebalink-image\\"><a href=\\"https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_20210622113139515?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fbd60f341567b3208bf78e2ebc1c2c8b9%2F&m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fbd60f341567b3208bf78e2ebc1c2c8b9%2F\\" target=\\"_blank\\" ><img src=\\"https://thumbnail.image.rakuten.co.jp/ran/img/4001/0000/884/116/305/484/40010000884116305484_1.jpg?_ex=320x320\\" style=\\"border: none;\\" /></a></div><div class=\\"kaerebalink-info\\"><div class=\\"kaerebalink-name\\"><a href=\\"https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_20210622113139515?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fbd60f341567b3208bf78e2ebc1c2c8b9%2F&m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fbd60f341567b3208bf78e2ebc1c2c8b9%2F\\" target=\\"_blank\\" >DELL プロフェッショナルシリーズ ワイドモニタ P2219H 22.0インチ</a></div><div class=\\"kaerebalink-powered-date\\">posted with <a href=\\"https://kaereba.com\\" rel=\\"nofollow\\" target=\\"_blank\\">カエレバ</a></div><div class=\\"kaerebalink-detail\\"></div><div class=\\"kaerebalink-rank\\"></div></div><div class=\\"kaerebalink-footer\\" style=\\"\\"><div class=\\"shoplinkrakuten\\" style=\\"display:inline; padding-right:5px;\\"><a href=\\"https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_20210622113139515?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fbd60f341567b3208bf78e2ebc1c2c8b9%2F&m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fbd60f341567b3208bf78e2ebc1c2c8b9%2F\\" target=\\"_blank\\" >楽天市場</a></div><div class=\\"shoplinkamazon\\" style=\\"display:inline; padding-right:5px;\\"><a href=\\"https://www.amazon.co.jp/gp/search?keywords=DELL%20P2219H&__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&tag=kz62-22\\" target=\\"_blank\\" >Amazon</a></div></div><div class=\\"kaerebalink-footer\\" style=\\"clear: left\\"></div></div>\\n\\nで、複数チャートで分析を始めると色々な悩みに遭遇したりしたので\\nインディケーターを自作することで解消していきました。\\n\\n## 複数チャート分析の悩み\\n\\n- 引いたラインが同期されない\\n- 通貨ペアを一括で変更できない\\n\\n1つずつ見ていきましょう。\\n\\n## 引いたラインが同期されない\\n\\n通常のMT4であれば水平線やトレンドラインを引いた際は\\n引いたチャートのみ適用されます。\\n\\nマルチタイムフレーム分析をする場合は\\n上位足に引いたラインを下位足にも表示したいので\\nインディケーターを作ってみました。\\n\\nこのインディケーターの機能は以下の通りです。\\n\\n- インディケーターを適用しているチャート全てに同じラインを引く\\n  - スタイル変更、移動、削除も同期されます\\n- 引いた時間足毎にラインの色が変わる\\n- 引いた時間足より上位の時間足にはラインを表示させない\\n\\nライン自体の同期はもちろん時間足毎に色を変えたり\\nより上位足には表示させないようにしております。\\n\\n上位の時間足の方がラインは強く反応するので色が変わっていると便利ですし\\n上位足で下位足のラインが表示されるとごちゃごちゃしてしまうからです。\\n\\n使用感は以下動画をご覧ください。\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/BnPvD7xQNGQ\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n## 通貨ペアを一括で変更できない\\n\\n複数のチャートを開いて色々な時間足を表示させている場合\\n通貨ペアを全て切り替えるのは非常に面倒です。\\n\\n一括で、しかもキー入力で通貨ペアを切り替えたいと思ったので\\nインディケーターを作ってみました。\\n\\nこのインディケーターの機能は以下の通りです。\\n\\n- インディケーターを適用しているチャート全ての通貨ペアを切り替える\\n- 切り替える通貨ペアの対象は「気配値表示」に存在するものに限る\\n- 上キーを押すと現在表示されている通貨ペアに対して「気配値表示」の1つ上にある通貨ペアを表示\\n- 下キーは1つ下にある通貨ペアを表示\\n- 1周したら上か下に戻る\\n\\nもし表示させたくない通貨ペアがあったら\\n「気配値表示」から削除すればOKです。\\n\\n使用感は以下動画をご覧ください。\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/3DWbbwH4lLU\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n## まとめ\\n\\nいかがでしたでしょうか。\\n\\nMT4って初期状態だとなかなか痒い所に手が届かないような状態になっており\\nいまいち使い勝手が悪いですよね。\\n\\nですがMT4ではインディケーターを自作することができるので\\nプログラミングの知識があれば自作しても良いですし\\nそうでない方でも配布されているものもありますので\\n悩んでいるのであれば取り敢えず検索してみるのが良いでしょう。\\n\\n今回ご紹介したインディケーターが気になる方は\\nお気軽にお問い合わせいただければと思います。\\n\\n最後までお目通し頂きありがとうございました。","bodyHtml":"<p>FXをされている方でMT4を使用して相場分析をしている方は多いと思います。</p>\\n<p>僕は普段、以下画像のように6枚のチャート画面で分析をしております。\\n<img src=\\"/images/articles/2021-06-22_custom-indicators/chart1.PNG\\" alt=\\"チャート１\\" title=\\"チャート１\\"></p>\\n<p>表示している時間足は以下の通りです。</p>\\n<ul>\\n<li>1分足</li>\\n<li>5分足</li>\\n<li>15分足</li>\\n<li>1時間足</li>\\n<li>4時間足</li>\\n<li>日足</li>\\n</ul>\\n<p>ただし、日足のチャートは適宜週足・月足に切り替えております。</p>\\n<p>ちなみに、画像の縦横比がおかしいと思われる方が\\nいらっしゃるかもしれないので一応補足しておきますと\\n2枚のモニターを縦に設置してMT4を2枚のモニターに跨って表示させております。</p>\\n<p>アームなしで縦置きできるモニターを探すのに結構苦労したので載せておきますね。\\n&lt;div class=&quot;kaerebalink-box&quot;&gt;&lt;div class=&quot;kaerebalink-image&quot;&gt;&lt;a href=&quot;https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_20210622113139515?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fbd60f341567b3208bf78e2ebc1c2c8b9%2F&amp;m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fbd60f341567b3208bf78e2ebc1c2c8b9%2F&quot; target=&quot;_blank&quot; &gt;&lt;img src=&quot;https://thumbnail.image.rakuten.co.jp/ran/img/4001/0000/884/116/305/484/40010000884116305484_1.jpg?_ex=320x320&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-info&quot;&gt;&lt;div class=&quot;kaerebalink-name&quot;&gt;&lt;a href=&quot;https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_20210622113139515?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fbd60f341567b3208bf78e2ebc1c2c8b9%2F&amp;m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fbd60f341567b3208bf78e2ebc1c2c8b9%2F&quot; target=&quot;_blank&quot; &gt;DELL プロフェッショナルシリーズ ワイドモニタ P2219H 22.0インチ&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-powered-date&quot;&gt;posted with &lt;a href=&quot;https://kaereba.com&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;カエレバ&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-detail&quot;&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-rank&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-footer&quot; style=&quot;&quot;&gt;&lt;div class=&quot;shoplinkrakuten&quot; style=&quot;display:inline; padding-right:5px;&quot;&gt;&lt;a href=&quot;https://hb.afl.rakuten.co.jp/hgc/g0000016.d1wqs274.g0000016.d1wqtfb9/kaereba_main_20210622113139515?pc=https%3A%2F%2Fproduct.rakuten.co.jp%2Fproduct%2F-%2Fbd60f341567b3208bf78e2ebc1c2c8b9%2F&amp;m=http%3A%2F%2Fm.product.rakuten.co.jp%2Fproduct%2Fbd60f341567b3208bf78e2ebc1c2c8b9%2F&quot; target=&quot;_blank&quot; &gt;楽天市場&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;shoplinkamazon&quot; style=&quot;display:inline; padding-right:5px;&quot;&gt;&lt;a href=&quot;https://www.amazon.co.jp/gp/search?keywords=DELL%20P2219H&amp;__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;tag=kz62-22&quot; target=&quot;_blank&quot; &gt;Amazon&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;kaerebalink-footer&quot; style=&quot;clear: left&quot;&gt;&lt;/div&gt;&lt;/div&gt;</p>\\n<p>で、複数チャートで分析を始めると色々な悩みに遭遇したりしたので\\nインディケーターを自作することで解消していきました。</p>\\n<h2>複数チャート分析の悩み</h2>\\n<ul>\\n<li>引いたラインが同期されない</li>\\n<li>通貨ペアを一括で変更できない</li>\\n</ul>\\n<p>1つずつ見ていきましょう。</p>\\n<h2>引いたラインが同期されない</h2>\\n<p>通常のMT4であれば水平線やトレンドラインを引いた際は\\n引いたチャートのみ適用されます。</p>\\n<p>マルチタイムフレーム分析をする場合は\\n上位足に引いたラインを下位足にも表示したいので\\nインディケーターを作ってみました。</p>\\n<p>このインディケーターの機能は以下の通りです。</p>\\n<ul>\\n<li>インディケーターを適用しているチャート全てに同じラインを引く\\n<ul>\\n<li>スタイル変更、移動、削除も同期されます</li>\\n</ul>\\n</li>\\n<li>引いた時間足毎にラインの色が変わる</li>\\n<li>引いた時間足より上位の時間足にはラインを表示させない</li>\\n</ul>\\n<p>ライン自体の同期はもちろん時間足毎に色を変えたり\\nより上位足には表示させないようにしております。</p>\\n<p>上位の時間足の方がラインは強く反応するので色が変わっていると便利ですし\\n上位足で下位足のラインが表示されるとごちゃごちゃしてしまうからです。</p>\\n<p>使用感は以下動画をご覧ください。</p>\\n<p>&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/BnPvD7xQNGQ&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;</p>\\n<h2>通貨ペアを一括で変更できない</h2>\\n<p>複数のチャートを開いて色々な時間足を表示させている場合\\n通貨ペアを全て切り替えるのは非常に面倒です。</p>\\n<p>一括で、しかもキー入力で通貨ペアを切り替えたいと思ったので\\nインディケーターを作ってみました。</p>\\n<p>このインディケーターの機能は以下の通りです。</p>\\n<ul>\\n<li>インディケーターを適用しているチャート全ての通貨ペアを切り替える</li>\\n<li>切り替える通貨ペアの対象は「気配値表示」に存在するものに限る</li>\\n<li>上キーを押すと現在表示されている通貨ペアに対して「気配値表示」の1つ上にある通貨ペアを表示</li>\\n<li>下キーは1つ下にある通貨ペアを表示</li>\\n<li>1周したら上か下に戻る</li>\\n</ul>\\n<p>もし表示させたくない通貨ペアがあったら\\n「気配値表示」から削除すればOKです。</p>\\n<p>使用感は以下動画をご覧ください。</p>\\n<p>&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/3DWbbwH4lLU&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;</p>\\n<h2>まとめ</h2>\\n<p>いかがでしたでしょうか。</p>\\n<p>MT4って初期状態だとなかなか痒い所に手が届かないような状態になっており\\nいまいち使い勝手が悪いですよね。</p>\\n<p>ですがMT4ではインディケーターを自作することができるので\\nプログラミングの知識があれば自作しても良いですし\\nそうでない方でも配布されているものもありますので\\n悩んでいるのであれば取り敢えず検索してみるのが良いでしょう。</p>\\n<p>今回ご紹介したインディケーターが気になる方は\\nお気軽にお問い合わせいただければと思います。</p>\\n<p>最後までお目通し頂きありがとうございました。</p>\\n","preview":"","dir":"src/contents/json","base":"2021-06-22_custom-indicators.json","ext":".json","sourceBase":"2021-06-22_custom-indicators.md","sourceExt":".md"}')},391:function(n){n.exports=JSON.parse('{"title":"GogoJungleで出品したインジケーターのWeb認証がうまく動かない時の対処法","description":"Authentication success と出ているのにうまく動かない時の対処法です。","image":"/images/articles/thumbnails/kabu_chart_man.png","category":"投資","tags":["FX","MQL4","インディケーター","ゴゴジャン"],"created_at":"2021-07-10","updated_at":"2021-07-10","bodyContent":"私はゴゴジャンでインジケーターを出品しているのですが\\nある時Web認証をしているはずのインジケーターが\\n別の口座でも使用できることが判明いたしました。\\n\\nこれはまずいと思い解決策を模索したところ\\n見つかったので記載しようと思います。\\n\\n## 事象の確認\\n\\n誤解のないように言っておきますと\\n「Authentication success」や\\n「Authentication failure」が出ているのに認証が効いていないのです。\\n\\n「Authentication success」であればインジケーターはもちろん使用可能。\\nそして、\\n「Authentication failure」でもインジケーターの使用ができてしまうのです。\\n\\n## ゴゴジャンのWeb認証の仕組み\\n\\nそもそもWeb認証の仕組みについてですが\\nOnInit や OnTimer の関数で\\nゴゴジャンのAPIにアクセスしに行って\\n認証OKであればインジケーターが作動するようになっています。\\n\\n## 認証のチェックをする場所\\n\\nで、認証をチェックする場所ですが\\nインジケーターの場合は\\nOnCalculate 関数で行っております。\\nこの関数の先頭でチェックして\\n認証NGの場合は後続の処理をしないということです。\\n\\n## ではなぜ使用できてしまうのか\\n\\n私が作ったインジケーターは\\nOnChartEvent 関数で動くものだったからです。\\n\\nこの関数には認証チェックのロジックが入っていないので\\n「Authentication failure」でも使用できてしまうというわけです。\\n\\nなので以下コードを OnChartEvent 関数の先頭に追加したら\\nしっかりと認証が動き使用できなくなったことを\\n確認することができました。\\n\\n```java\\nif(AuthResult == false){return;}\\n```\\n\\n## まとめ\\n\\nゴゴジャンで認証コード挿入時に\\nOnChartEvent にも自動で追加して欲しい。","bodyHtml":"<p>私はゴゴジャンでインジケーターを出品しているのですが\\nある時Web認証をしているはずのインジケーターが\\n別の口座でも使用できることが判明いたしました。</p>\\n<p>これはまずいと思い解決策を模索したところ\\n見つかったので記載しようと思います。</p>\\n<h2>事象の確認</h2>\\n<p>誤解のないように言っておきますと\\n「Authentication success」や\\n「Authentication failure」が出ているのに認証が効いていないのです。</p>\\n<p>「Authentication success」であればインジケーターはもちろん使用可能。\\nそして、\\n「Authentication failure」でもインジケーターの使用ができてしまうのです。</p>\\n<h2>ゴゴジャンのWeb認証の仕組み</h2>\\n<p>そもそもWeb認証の仕組みについてですが\\nOnInit や OnTimer の関数で\\nゴゴジャンのAPIにアクセスしに行って\\n認証OKであればインジケーターが作動するようになっています。</p>\\n<h2>認証のチェックをする場所</h2>\\n<p>で、認証をチェックする場所ですが\\nインジケーターの場合は\\nOnCalculate 関数で行っております。\\nこの関数の先頭でチェックして\\n認証NGの場合は後続の処理をしないということです。</p>\\n<h2>ではなぜ使用できてしまうのか</h2>\\n<p>私が作ったインジケーターは\\nOnChartEvent 関数で動くものだったからです。</p>\\n<p>この関数には認証チェックのロジックが入っていないので\\n「Authentication failure」でも使用できてしまうというわけです。</p>\\n<p>なので以下コードを OnChartEvent 関数の先頭に追加したら\\nしっかりと認証が動き使用できなくなったことを\\n確認することができました。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">if</span>(AuthResult == <span class=\\"hljs-keyword\\">false</span>){<span class=\\"hljs-keyword\\">return</span>;}</code></pre><h2>まとめ</h2>\\n<p>ゴゴジャンで認証コード挿入時に\\nOnChartEvent にも自動で追加して欲しい。</p>\\n","preview":"私はゴゴジャンでインジケーターを出品しているのですが\\nある時Web認証をしているはずのインジケーターが\\n別の口座でも使用できることが判明いたしました。\\n\\nこれはまずいと思い解決策を模索したところ\\n見つかったので記載しようと思います。\\n\\n事象の確認\\n\\n誤解のないように言っておきますと\\n「Authentication","dir":"src/contents/json","base":"2021-07-10_gogojungle-auth.json","ext":".json","sourceBase":"2021-07-10_gogojungle-auth.md","sourceExt":".md"}')},392:function(n,e,t){"use strict";var o=t(345);t.n(o).a},393:function(n,e,t){(n.exports=t(13)(!1)).push([n.i,".pages-articles__sticky[data-v-21dcf26e]{position:-webkit-sticky;position:sticky;top:20px;height:90vh;overflow-y:scroll}",""])},401:function(n,e,t){"use strict";t.r(e);t(35);var o=t(398),summary=(t(45),t(46),t(333)),r=t(328),l=(t(168),t(60),t(358)),c=t.n(l),d=(t(359),t(361),t(362),{props:{content:{type:String,default:void 0}},computed:{namedContent:function(){return this.content.split(/\n|\r\n/).map((function(n,i){return new RegExp(/^#{2,5} .*$/).test(n)?"".concat(n," {#toc_").concat(i,"}"):n})).join("\n")}},mounted:function(){c.a.highlightAll()}}),m=(t(364),t(33)),h=Object(m.a)(d,(function(){var n=this.$createElement,e=this._self._c||n;return e("div",{staticClass:"pb-markdown-viewer"},[e("div",{staticClass:"line-numbers",domProps:{innerHTML:this._s(this.$md.render(this.namedContent))}})])}),[],!1,null,null,null).exports,v={props:{title:{type:String,default:""},hashtags:{type:Array,default:function(){return[]}}},computed:{currentUrl:function(){return encodeURIComponent("https://www.kz62.net"+this.$route.path)},twitterShareUrl:function(){return"https://twitter.com/share?"+"url=".concat(this.currentUrl,"&")+"hashtags=".concat(this.hashtags.join(","),"&")+"text=".concat(this.title)},facebookShareUrl:function(){return"http://www.facebook.com/share.php?u=".concat(this.currentUrl)},hatenaShareUrl:function(){return"http://b.hatena.ne.jp/add?mode=confirm&url=".concat(this.currentUrl,"&title=").concat(this.title)}}},f=t(52),k=t.n(f),j=t(320),w=t(313),_=t(399),x=t(315),y=Object(m.a)(v,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("v-row",{attrs:{dense:""}},[t("v-col",[t("v-btn",{staticClass:"white--text",attrs:{href:n.twitterShareUrl,rel:"nofollow",target:"_blank",color:"#1DA1F2",tile:"",width:"80"}},[t("v-icon",[n._v("mdi-twitter")])],1),n._v(" "),t("v-btn",{staticClass:"white--text",attrs:{href:n.facebookShareUrl,rel:"nofollow",target:"_blank",color:"#3C5A99",tile:"",width:"80"}},[t("v-icon",[n._v("mdi-facebook")])],1),n._v(" "),t("v-btn",{staticClass:"white--text",attrs:{href:n.hatenaShareUrl,rel:"nofollow",target:"_blank",color:"#5279E7",tile:"",width:"80"}},[t("span",{staticClass:"headline font-weight-bold"},[n._v("\n        B!\n      ")])])],1)],1)}),[],!1,null,null,null),F=y.exports;k()(y,{VBtn:j.a,VCol:w.a,VIcon:_.a,VRow:x.a});var E=t(335),A={props:{text:{type:String,default:""}},computed:{headers:function(){var n=[];return this.text.split(/\n|\r\n/).forEach((function(e,i){new RegExp(/^#{2,5} .*$/).test(e)&&n.push({text:e.replace("## ","").replace(/#/g,"　"),id:"#toc_".concat(i)})})),n}}},S=(t(368),t(325)),M=t(323),I=Object(m.a)(A,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"pb-toc-creator"},[t("v-card",{attrs:{flat:"",tile:""}},[t("v-card-title",[n._v("\n      - contents -\n    ")]),n._v(" "),t("v-card-text",n._l(n.headers,(function(header,i){return t("div",{key:i},[t("a",{staticClass:"pb-toc-creator__link",on:{click:function(e){return n.$vuetify.goTo(header.id)}}},[n._v("\n          "+n._s(header.text)+"\n        ")])])})),0)],1)],1)}),[],!1,null,null,null),B=I.exports;k()(I,{VCard:S.a,VCardText:M.a,VCardTitle:M.b});var C=t(324),P={components:{PbArticleCardList:r.a,PbMarkdownViewer:h,PbShareBtns:F,PbTags:E.a,PbTocCreator:B},mixins:[C.a],validate:function(n){var e=n.params;return summary.sourceFileArray.includes("src/contents/markdown/".concat(e.date,"_").concat(e.slug,".md"))},computed:{breadcrumbs:function(){return[{text:"ホーム",to:"/"},{text:this.article.category,to:"/search/category/".concat(this.article.category,"/")},{text:this.article.title,disabled:!0}]}},asyncData:function(n){var e=n.params,article=t(370)("./".concat(e.date,"_").concat(e.slug,".json")),head={title:article.title,description:article.description||article.preview,image:"".concat("https://www.kz62.net").concat(article.image)},r=t(333),l=r.fileMap,c=r.sourceFileArray.sort().reverse().map((function(n){var e=n.replace("/markdown/","/json/").replace(".md",".json");return l[e]})).filter((function(n){return n.category===article.category})).filter((function(n){return e=article.tags,t=n.tags,[].concat(Object(o.a)(e),Object(o.a)(t)).filter((function(n){return e.includes(n)&&t.includes(n)})).length>0;var e,t})).filter((function(n){return n.base!==article.base})).slice(0,4);return{article:article,head:head,relationArticles:c}}},U=(t(392),t(348)),N=t(166),L=t(34),O=Object(m.a)(P,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"pages-articles"},[t("v-row",[t("v-col",{attrs:{cols:"12",md:"4","order-md":"last"}},[t("pb-toc-creator",{class:n.$vuetify.breakpoint.mdAndUp?"pages-articles__sticky":"",attrs:{text:n.article.bodyContent}})],1),n._v(" "),t("v-col",{attrs:{cols:"12",md:"8"}},[t("v-sheet",{class:n.$vuetify.breakpoint.mdAndUp?"pa-8":"pa-2",attrs:{flat:"",tile:""}},[t("v-breadcrumbs",{staticClass:"pa-0",attrs:{items:n.breadcrumbs,divider:">"}}),n._v(" "),t("h1",{staticClass:"my-4 display-1 font-weight-bold"},[n._v("\n          "+n._s(n.article.title)+"\n        ")]),n._v(" "),t("div",{staticClass:"my-4"},[t("v-icon",{attrs:{size:"20"}},[n._v("mdi-calendar")]),n._v("\n          "+n._s(n.article.created_at)+"\n\n          "),t("v-icon",{attrs:{size:"20"}},[n._v("mdi-update")]),n._v("\n          "+n._s(n.article.updated_at)+"\n        ")],1),n._v(" "),t("div",{staticClass:"my-4"},[t("pb-tags",{attrs:{items:n.article.tags}})],1),n._v(" "),t("v-img",{staticClass:"my-4",attrs:{src:n.article.image,alt:n.article.title}}),n._v(" "),t("pb-markdown-viewer",{staticClass:"my-4",attrs:{content:n.article.bodyContent}}),n._v(" "),t("pb-share-btns",{staticClass:"my-4",attrs:{title:n.article.title,hashtags:n.article.tags}}),n._v(" "),n.relationArticles.length?t("div",{staticClass:"my-4 headline font-weight-bold"},[n._v("\n          関連記事\n        ")]):n._e(),n._v(" "),t("pb-article-card-list",{staticClass:"my-4",attrs:{items:n.relationArticles}})],1)],1)],1)],1)}),[],!1,null,"21dcf26e",null);e.default=O.exports;k()(O,{VBreadcrumbs:U.a,VCol:w.a,VIcon:_.a,VImg:N.a,VRow:x.a,VSheet:L.a})}}]);